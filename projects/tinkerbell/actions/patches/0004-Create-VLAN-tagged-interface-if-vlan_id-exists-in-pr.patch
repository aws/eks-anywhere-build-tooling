From 6aefa76d0a7bfab14dffe1e05971746ce061bb31 Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Thu, 2 May 2024 12:42:22 -0700
Subject: [PATCH 4/8] Create VLAN tagged interface if vlan_id exists in
 /proc/cmdline

This enables a vlan tagged machine to boot properly.

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 writefile/main.go | 107 +++++++++++++++++++++++++++++++++++++---------
 1 file changed, 87 insertions(+), 20 deletions(-)

diff --git a/writefile/main.go b/writefile/main.go
index 38103ff..cc8330a 100644
--- a/writefile/main.go
+++ b/writefile/main.go
@@ -14,6 +14,7 @@ import (
 	"os/exec"
 	"path"
 	"path/filepath"
+	"regexp"
 	"runtime"
 	"strconv"
 	"strings"
@@ -37,6 +38,7 @@ type Info struct {
 	IPAddr      net.IPNet
 	Gateway     net.IP
 	Nameservers []net.IP
+	VLANID      int
 }
 
 func main() {
@@ -67,7 +69,28 @@ func main() {
 				log.Errorf("Invalid DHCP_TIMEOUT: %s, using default: %v", t, timeout)
 			}
 		}
-		contents, err = dhcpAndWriteNetplan(ifname, timeout)
+		netplanTemplate := `network:
+		version: 2
+		renderer: networkd
+		ethernets:
+        id0:
+            match:
+                macaddress: {{ .HWAddr }}
+            addresses:
+                - {{ ToString .IPAddr }}
+            nameservers:
+                addresses: [{{ ToStringSlice .Nameservers ", " }}]
+            {{- if .Gateway }}
+            routes:
+                - to: default
+                  via: {{ ToString .Gateway }}
+            {{- end }}
+`
+		if n, template, err := vlanEnabled("/proc/cmdline"); err == nil {
+			netplanTemplate = template
+			ifname = n
+		}
+		contents, err = dhcpAndWriteNetplan(ifname, timeout, netplanTemplate)
 		if err != nil {
 			log.Fatal(err)
 		}
@@ -277,7 +300,43 @@ func dirExists(mountPath, path string) (bool, error) {
 	return !os.IsNotExist(err), nil
 }
 
-func dhcpAndWriteNetplan(ifname string, dhcpTimeout time.Duration) (string, error) {
+func vlanEnabled(f string) (ifname, netplanTemplate string, err error) {
+	ifname = determineNetIF()
+	// want "eth0.X", where X is between 1 and 4096
+	// This interface will exist if Hook creates it. Hook will create it if "vlan_id" is set in /proc/cmdline.
+	exp := `^eth([0-9]).(409[0-6]|(40[0-8]|[1-3]\d\d|[1-9]\d|[1-9])\d|[1-9])$`
+	if match, err := regexp.MatchString(exp, ifname); err != nil || !match {
+		return "", "", fmt.Errorf("failed to match interface name %s with regex %s: %w", ifname, exp, err)
+	}
+
+	netplanTemplate = `network:
+    version: 2
+    renderer: networkd
+    ethernets:
+        mainif:
+            match:
+                macaddress: {{ .HWAddr }}
+            set-name: mainif
+
+    vlans:
+        vlan{{ .VLANID }}:
+            id: {{ .VLANID }}
+            link: mainif
+            addresses:
+            - {{ ToString .IPAddr }}
+            nameservers:
+                addresses: [{{ ToStringSlice .Nameservers ", " }}]
+            {{- if .Gateway }}
+            routes:
+                - to: default
+                  via: {{ ToString .Gateway }}
+            {{- end }}
+`
+
+	return ifname, netplanTemplate, nil
+}
+
+func dhcpAndWriteNetplan(ifname string, dhcpTimeout time.Duration, netplanTemplate string) (string, error) {
 	// After locking a goroutine to its current OS thread with runtime.LockOSThread()
 	// and changing its network namespace, any new subsequent goroutine won't be scheduled
 	// on that thread while it's locked. Therefore, the new goroutine will run in a
@@ -306,24 +365,6 @@ func dhcpAndWriteNetplan(ifname string, dhcpTimeout time.Duration) (string, erro
 		return "", err
 	}
 
-	netplanTemplate := `network:
-    version: 2
-    renderer: networkd
-    ethernets:
-        id0:
-            match:
-                macaddress: {{ .HWAddr }}
-            addresses:
-                - {{ ToString .IPAddr }}
-            nameservers:
-                addresses: [{{ ToStringSlice .Nameservers ", " }}]
-            {{- if .Gateway }}
-            routes:
-                - to: default
-                  via: {{ ToString .Gateway }}
-            {{- end }}
-`
-
 	return createNetplan(netplanTemplate, translate(d))
 }
 
@@ -381,10 +422,36 @@ func translate(d *dhcpv4.DHCPv4) Info {
 	info.IPAddr = net.IPNet{IP: d.YourIPAddr, Mask: d.SubnetMask()}
 	info.Gateway = d.GetOneOption(dhcpv4.OptionRouter)
 	info.Nameservers = d.DNS()
+	s, err := os.ReadFile("/proc/cmdline")
+	if err != nil {
+		fmt.Println("failed to read /proc/cmdline while looking for vlan_id=: ", err)
+		return info
+	}
+	if vlanID, err := getVLANID(string(s)); err == nil {
+		info.VLANID = vlanID
+	}
 
 	return info
 }
 
+// getVLANID parses a string for a value from key `vlan_id=` and returns it.
+func getVLANID(b string) (int, error) {
+	i := strings.Index(b, "vlan_id=")
+	if i == -1 {
+		return -1, errors.New("no vlan_id= key found")
+	}
+
+	value := b[i : i+12] // max acceptable vlan id is 4 digits, so 12 chars (vlan_id=1234) is enough.
+	value = strings.Split(value, " ")[0]
+	value = strings.TrimRight(value, " ")
+	parsed := strings.Split(value, "=")
+	if len(parsed[1]) == 0 {
+		return -1, errors.New("no vlan_id found")
+	}
+
+	return strconv.Atoi(parsed[1])
+}
+
 func recursiveEnsureDir(mountPath, path string, mode os.FileMode, uid, gid int) error {
 	// Does the directory already exist? If so we can return early
 	exists, err := dirExists(mountPath, path)
-- 
2.47.1

