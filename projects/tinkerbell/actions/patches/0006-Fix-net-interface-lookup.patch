From 8fa516bcfb72d295e8929c88c44d28f6ca70ecb3 Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Thu, 2 May 2024 12:51:23 -0700
Subject: [PATCH 6/8] Fix net interface lookup

We use the mac address in /proc/cmdline
to be sure we use the interface that is
known to the Tinkerbell stack.

This fixes issues when multiple configured
interfaces are present.

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 writefile/cmdline.go | 156 +++++++++++++++++++++++++++++++++++++++++++
 writefile/main.go    |  16 +++++
 2 files changed, 172 insertions(+)
 create mode 100644 writefile/cmdline.go

diff --git a/writefile/cmdline.go b/writefile/cmdline.go
new file mode 100644
index 0000000..a4003d2
--- /dev/null
+++ b/writefile/cmdline.go
@@ -0,0 +1,156 @@
+// Copyright 2018 the u-root Authors. All rights reserved
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Package cmdline is parser for kernel command-line args from /proc/cmdline.
+//
+// It's conformant with
+// https://www.kernel.org/doc/html/v4.14/admin-guide/kernel-parameters.html,
+// though making 'var_name' and 'var-name' equivalent may need to be done
+// separately.
+// https://github.com/u-root/u-root/blob/main/pkg/cmdline/
+package main
+import (
+	"io"
+	"os"
+	"strings"
+	"unicode"
+)
+
+// CmdLine lets people view the raw & parsed /proc/cmdline in one place
+type CmdLine struct {
+	Raw   string
+	AsMap map[string]string
+	Err   error
+}
+
+func cmdLine(n string) *CmdLine {
+	var procCmdLine *CmdLine
+	procCmdLine = &CmdLine{AsMap: map[string]string{}}
+	r, err := os.Open(n)
+	if err != nil {
+		procCmdLine.Err = err
+		return procCmdLine
+	}
+
+	defer r.Close()
+
+	procCmdLine = parse(r)
+	return procCmdLine
+}
+
+// parse returns the current command line, trimmed
+func parse(cmdlineReader io.Reader) *CmdLine {
+	var line = &CmdLine{}
+	raw, err := io.ReadAll(cmdlineReader)
+	line.Err = err
+	// This works because string(nil) is ""
+	line.Raw = strings.TrimRight(string(raw), "\n")
+	line.AsMap = parseToMap(line.Raw)
+	return line
+}
+
+func dequote(line string) string {
+	if len(line) == 0 {
+		return line
+	}
+
+	quotationMarks := `"'`
+
+	var quote byte
+	if strings.ContainsAny(string(line[0]), quotationMarks) {
+		quote = line[0]
+		line = line[1 : len(line)-1]
+	}
+
+	var context []byte
+	var newLine []byte
+	for _, c := range []byte(line) {
+		if c == '\\' {
+			context = append(context, c)
+		} else if c == quote {
+			if len(context) > 0 {
+				last := context[len(context)-1]
+				if last == c {
+					context = context[:len(context)-1]
+				} else if last == '\\' {
+					// Delete one level of backslash
+					newLine = newLine[:len(newLine)-1]
+					context = []byte{}
+				}
+			} else {
+				context = append(context, c)
+			}
+		} else if len(context) > 0 && context[len(context)-1] == '\\' {
+			// If backslash is being used to escape something other
+			// than "the quote", ignore it.
+			context = []byte{}
+		}
+
+		newLine = append(newLine, c)
+	}
+	return string(newLine)
+}
+
+func doParse(input string, handler func(flag, key, canonicalKey, value, trimmedValue string)) {
+	lastQuote := rune(0)
+	quotedFieldsCheck := func(c rune) bool {
+		switch {
+		case c == lastQuote:
+			lastQuote = rune(0)
+			return false
+		case lastQuote != rune(0):
+			return false
+		case unicode.In(c, unicode.Quotation_Mark):
+			lastQuote = c
+			return false
+		default:
+			return unicode.IsSpace(c)
+		}
+	}
+
+	for _, flag := range strings.FieldsFunc(string(input), quotedFieldsCheck) {
+		// kernel variables must allow '-' and '_' to be equivalent in variable
+		// names. We will replace dashes with underscores for processing.
+
+		// Split the flag into a key and value, setting value="1" if none
+		split := strings.Index(flag, "=")
+
+		if len(flag) == 0 {
+			continue
+		}
+		var key, value string
+		if split == -1 {
+			key = flag
+			value = "1"
+		} else {
+			key = flag[:split]
+			value = flag[split+1:]
+		}
+		canonicalKey := strings.Replace(key, "-", "_", -1)
+		trimmedValue := dequote(value)
+
+		// Call the user handler
+		handler(flag, key, canonicalKey, value, trimmedValue)
+	}
+}
+
+// parseToMap turns a space-separated kernel commandline into a map
+func parseToMap(input string) map[string]string {
+	flagMap := make(map[string]string)
+	doParse(input, func(flag, key, canonicalKey, value, trimmedValue string) {
+		// We store the value twice, once with dash, once with underscores
+		// Just in case people check with the wrong method
+		flagMap[canonicalKey] = trimmedValue
+		flagMap[key] = trimmedValue
+	})
+
+	return flagMap
+}
+
+// Flag returns the value of a flag, and whether it was set
+func (c *CmdLine) Flag(flag string) (string, bool) {
+	canonicalFlag := strings.Replace(flag, "-", "_", -1)
+	value, present := c.AsMap[canonicalFlag]
+	return value, present
+}
\ No newline at end of file
diff --git a/writefile/main.go b/writefile/main.go
index abc18ac..3776031 100644
--- a/writefile/main.go
+++ b/writefile/main.go
@@ -309,6 +309,22 @@ func appendToUserData(contents string, filePath string) error {
 	return nil
 }
 
+// getMacAddress reads the /proc/cmdline file and returns the mac address.
+func getMacAddress() (string, error) {
+	f := "/proc/cmdline"
+	cmdl := cmdLine(f)
+	clFlags := []string{"worker_id", "hw_addr"}
+	for _, flag := range clFlags {
+		mac, found := cmdl.Flag(flag)
+		if !found {
+			continue
+		}
+		return mac, nil
+	}
+
+	return "", errors.New("failed to find mac address in /proc/cmdline")
+}
+
 func determineNetIF() string {
   runtime.LockOSThread()
   defer runtime.UnlockOSThread()
-- 
2.47.1

