From 7a690047cfd6bf4370b41020eb89af10f91f7863 Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Thu, 2 May 2024 12:20:29 -0700
Subject: [PATCH 1/7] Add Bootconfig support to WriteFile

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 writefile/main.go | 30 +++++++++++++++++++++++++++++-
 1 file changed, 29 insertions(+), 1 deletion(-)

diff --git a/writefile/main.go b/writefile/main.go
index 3961281..9e7d78f 100644
--- a/writefile/main.go
+++ b/writefile/main.go
@@ -4,6 +4,7 @@ import (
 	"errors"
 	"fmt"
 	"os"
+	"os/exec"
 	"path/filepath"
 	"strconv"
 	"strings"
@@ -12,7 +13,10 @@ import (
 	log "github.com/sirupsen/logrus"
 )
 
-const mountAction = "/mountAction"
+const (
+	mountAction = "/mountAction"
+	bootConfigAction = "/usr/bin/bootconfig"
+)
 
 func main() {
 	fmt.Printf("WriteFile - Write file to disk\n------------------------\n")
@@ -22,6 +26,7 @@ func main() {
 	filePath := os.Getenv("DEST_PATH")
 
 	contents := os.Getenv("CONTENTS")
+	bootconfig := os.Getenv("BOOTCONFIG_CONTENTS")
 	uid := os.Getenv("UID")
 	gid := os.Getenv("GID")
 	mode := os.Getenv("MODE")
@@ -41,6 +46,10 @@ func main() {
 		log.Fatalf("Could not parse mode: %v", err)
 	}
 
+	if bootconfig != "" && contents != "" {
+		log.Fatal("Both BOOTCONFIG_CONTENTS and CONTENTS cannot be set.")
+	}
+
 	fileMode := os.FileMode(modePrime)
 
 	dirModePrime, err := strconv.ParseUint(dirMode, 8, 32)
@@ -81,12 +90,31 @@ func main() {
 		log.Fatalf("Failed to ensure directory exists: %v", err)
 	}
 
+	// If bootconfig is set, contents will be empty and will serve as output initrd file provided
+	// to bootconfig tool
 	fqFilePath := filepath.Join(mountAction, filePath)
 	// Write the file to disk
 	if err := os.WriteFile(fqFilePath, []byte(contents), fileMode); err != nil {
 		log.Fatalf("Could not write file %s: %v", filePath, err)
 	}
 
+	if bootconfig != "" {
+		// Write the input bootconfig to file to serve as input to the tool
+		inputFilePath := "/userInputBootConfig"
+		err := os.WriteFile(inputFilePath, []byte(bootconfig), fileMode)
+		if err != nil {
+			log.Fatalf("Could not write file %s: %v", filePath, err)
+		}
+		defer os.Remove(inputFilePath)
+
+		// Parse through bootconfig if enabled
+		cmd := exec.Command(bootConfigAction, "-a", inputFilePath, fqFilePath)
+		output, err := cmd.Output()
+		if err != nil {
+			log.Fatalf("Error running Bootconfig tool. Err: %v, Output: %s", err, string(output))
+		}
+	}
+
 	if err := os.Chown(fqFilePath, fileUID, fileGID); err != nil {
 		log.Fatalf("Could not modify ownership of file %s: %v", filePath, err)
 	}
-- 
2.40.0

