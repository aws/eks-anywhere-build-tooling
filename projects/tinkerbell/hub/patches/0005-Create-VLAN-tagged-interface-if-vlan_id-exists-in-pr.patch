From 8a84e41f0725d86f3e1f833546d52887cc82cffa Mon Sep 17 00:00:00 2001
From: Jacob Weinstock <jakobweinstock@gmail.com>
Date: Wed, 9 Nov 2022 16:36:15 +0000
Subject: [PATCH] Create VLAN tagged interface if vlan_id= exists in
 /proc/cmdline:

This enables a vlan tagged machine to boot properly.

Signed-off-by: Jacob Weinstock <jakobweinstock@gmail.com>
---
 actions/writefile/v1/go.mod  |   1 +
 actions/writefile/v1/go.sum  |   4 ++
 actions/writefile/v1/main.go | 127 +++++++++++++++++++++++++++++------
 3 files changed, 112 insertions(+), 20 deletions(-)

diff --git a/actions/writefile/v1/go.mod b/actions/writefile/v1/go.mod
index 374846c..399c5a3 100644
--- a/actions/writefile/v1/go.mod
+++ b/actions/writefile/v1/go.mod
@@ -7,6 +7,7 @@ require (
 	github.com/kr/text v0.2.0 // indirect
 	github.com/sirupsen/logrus v1.7.0
 	github.com/stretchr/testify v1.7.0 // indirect
+	github.com/vishvananda/netlink v1.1.0 // indirect
 	github.com/vishvananda/netns v0.0.0-20211101163701-50045581ed74
 	gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect
 	gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b // indirect
diff --git a/actions/writefile/v1/go.sum b/actions/writefile/v1/go.sum
index 3909e4b..15d11a9 100644
--- a/actions/writefile/v1/go.sum
+++ b/actions/writefile/v1/go.sum
@@ -47,6 +47,9 @@ github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5Cc
 github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
 github.com/u-root/uio v0.0.0-20210528114334-82958018845c h1:BFvcl34IGnw8yvJi8hlqLFo9EshRInwWBs2M5fGWzQA=
 github.com/u-root/uio v0.0.0-20210528114334-82958018845c/go.mod h1:LpEX5FO/cB+WF4TYGY1V5qktpaZLkKkSegbr0V4eYXA=
+github.com/vishvananda/netlink v1.1.0 h1:1iyaYNBLmP6L0220aDnYQpo1QEV4t4hJ+xEEhhJH8j0=
+github.com/vishvananda/netlink v1.1.0/go.mod h1:cTgwzPIzzgDAYoQrMm0EdrjRUBkTqKYppBueQtXaqoE=
+github.com/vishvananda/netns v0.0.0-20191106174202-0a2b9b5464df/go.mod h1:JP3t17pCcGlemwknint6hfoeCVQrEMVwxRLRjXpq+BU=
 github.com/vishvananda/netns v0.0.0-20211101163701-50045581ed74 h1:gga7acRE695APm9hlsSMoOoE65U4/TcqNj90mc69Rlg=
 github.com/vishvananda/netns v0.0.0-20211101163701-50045581ed74/go.mod h1:DD4vA1DwXk04H54A1oHXtwZmA0grkVMdPxx/VGLCah0=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
@@ -67,6 +70,7 @@ golang.org/x/sys v0.0.0-20190411185658-b44545bcd369/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190418153312-f0ce4c0180be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190606122018-79a91cf218c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190606203320-7fc4e5ec1444/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
diff --git a/actions/writefile/v1/main.go b/actions/writefile/v1/main.go
index cfd9974..339dedd 100644
--- a/actions/writefile/v1/main.go
+++ b/actions/writefile/v1/main.go
@@ -23,6 +23,7 @@ import (
 	"github.com/insomniacslk/dhcp/dhcpv4"
 	"github.com/insomniacslk/dhcp/dhcpv4/nclient4"
 	log "github.com/sirupsen/logrus"
+	"github.com/vishvananda/netlink"
 	"github.com/vishvananda/netns"
 )
 
@@ -37,6 +38,7 @@ type Info struct {
 	IPAddr      net.IPNet
 	Gateway     net.IP
 	Nameservers []net.IP
+	VLANID      int
 }
 
 func main() {
@@ -67,7 +69,28 @@ func main() {
 				log.Errorf("Invalid DHCP_TIMEOUT: %s, using default: %v", t, timeout)
 			}
 		}
-		contents, err = dhcpAndWriteNetplan(ifname, timeout)
+		netplanTemplate := `network:
+    version: 2
+    renderer: networkd
+    ethernets:
+        id0:
+            match:
+                macaddress: {{ .HWAddr }}
+            addresses:
+                - {{ ToString .IPAddr }}
+            nameservers:
+                addresses: [{{ ToStringSlice .Nameservers ", " }}]
+            {{- if .Gateway }}
+            routes:
+                - to: default
+                  via: {{ ToString .Gateway }}
+            {{- end }}
+`
+		if name, template, err := vlanEnabled("/proc/cmdline"); err == nil {
+			netplanTemplate = template
+			ifname = name
+		}
+		contents, err = dhcpAndWriteNetplan(ifname, timeout, netplanTemplate)
 		if err != nil {
 			log.Fatal(err)
 		}
@@ -323,7 +346,65 @@ func ensureDir(mountPath, path string, mode os.FileMode, uid, gid int) error {
 	return nil
 }
 
-func dhcpAndWriteNetplan(ifname string, dhcpTimeout time.Duration) (string, error) {
+func vlanEnabled(f string) (ifname, netplanTemplate string, err error) {
+	cmdline, err := ioutil.ReadFile(f)
+	if err != nil {
+		return "", "", fmt.Errorf("failed to read /proc/cmdline: %w", err)
+	}
+	var vlan int
+	if vlan, err = getVLANID(string(cmdline)); err == nil {
+		// create new interface with vlan id
+		l := netlink.NewLinkAttrs()
+		parent := determineNetIF()
+		n, err := net.InterfaceByName(parent)
+		if err != nil {
+			return "", "", err
+		}
+
+		ifname = fmt.Sprintf(parent+".%d", vlan)
+		l.Name = ifname
+		l.ParentIndex = n.Index
+		link := &netlink.Vlan{LinkAttrs: l, VlanId: vlan, VlanProtocol: netlink.VLAN_PROTOCOL_8021Q}
+		// creat vlan interface
+		if err = netlink.LinkAdd(link); err != nil {
+			return "", "", err
+		}
+		// set interface up
+		if err = netlink.LinkSetUp(link); err != nil {
+			return "", "", err
+		}
+	} else {
+		return "", "", err
+	}
+
+	netplanTemplate = `network:
+    version: 2
+    renderer: networkd
+    ethernets:
+        mainif:
+            match:
+                macaddress: {{ .HWAddr }}
+            set-name: mainif
+
+        vlans:
+            vlan{{ .VLANID }}:
+                id: {{ .VLANID }}
+                link: mainif
+                addresses:
+                - {{ ToString .IPAddr }}
+                nameservers:
+                    addresses: [{{ ToStringSlice .Nameservers ", " }}]
+                {{- if .Gateway }}
+                routes:
+                    - to: default
+                      via: {{ ToString .Gateway }}
+                {{- end }}
+`
+
+	return ifname, netplanTemplate, nil
+}
+
+func dhcpAndWriteNetplan(ifname string, dhcpTimeout time.Duration, netplanTemplate string) (string, error) {
 	// After locking a goroutine to its current OS thread with runtime.LockOSThread()
 	// and changing its network namespace, any new subsequent goroutine won't be scheduled
 	// on that thread while it's locked. Therefore, the new goroutine will run in a
@@ -352,24 +433,6 @@ func dhcpAndWriteNetplan(ifname string, dhcpTimeout time.Duration) (string, erro
 		return "", err
 	}
 
-	netplanTemplate := `network:
-    version: 2
-    renderer: networkd
-    ethernets:
-        id0:
-            match:
-                macaddress: {{ .HWAddr }}
-            addresses:
-                - {{ ToString .IPAddr }}
-            nameservers:
-                addresses: [{{ ToStringSlice .Nameservers ", " }}]
-            {{- if .Gateway }}
-            routes:
-                - to: default
-                  via: {{ ToString .Gateway }}
-            {{- end }}
-`
-
 	return createNetplan(netplanTemplate, translate(d))
 }
 
@@ -427,6 +490,30 @@ func translate(d *dhcpv4.DHCPv4) Info {
 	info.IPAddr = net.IPNet{IP: d.YourIPAddr, Mask: d.SubnetMask()}
 	info.Gateway = d.GetOneOption(dhcpv4.OptionRouter)
 	info.Nameservers = d.DNS()
+	o := dhcpv4.Options{}
+	o.FromBytes(d.GetOneOption(dhcpv4.OptionVendorSpecificInformation))
+	s := o.Get(dhcpv4.GenericOptionCode(116))
+	if vlan, err := strconv.Atoi(string(s)); err == nil {
+		info.VLANID = vlan
+	}
 
 	return info
 }
+
+// getVLANID parses a string for a value from key `vlan_id=` and returns it.
+func getVLANID(b string) (int, error) {
+	i := strings.Index(b, "vlan_id=")
+	if i == -1 {
+		return -1, errors.New("no vlan_id= key found")
+	}
+
+	value := b[i : i+12] // max acceptable vlan id is 4 digits, so 12 chars (vlan_id=1234) is enough.
+	value = strings.Split(value, " ")[0]
+	value = strings.TrimRight(value, " ")
+	parsed := strings.Split(value, "=")
+	if len(parsed[1]) == 0 {
+		return -1, errors.New("no vlan_id found")
+	}
+
+	return strconv.Atoi(parsed[1])
+}
-- 
2.34.1

