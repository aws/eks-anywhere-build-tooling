From 194867425aa43951ab025c63c85a03dcf7baf696 Mon Sep 17 00:00:00 2001
From: Pooja Trivedi <poojatrivedi@gmail.com>
Date: Wed, 23 Feb 2022 04:01:29 +0000
Subject: [PATCH] Make registry certificate hosting URL and tink-worker image
 name:tag configurable

Add check for whether registry certificate is required and allow for absolute URIs
to be specified for action images in workflow template

* If you are using a registry with a self-signed certificate, you can specify
  a custom URL of where the certificate is hosted. On boots, use REGISTRY_CERT_URL
  environment variable to specify the URL to the registry CA certificate. Boots
  passes this over to hook via command-line parameter 'registry_cert_url'

* In order to specify a custom name:tag for the tink-worker image instead of
  defaulting to the hardcoded default of 'tink-worker:latest', use the
  TINK_WORKER_IMAGE environment variable setting in boots. Boots passes this over
  to hook via command-line parameter 'tink_worker_image'

* If you are using a public registry with trusted CA certificate, bootkit and
  tink-docker do not need to download and setup registry certificate. Use
  'registry_cert_required' parameter to indicate this. Since we are removing the
  local registry, we need to make the certificate download and setup optional.

* Currently the tink-worker code always prepends the specified docker_registry to
  the action images specified in the tinkerbell action template. The newly added
  use_absolute_action_image_uri allows specifying the full URI for the action image
  in the template and prevents the hardcoded prepending of the registry to these.
  This allows action images to reside in a different registry than the tink-worker,
  and it also allows each action image to potentially be in different registries.
---
 bootkit/main.go     | 32 +++++++++++++++++++++++++++++++-
 tink-docker/main.go | 40 +++++++++++++++++++++++++++++-----------
 2 files changed, 60 insertions(+), 12 deletions(-)

diff --git a/bootkit/main.go b/bootkit/main.go
index 845dceb..f213641 100644
--- a/bootkit/main.go
+++ b/bootkit/main.go
@@ -23,6 +23,9 @@ type tinkConfig struct {
 	registry string
 	username string
 	password string
+	certURL string
+	registryCertRequired string
+	useAbsoluteImageURI string
 
 	// Tinkerbell server configuration
 	baseURL    string
@@ -38,6 +41,8 @@ type tinkConfig struct {
 
 	// Metadata ID ... plus the other IDs :shrug:
 	MetadataID string `json:"id"`
+
+	tinkWorkerImage string
 }
 
 func main() {
@@ -61,7 +66,21 @@ func main() {
 	}
 
 	// Generate the path to the tink-worker
-	imageName := fmt.Sprintf("%s/tink-worker:latest", cfg.registry)
+	var imageName string
+	if len(cfg.useAbsoluteImageURI) <= 0 || cfg.useAbsoluteImageURI == "false" {
+		if len(cfg.registry) <= 0 {
+			panic("Image registry is required for tink-worker image path. Specify image registry using DOCKER_REGISTRY")
+		} else if len(cfg.tinkWorkerImage) > 0 {
+			imageName = fmt.Sprintf("%s/%s", cfg.registry, cfg.tinkWorkerImage)
+		} else {
+			imageName = fmt.Sprintf("%s/tink-worker:latest", cfg.registry)
+		}
+	} else if cfg.useAbsoluteImageURI == "true" {
+		imageName = cfg.tinkWorkerImage
+	}
+	if len(imageName) <= 0 {
+		panic("tink-worker image path is empty")
+	}
 
 	// Generate the configuration of the container
 	tinkContainer := &container.Config{
@@ -70,6 +89,9 @@ func main() {
 			fmt.Sprintf("DOCKER_REGISTRY=%s", cfg.registry),
 			fmt.Sprintf("REGISTRY_USERNAME=%s", cfg.username),
 			fmt.Sprintf("REGISTRY_PASSWORD=%s", cfg.password),
+			fmt.Sprintf("REGISTRY_CERT_URL=%s", cfg.certURL),
+			fmt.Sprintf("REGISTRY_CERT_REQUIRED=%s", cfg.registryCertRequired),
+			fmt.Sprintf("USE_ABSOLUTE_IMAGE_URI=%s", cfg.useAbsoluteImageURI),
 			fmt.Sprintf("TINKERBELL_GRPC_AUTHORITY=%s", cfg.grpcAuthority),
 			fmt.Sprintf("TINKERBELL_CERT_URL=%s", cfg.grpcCertURL),
 			fmt.Sprintf("WORKER_ID=%s", cfg.workerID),
@@ -165,6 +187,12 @@ func parseCmdLine(cmdLines []string) (cfg tinkConfig) {
 			cfg.username = cmdLine[1]
 		case "registry_password":
 			cfg.password = cmdLine[1]
+		case "registry_cert_url":
+			cfg.certURL = cmdLine[1]
+		case "registry_cert_required":
+			cfg.registryCertRequired = cmdLine[1]
+		case "use_absolute_image_uri":
+			cfg.useAbsoluteImageURI = cmdLine[1]
 		// Find Tinkerbell servers settings
 		case "packet_base_url":
 			cfg.baseURL = cmdLine[1]
@@ -178,6 +206,8 @@ func parseCmdLine(cmdLines []string) (cfg tinkConfig) {
 		// Find the worker configuration
 		case "worker_id":
 			cfg.workerID = cmdLine[1]
+		case "tink_worker_image":
+			cfg.tinkWorkerImage = cmdLine[1]
 		}
 	}
 	return cfg
diff --git a/tink-docker/main.go b/tink-docker/main.go
index 1124258..68beb48 100644
--- a/tink-docker/main.go
+++ b/tink-docker/main.go
@@ -13,6 +13,8 @@ import (
 
 type tinkConfig struct {
 	registry   string
+	registryCertURL string
+	registryCertRequired string
 	baseURL    string
 	tinkerbell string
 
@@ -31,19 +33,31 @@ func main() {
 	cmdLines := strings.Split(string(content), " ")
 	cfg := parseCmdLine(cmdLines)
 
-	path := fmt.Sprintf("/etc/docker/certs.d/%s/", cfg.registry)
+	if len(cfg.registryCertRequired) <= 0 || cfg.registryCertRequired == "true" {
+		// Download the configuration
+		var baseCertURL string
+		if len(cfg.registryCertURL) > 0 {
+			baseCertURL = cfg.registryCertURL
+		} else {
+			baseCertURL = cfg.baseURL
+		}
+		if len(baseCertURL) > 0 {
+			path := fmt.Sprintf("/etc/docker/certs.d/%s/", cfg.registry)
 
-	// Create the directory
-	err = os.MkdirAll(path, os.ModeDir)
-	if err != nil {
-		panic(err)
-	}
-	// Download the configuration
-	err = downloadFile(path+"ca.crt", cfg.baseURL+"/ca.pem")
-	if err != nil {
-		panic(err)
+			// Create the directory
+			err = os.MkdirAll(path, os.ModeDir)
+			if err != nil {
+				panic(err)
+			}
+			err = downloadFile(path+"ca.crt", baseCertURL+"/ca.pem")
+			if err != nil {
+				panic(err)
+			}
+			fmt.Println("Downloaded the repository certificates, starting the Docker Engine")
+		} else {
+			fmt.Println("Repository certificate download path not specified. Starting the Docker Engine")
+		}
 	}
-	fmt.Println("Downloaded the repository certificates, starting the Docker Engine")
 
 	// Build the command, and execute
 	cmd := exec.Command("/usr/local/bin/docker-init", "/usr/local/bin/dockerd")
@@ -67,8 +81,12 @@ func parseCmdLine(cmdLines []string) (cfg tinkConfig) {
 		// Find Registry configuration
 		case "docker_registry":
 			cfg.registry = cmdLine[1]
+		case "registry_cert_url":
+			cfg.registryCertURL = cmdLine[1]
 		case "packet_base_url":
 			cfg.baseURL = cmdLine[1]
+		case "registry_cert_required":
+			cfg.registryCertRequired = cmdLine[1]
 		case "tinkerbell":
 			cfg.tinkerbell = cmdLine[1]
 		}
-- 
2.25.1

