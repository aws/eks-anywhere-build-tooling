services:
  # TLS cert for tink-server and docker registry
  tls-gen:
    image: cfssl/cfssl
    entrypoint: /code/tls/generate.sh
    command: ["$TINKERBELL_HOST_IP"]
    environment:
      FACILITY: ${FACILITY:-onprem}
    volumes:
      - ${REPO_TOP_LEVEL:-.}:/code
      - certs:/certs/${FACILITY:-onprem}:rw

  tink-server:
    image: ${TINK_SERVER_IMAGE}
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    restart: unless-stopped
    environment:
      FACILITY: ${FACILITY:-onprem}
      PACKET_ENV: ${PACKET_ENV:-testing}
      PACKET_VERSION: ${PACKET_VERSION:-ignored}
      ROLLBAR_TOKEN: ${ROLLBAR_TOKEN:-ignored}
      ROLLBAR_DISABLE: ${ROLLBAR_DISABLE:-1}
      PGDATABASE: tinkerbell
      PGHOST: db
      PGPASSWORD: tinkerbell
      PGPORT: 5432
      PGSSLMODE: disable
      PGUSER: tinkerbell
      TINKERBELL_GRPC_AUTHORITY: :42113
      TINKERBELL_HTTP_AUTHORITY: :42114
      TINK_AUTH_USERNAME: ${TINKERBELL_TINK_USERNAME:-admin}
      TINK_AUTH_PASSWORD: ${TINKERBELL_TINK_PASSWORD:-admin}
    depends_on:
      tink-server-migration:
        condition: service_started
      db:
        condition: service_healthy
      tls-gen:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "cfssl", "version"] # port needs to match TINKERBELL_HTTP_AUTHORITY
      interval: 5s
      timeout: 2s
      retries: 30
    volumes:
      - certs:/certs/${FACILITY:-onprem}:rw
    ports:
      - 42113:42113/tcp
      - 42114:42114/tcp

  tink-server-migration:
    image: ${TINK_SERVER_IMAGE}
    restart: on-failure
    environment:
      ONLY_MIGRATION: "true"
      FACILITY: ${FACILITY:-onprem}
      PGDATABASE: tinkerbell
      PGHOST: db
      PGPASSWORD: tinkerbell
      PGPORT: 5432
      PGSSLMODE: disable
      PGUSER: tinkerbell
      TINKERBELL_GRPC_AUTHORITY: :42113
      TINKERBELL_HTTP_AUTHORITY: :42114
      TINK_AUTH_USERNAME: ${TINKERBELL_TINK_USERNAME:-admin}
      TINK_AUTH_PASSWORD: ${TINKERBELL_TINK_PASSWORD:-admin}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - certs:/certs/${FACILITY:-onprem}:rw

  db:
    image: postgres:14-alpine
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    restart: unless-stopped
    environment:
      POSTGRES_DB: tinkerbell
      POSTGRES_PASSWORD: tinkerbell
      POSTGRES_USER: tinkerbell
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tinkerbell"]
      interval: 1s
      timeout: 1s
      retries: 30

  tink-cli:
    image: quay.io/tinkerbell/tink-cli:latest #${TINK_CLI_IMAGE}
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    restart: unless-stopped
    environment:
      TINKERBELL_GRPC_AUTHORITY: tink-server:42113
      TINKERBELL_CERT_URL: http://tink-server:42114/cert
    depends_on:
      tink-server:
        condition: service_healthy
      db:
        condition: service_healthy

  boots:
    image: ${BOOTS_SERVER_IMAGE}
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    restart: unless-stopped
    command: -dhcp-addr 0.0.0.0:67 -tftp-addr $TINKERBELL_HOST_IP:69 -http-addr $TINKERBELL_HOST_IP:80 -log-level DEBUG
    network_mode: host
    environment:
      API_AUTH_TOKEN: ${PACKET_API_AUTH_TOKEN:-ignored}
      API_CONSUMER_TOKEN: ${PACKET_CONSUMER_TOKEN:-ignored}
      FACILITY_CODE: ${FACILITY:-onprem}
      PACKET_ENV: ${PACKET_ENV:-testing}
      PACKET_VERSION: ${PACKET_VERSION:-ignored}
      ROLLBAR_TOKEN: ${ROLLBAR_TOKEN:-ignored}
      ROLLBAR_DISABLE: ${ROLLBAR_DISABLE:-1}
      OSIE_PATH_OVERRIDE: https://tinkerbell-storage-for-eksa.s3.us-west-2.amazonaws.com/misc/osie/current
      DNS_SERVERS: 8.8.8.8
      PUBLIC_IP: $TINKERBELL_HOST_IP
      BOOTP_BIND: $TINKERBELL_HOST_IP:67
      HTTP_BIND: $TINKERBELL_HOST_IP:80
      SYSLOG_BIND: $TINKERBELL_HOST_IP:514
      TFTP_BIND: $TINKERBELL_HOST_IP:69
      DOCKER_REGISTRY: public.ecr.aws/l0g8r8j6
      TINKERBELL_GRPC_AUTHORITY: $TINKERBELL_HOST_IP:42113
      TINKERBELL_CERT_URL: http://$TINKERBELL_HOST_IP:42114/cert
      DATA_MODEL_VERSION: 1
      TINK_WORKER_IMAGE: tinkerbell/tink/tink-worker:v0.6.0-eks-a-v0.0.0-dev-build.1627
      USE_ABSOLUTE_ACTION_IMAGE_URI: "true"
    extra_hosts:
      - "tink-server:$TINKERBELL_HOST_IP"
    depends_on:
      tink-server:
        condition: service_healthy

  hegel:
    image: ${HEGEL_SERVER_IMAGE}
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    restart: unless-stopped
    environment:
      ROLLBAR_TOKEN: ${ROLLBAR_TOKEN-ignored}
      ROLLBAR_DISABLE: 1
      PACKET_ENV: testing
      PACKET_VERSION: ${PACKET_VERSION:-ignored}
      GRPC_PORT: 42115
      HEGEL_FACILITY: ${FACILITY:-onprem}
      HEGEL_USE_TLS: 0
      TINKERBELL_GRPC_AUTHORITY: tink-server:42113
      TINKERBELL_CERT_URL: http://tink-server:42114/cert
      DATA_MODEL_VERSION: 1
      CUSTOM_ENDPOINTS: '{"/metadata":""}'
    depends_on:
      tink-server:
        condition: service_healthy
    ports:
      - 50060:50060/tcp
      - 50061:50061/tcp

  pbnj:
    image: ${PBNJ_IMAGE_URL}
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "512M"
    restart: unless-stopped
    ports:
      - 50051:50051/tcp

volumes:
  postgres_data:
  certs:
