From 42acb9ce1582dc9628df7185c7be467a27c232f5 Mon Sep 17 00:00:00 2001
From: Aravind Ramalingam <ramaliar@amazon.com>
Date: Tue, 7 Jun 2022 13:34:02 -0700
Subject: [PATCH] Adding MachineReady label to TinkerbellMAchine and checking
 on Reconcile

Signed-off-by: Aravind Ramalingam <ramaliar@amazon.com>
---
 controllers/machine.go                      | 34 +++++++++++++++++++++
 controllers/tinkerbellcluster_controller.go |  3 ++
 2 files changed, 37 insertions(+)

diff --git a/controllers/machine.go b/controllers/machine.go
index 5eb58f8..8ad050e 100644
--- a/controllers/machine.go
+++ b/controllers/machine.go
@@ -114,7 +114,36 @@ func (mrc *machineReconcileContext) markAsReady() error {
 	return nil
 }
 
+func (mrc *machineReconcileContext) setMachineReadyLabel() {
+	if len(mrc.tinkerbellMachine.ObjectMeta.Labels) == 0 {
+		mrc.tinkerbellMachine.ObjectMeta.Labels = map[string]string{}
+	}
+
+	mrc.tinkerbellMachine.ObjectMeta.Labels[MachineReadyLabel] = "True"
+}
+
+func (mrc *machineReconcileContext) isMachineReady() bool {
+	if len(mrc.tinkerbellMachine.ObjectMeta.Labels) == 0 {
+		return false
+	}
+
+	if _, ok := mrc.tinkerbellMachine.ObjectMeta.Labels[MachineReadyLabel]; ok {
+		return true
+	}
+
+	return false
+}
+
 func (mrc *machineReconcileContext) Reconcile() error {
+	// Check if the machine was already marked Ready
+	if mrc.isMachineReady() {
+		if err := mrc.markAsReady(); err != nil {
+			return fmt.Errorf("marking machine as ready: %w", err)
+		}
+
+		return nil
+	}
+
 	// Fetch a provisioining BMCJob for machine.
 	bmcJob := &rufiov1.BMCJob{}
 	jobName := fmt.Sprintf("%s-provision", mrc.tinkerbellMachine.Name)
@@ -132,6 +161,7 @@ func (mrc *machineReconcileContext) Reconcile() error {
 
 	// Check the Job conditions to ensure the Machine is Ready.
 	if bmcJob.HasCondition(rufiov1.JobCompleted, rufiov1.ConditionTrue) {
+		mrc.setMachineReadyLabel()
 		if err := mrc.markAsReady(); err != nil {
 			return fmt.Errorf("marking machine as ready: %w", err)
 		}
@@ -544,6 +574,7 @@ func (mrc *machineReconcileContext) getBMCJob(jName string, bmj *rufiov1.BMCJob)
 
 // createBMCJob creates a BMCJob object with the required tasks for hardware provisioning.
 func (mrc *machineReconcileContext) createBMCJob(hardware *tinkv1.Hardware, name string) error {
+	powerOffAction := rufiov1.HardPowerOff
 	powerOnAction := rufiov1.PowerOn
 	controller := true
 	bmcJob := &rufiov1.BMCJob{
@@ -566,6 +597,9 @@ func (mrc *machineReconcileContext) createBMCJob(hardware *tinkv1.Hardware, name
 				Namespace: mrc.tinkerbellMachine.Namespace,
 			},
 			Tasks: []rufiov1.Task{
+				{
+					PowerAction: &powerOffAction,
+				},
 				{
 					OneTimeBootDeviceAction: &rufiov1.OneTimeBootDeviceAction{
 						Devices: []rufiov1.BootDevice{
diff --git a/controllers/tinkerbellcluster_controller.go b/controllers/tinkerbellcluster_controller.go
index 15e7d52..d14a958 100644
--- a/controllers/tinkerbellcluster_controller.go
+++ b/controllers/tinkerbellcluster_controller.go
@@ -138,6 +138,9 @@ const (
 	// ClusterNamespaceLabel is used to mark in which Namespace hardware is used.
 	ClusterNamespaceLabel = "v1alpha1.tinkerbell.org/clusterNamespace"
 
+	// MachineReadyLabel is used to mark TinkerbellMachine as Ready
+	MachineReadyLabel = "v1alpha1.tinkerbell.org/machineReady"
+
 	// KubernetesAPIPort is a port used by Tinkerbell clusters for Kubernetes API.
 	KubernetesAPIPort = 6443
 )
-- 
2.34.1

