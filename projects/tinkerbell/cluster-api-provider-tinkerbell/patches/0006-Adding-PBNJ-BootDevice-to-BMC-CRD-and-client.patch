From 7066de2ae6fd143aecf2173d3bd32d28af3bedea Mon Sep 17 00:00:00 2001
From: Aravind Ramalingam <ramaliar@amazon.com>
Date: Wed, 5 Jan 2022 01:31:59 -0800
Subject: [PATCH 3/5] Adding PBNJ BootDevice to BMC CRD and client

---
 config/crd/bases/tinkerbell.org_bmc.yaml | 10 +++-
 pbnj/api/v1alpha1/bmc_types.go           |  8 ++-
 pbnj/client/client.go                    | 11 +++++
 pbnj/controllers/controller.go           | 63 ++++++++++++++++++++----
 4 files changed, 81 insertions(+), 11 deletions(-)

diff --git a/config/crd/bases/tinkerbell.org_bmc.yaml b/config/crd/bases/tinkerbell.org_bmc.yaml
index 0193c71..46aebf6 100644
--- a/config/crd/bases/tinkerbell.org_bmc.yaml
+++ b/config/crd/bases/tinkerbell.org_bmc.yaml
@@ -44,6 +44,11 @@ spec:
                   keys
                 minLength: 1
                 type: string
+              bootDevice:
+                description: BootDevice is the machine boot device to set. The value
+                  must be one of the supported machine BootDevice names by PBNJ.
+                minLength: 1
+                type: string
               host:
                 description: Host is the host IP address of the BMC
                 minLength: 1
@@ -51,7 +56,7 @@ spec:
               powerAction:
                 description: PowerAction is the machine power action for PBNJ to run.
                   The value must be one of the supported machine PowerAction names
-                  for PBNJ.
+                  by PBNJ.
                 minLength: 1
                 type: string
               vendor:
@@ -66,6 +71,9 @@ spec:
           status:
             description: BMCStatus defines the observed state of BMC.
             properties:
+              bootState:
+                description: BMCState represents the template state.
+                type: string
               powerState:
                 description: BMCState represents the template state.
                 type: string
diff --git a/pbnj/api/v1alpha1/bmc_types.go b/pbnj/api/v1alpha1/bmc_types.go
index 32124e3..b30ba43 100644
--- a/pbnj/api/v1alpha1/bmc_types.go
+++ b/pbnj/api/v1alpha1/bmc_types.go
@@ -23,14 +23,20 @@ type BMCSpec struct {
 	Vendor string `json:"vendor"`
 
 	// PowerAction is the machine power action for PBNJ to run.
-	// The value must be one of the supported machine PowerAction names for PBNJ.
+	// The value must be one of the supported machine PowerAction names by PBNJ.
 	// +kubebuilder:validation:MinLength=1
 	PowerAction string `json:"powerAction,omitempty"`
+
+	// BootDevice is the machine boot device to set.
+	// The value must be one of the supported machine BootDevice names by PBNJ.
+	// +kubebuilder:validation:MinLength=1
+	BootDevice string `json:"bootDevice,omitempty"`
 }
 
 // BMCStatus defines the observed state of BMC.
 type BMCStatus struct {
 	PowerState BMCState `json:"powerState,omitempty"`
+	BootState  BMCState `json:"bootState,omitempty"`
 }
 
 // +kubebuilder:subresource:status
diff --git a/pbnj/client/client.go b/pbnj/client/client.go
index 5683a88..21f7d2e 100644
--- a/pbnj/client/client.go
+++ b/pbnj/client/client.go
@@ -50,3 +50,14 @@ func (pc *PbnjClient) MachinePower(ctx context.Context, powerRequest *v1.PowerRe
 
 	return response, nil
 }
+
+// MachineBootDev performs a PBNJ machine boot device request.
+func (pc *PbnjClient) MachineBootDev(ctx context.Context, deviceRequest *v1.DeviceRequest) (*v1.StatusResponse, error) {
+	response, err := v1Client.MachineBootDev(ctx, pc.machineClient, pc.taskClient, deviceRequest)
+	if err != nil {
+		return nil, fmt.Errorf("error making pbnj DeviceRequest with boot device %s: %w",
+			deviceRequest.GetBootDevice().String(), err)
+	}
+
+	return response, nil
+}
diff --git a/pbnj/controllers/controller.go b/pbnj/controllers/controller.go
index 6255ee8..a14d81b 100644
--- a/pbnj/controllers/controller.go
+++ b/pbnj/controllers/controller.go
@@ -18,6 +18,7 @@ import (
 
 type pbnjClient interface {
 	MachinePower(ctx context.Context, powerRequest *v1.PowerRequest) (*v1.StatusResponse, error)
+	MachineBootDev(ctx context.Context, deviceRequest *v1.DeviceRequest) (*v1.StatusResponse, error)
 }
 
 // Reconciler implements the Reconciler interface for managing BMC state.
@@ -52,7 +53,8 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Resu
 		return ctrl.Result{}, fmt.Errorf("failed to get bmc: %w", err)
 	}
 
-	if bmc.Status.PowerState == pbnjv1alpha1.BMCState(bmc.Spec.PowerAction) {
+	if bmc.Status.PowerState == pbnjv1alpha1.BMCState(bmc.Spec.PowerAction) &&
+		bmc.Status.BootState == pbnjv1alpha1.BMCState(bmc.Spec.BootDevice) {
 		return ctrl.Result{}, nil
 	}
 
@@ -62,20 +64,29 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Resu
 func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC) (ctrl.Result, error) {
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 
-	if bmc.Spec.PowerAction == "" {
-		return r.reconcileStatus(ctx, bmc)
-	}
-
 	username, password, err := r.resolveAuthSecret(ctx, bmc.Spec.AuthSecret)
 	if err != nil {
 		return ctrl.Result{}, fmt.Errorf("error resolving authentication from Secret: %w", err)
 	}
 
-	err = r.powerAction(ctx, username, password, bmc)
-	if err != nil {
-		logger.Error(err, "Failed to perform power action with bmc", "PowerAction", bmc.Spec.PowerAction)
+	if bmc.Spec.BootDevice != "" &&
+		bmc.Status.BootState != pbnjv1alpha1.BMCState(bmc.Spec.BootDevice) {
+		err = r.setBootDevice(ctx, username, password, bmc)
+		if err != nil {
+			logger.Error(err, "Failed to set boot device", "BootDevice", bmc.Spec.BootDevice)
 
-		return ctrl.Result{}, fmt.Errorf("failed to perform PowerAction: %s", bmc.Spec.PowerAction) //nolint:goerr113
+			return ctrl.Result{}, fmt.Errorf("failed to set boot device: %s", bmc.Spec.BootDevice) //nolint:goerr113
+		}
+	}
+
+	if bmc.Spec.PowerAction != "" &&
+		bmc.Status.PowerState != pbnjv1alpha1.BMCState(bmc.Spec.PowerAction) {
+		err = r.powerAction(ctx, username, password, bmc)
+		if err != nil {
+			logger.Error(err, "Failed to perform power action with bmc", "PowerAction", bmc.Spec.PowerAction)
+
+			return ctrl.Result{}, fmt.Errorf("failed to perform PowerAction: %s", bmc.Spec.PowerAction) //nolint:goerr113
+		}
 	}
 
 	return r.reconcileStatus(ctx, bmc)
@@ -113,6 +124,38 @@ func (r *Reconciler) powerAction(ctx context.Context, username, password string,
 	return nil
 }
 
+func (r *Reconciler) setBootDevice(ctx context.Context, username, password string, bmc *pbnjv1alpha1.BMC) error {
+	bootDeviceValue, ok := v1.BootDevice_value[bmc.Spec.BootDevice]
+	if !ok {
+		return fmt.Errorf("invalid BootDevice: %s", bmc.Spec.BootDevice) //nolint:goerr113
+	}
+
+	deviceRequest := &v1.DeviceRequest{
+		Authn: &v1.Authn{
+			Authn: &v1.Authn_DirectAuthn{
+				DirectAuthn: &v1.DirectAuthn{
+					Host: &v1.Host{
+						Host: bmc.Spec.Host,
+					},
+					Username: username,
+					Password: password,
+				},
+			},
+		},
+		Vendor: &v1.Vendor{
+			Name: bmc.Spec.Vendor,
+		},
+		BootDevice: v1.BootDevice(bootDeviceValue),
+	}
+
+	_, err := r.PbnjClient.MachineBootDev(ctx, deviceRequest)
+	if err != nil {
+		return fmt.Errorf("error calling PBNJ MachineBootDev: %w", err)
+	}
+
+	return nil
+}
+
 func (r *Reconciler) resolveAuthSecret(ctx context.Context, authSecret string) (string, string, error) {
 	secret := &corev1.Secret{}
 	key := types.NamespacedName{Namespace: "default", Name: authSecret}
@@ -143,6 +186,8 @@ func (r *Reconciler) reconcileStatus(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 	patch := client.MergeFrom(bmc.DeepCopy())
 
 	bmc.Status.PowerState = pbnjv1alpha1.BMCState(bmc.Spec.PowerAction)
+	bmc.Status.BootState = pbnjv1alpha1.BMCState(bmc.Spec.BootDevice)
+
 	if err := r.Client.Status().Patch(ctx, bmc, patch); err != nil {
 		logger.Error(err, "Failed to patch bmc")
 
-- 
2.34.1

