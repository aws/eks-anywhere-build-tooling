From 58f87a0e01f800afecbbfa2f7a1c8675b2f43e8f Mon Sep 17 00:00:00 2001
From: Aravind Ramalingam <ramaliar@amazon.com>
Date: Mon, 3 Jan 2022 14:31:18 -0800
Subject: [PATCH 1/5] Modifying BMC CRD to read from Secret

---
 config/crd/bases/tinkerbell.org_bmc.yaml | 17 +++++------
 pbnj/api/v1alpha1/bmc_types.go           |  9 ++----
 pbnj/controllers/controller.go           | 38 ++++++++++++++++++++++--
 3 files changed, 45 insertions(+), 19 deletions(-)

diff --git a/config/crd/bases/tinkerbell.org_bmc.yaml b/config/crd/bases/tinkerbell.org_bmc.yaml
index 3222146..a6683d0 100644
--- a/config/crd/bases/tinkerbell.org_bmc.yaml
+++ b/config/crd/bases/tinkerbell.org_bmc.yaml
@@ -38,16 +38,14 @@ spec:
           spec:
             description: BMCSpec defines the desired state of BMC.
             properties:
-              host:
-                description: Host is the host IP address of the BMC
-                minLength: 1
-                type: string
-              password:
-                description: Password is the password to authenticate with the BMC
+              authSecret:
+                description: AuthSecret is the Secret that contains authentication
+                  information of the BMC. The Secret must contain username and password
+                  keys
                 minLength: 1
                 type: string
-              username:
-                description: Username is the username to authenticate with the BMC
+              host:
+                description: Host is the host IP address of the BMC
                 minLength: 1
                 type: string
               vendor:
@@ -55,9 +53,8 @@ spec:
                 minLength: 1
                 type: string
             required:
+            - authSecret
             - host
-            - password
-            - username
             - vendor
             type: object
           status:
diff --git a/pbnj/api/v1alpha1/bmc_types.go b/pbnj/api/v1alpha1/bmc_types.go
index ab86d9f..f89bd53 100644
--- a/pbnj/api/v1alpha1/bmc_types.go
+++ b/pbnj/api/v1alpha1/bmc_types.go
@@ -18,13 +18,10 @@ type BMCSpec struct {
 	// +kubebuilder:validation:MinLength=1
 	Host string `json:"host"`
 
-	// Username is the username to authenticate with the BMC
+	// AuthSecret is the Secret that contains authentication information of the BMC.
+	// The Secret must contain username and password keys
 	// +kubebuilder:validation:MinLength=1
-	Username string `json:"username"`
-
-	// Password is the password to authenticate with the BMC
-	// +kubebuilder:validation:MinLength=1
-	Password string `json:"password"`
+	AuthSecret string `json:"authSecret"`
 
 	// Vendor is the vendor name of the BMC
 	// +kubebuilder:validation:MinLength=1
diff --git a/pbnj/controllers/controller.go b/pbnj/controllers/controller.go
index 1991592..0a12a7a 100644
--- a/pbnj/controllers/controller.go
+++ b/pbnj/controllers/controller.go
@@ -6,7 +6,9 @@ import (
 	"fmt"
 
 	v1 "github.com/tinkerbell/pbnj/api/v1"
+	corev1 "k8s.io/api/core/v1"
 	apierrors "k8s.io/apimachinery/pkg/api/errors"
+	"k8s.io/apimachinery/pkg/types"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/controller"
@@ -60,6 +62,11 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Resu
 func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC) (ctrl.Result, error) {
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 
+	username, password, err := r.resolveAuthSecret(ctx, bmc.Spec.AuthSecret)
+	if err != nil {
+		return ctrl.Result{}, fmt.Errorf("error resolving authentication from Secret: %w", err)
+	}
+
 	// Power on the machine with bmc.
 	powerRequest := &v1.PowerRequest{
 		Authn: &v1.Authn{
@@ -68,8 +75,8 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 					Host: &v1.Host{
 						Host: bmc.Spec.Host,
 					},
-					Username: bmc.Spec.Username,
-					Password: bmc.Spec.Password,
+					Username: username,
+					Password: password,
 				},
 			},
 		},
@@ -79,7 +86,7 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 		PowerAction: v1.PowerAction_POWER_ACTION_ON,
 	}
 
-	_, err := r.PbnjClient.MachinePower(ctx, powerRequest)
+	_, err = r.PbnjClient.MachinePower(ctx, powerRequest)
 	if err != nil {
 		logger.Error(err, "Failed to power on machine with bmc")
 
@@ -89,6 +96,31 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 	return r.reconcileStatus(ctx, bmc)
 }
 
+func (r *Reconciler) resolveAuthSecret(ctx context.Context, authSecret string) (string, string, error) {
+	secret := &corev1.Secret{}
+	key := types.NamespacedName{Namespace: "default", Name: authSecret}
+
+	if err := r.Client.Get(ctx, key, secret); err != nil {
+		if apierrors.IsNotFound(err) {
+			return "", "", fmt.Errorf("error secret %s not found: %w", key, err)
+		}
+
+		return "", "", fmt.Errorf("failed to retrieve secret %s : %w", authSecret, err)
+	}
+
+	username, ok := secret.Data["username"]
+	if !ok {
+		return "", "", fmt.Errorf("non-existent secret key username") //nolint:goerr113
+	}
+
+	password, ok := secret.Data["password"]
+	if !ok {
+		return "", "", fmt.Errorf("non-existent secret key password") //nolint:goerr113
+	}
+
+	return string(username), string(password), nil
+}
+
 func (r *Reconciler) reconcileStatus(ctx context.Context, bmc *pbnjv1alpha1.BMC) (ctrl.Result, error) {
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 	patch := client.MergeFrom(bmc.DeepCopy())
-- 
2.34.1

