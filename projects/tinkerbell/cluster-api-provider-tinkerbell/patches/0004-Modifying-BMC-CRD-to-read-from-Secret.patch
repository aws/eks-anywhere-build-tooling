From 4f1f3655bc94f0283be33a256a3ccd8ea3e2817d Mon Sep 17 00:00:00 2001
From: Aravind Ramalingam <ramaliar@amazon.com>
Date: Mon, 3 Jan 2022 14:31:18 -0800
Subject: [PATCH 1/5] Modifying BMC CRD to read from Secret

---
 config/crd/bases/tinkerbell.org_bmc.yaml   | 25 ++++++++------
 pbnj/api/v1alpha1/bmc_types.go             | 11 +++----
 pbnj/api/v1alpha1/zz_generated.deepcopy.go |  1 +
 pbnj/controllers/controller.go             | 38 ++++++++++++++++++++--
 4 files changed, 55 insertions(+), 20 deletions(-)

diff --git a/config/crd/bases/tinkerbell.org_bmc.yaml b/config/crd/bases/tinkerbell.org_bmc.yaml
index 3222146..0219089 100644
--- a/config/crd/bases/tinkerbell.org_bmc.yaml
+++ b/config/crd/bases/tinkerbell.org_bmc.yaml
@@ -38,26 +38,31 @@ spec:
           spec:
             description: BMCSpec defines the desired state of BMC.
             properties:
+              authSecretRef:
+                description: AuthSecretRef is the SecretReference that contains authentication
+                  information of the BMC. The Secret must contain username and password
+                  keys.
+                properties:
+                  name:
+                    description: Name is unique within a namespace to reference a
+                      secret resource.
+                    type: string
+                  namespace:
+                    description: Namespace defines the space within which the secret
+                      name must be unique.
+                    type: string
+                type: object
               host:
                 description: Host is the host IP address of the BMC
                 minLength: 1
                 type: string
-              password:
-                description: Password is the password to authenticate with the BMC
-                minLength: 1
-                type: string
-              username:
-                description: Username is the username to authenticate with the BMC
-                minLength: 1
-                type: string
               vendor:
                 description: Vendor is the vendor name of the BMC
                 minLength: 1
                 type: string
             required:
+            - authSecretRef
             - host
-            - password
-            - username
             - vendor
             type: object
           status:
diff --git a/pbnj/api/v1alpha1/bmc_types.go b/pbnj/api/v1alpha1/bmc_types.go
index ab86d9f..471105c 100644
--- a/pbnj/api/v1alpha1/bmc_types.go
+++ b/pbnj/api/v1alpha1/bmc_types.go
@@ -1,6 +1,7 @@
 package v1alpha1
 
 import (
+	corev1 "k8s.io/api/core/v1"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 )
 
@@ -18,13 +19,9 @@ type BMCSpec struct {
 	// +kubebuilder:validation:MinLength=1
 	Host string `json:"host"`
 
-	// Username is the username to authenticate with the BMC
-	// +kubebuilder:validation:MinLength=1
-	Username string `json:"username"`
-
-	// Password is the password to authenticate with the BMC
-	// +kubebuilder:validation:MinLength=1
-	Password string `json:"password"`
+	// AuthSecretRef is the SecretReference that contains authentication information of the BMC.
+	// The Secret must contain username and password keys.
+	AuthSecretRef corev1.SecretReference `json:"authSecretRef"`
 
 	// Vendor is the vendor name of the BMC
 	// +kubebuilder:validation:MinLength=1
diff --git a/pbnj/api/v1alpha1/zz_generated.deepcopy.go b/pbnj/api/v1alpha1/zz_generated.deepcopy.go
index 7acc0e5..6c12ba9 100644
--- a/pbnj/api/v1alpha1/zz_generated.deepcopy.go
+++ b/pbnj/api/v1alpha1/zz_generated.deepcopy.go
@@ -86,6 +86,7 @@ func (in *BMCList) DeepCopyObject() runtime.Object {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BMCSpec) DeepCopyInto(out *BMCSpec) {
 	*out = *in
+	out.AuthSecretRef = in.AuthSecretRef
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BMCSpec.
diff --git a/pbnj/controllers/controller.go b/pbnj/controllers/controller.go
index 1991592..4946a11 100644
--- a/pbnj/controllers/controller.go
+++ b/pbnj/controllers/controller.go
@@ -6,7 +6,9 @@ import (
 	"fmt"
 
 	v1 "github.com/tinkerbell/pbnj/api/v1"
+	corev1 "k8s.io/api/core/v1"
 	apierrors "k8s.io/apimachinery/pkg/api/errors"
+	"k8s.io/apimachinery/pkg/types"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/controller"
@@ -60,6 +62,11 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Resu
 func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC) (ctrl.Result, error) {
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 
+	username, password, err := r.resolveAuthSecretRef(ctx, bmc.Spec.AuthSecretRef)
+	if err != nil {
+		return ctrl.Result{}, fmt.Errorf("error resolving authentication from Secret: %w", err)
+	}
+
 	// Power on the machine with bmc.
 	powerRequest := &v1.PowerRequest{
 		Authn: &v1.Authn{
@@ -68,8 +75,8 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 					Host: &v1.Host{
 						Host: bmc.Spec.Host,
 					},
-					Username: bmc.Spec.Username,
-					Password: bmc.Spec.Password,
+					Username: username,
+					Password: password,
 				},
 			},
 		},
@@ -79,7 +86,7 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 		PowerAction: v1.PowerAction_POWER_ACTION_ON,
 	}
 
-	_, err := r.PbnjClient.MachinePower(ctx, powerRequest)
+	_, err = r.PbnjClient.MachinePower(ctx, powerRequest)
 	if err != nil {
 		logger.Error(err, "Failed to power on machine with bmc")
 
@@ -89,6 +96,31 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 	return r.reconcileStatus(ctx, bmc)
 }
 
+func (r *Reconciler) resolveAuthSecretRef(ctx context.Context, secretRef corev1.SecretReference) (string, string, error) { //nolint:lll
+	secret := &corev1.Secret{}
+	key := types.NamespacedName{Namespace: secretRef.Namespace, Name: secretRef.Name}
+
+	if err := r.Client.Get(ctx, key, secret); err != nil {
+		if apierrors.IsNotFound(err) {
+			return "", "", fmt.Errorf("error secret %s not found: %w", key, err)
+		}
+
+		return "", "", fmt.Errorf("failed to retrieve secret %s : %w", secretRef, err)
+	}
+
+	username, ok := secret.Data["username"]
+	if !ok {
+		return "", "", fmt.Errorf("non-existent secret key username") //nolint:goerr113
+	}
+
+	password, ok := secret.Data["password"]
+	if !ok {
+		return "", "", fmt.Errorf("non-existent secret key password") //nolint:goerr113
+	}
+
+	return string(username), string(password), nil
+}
+
 func (r *Reconciler) reconcileStatus(ctx context.Context, bmc *pbnjv1alpha1.BMC) (ctrl.Result, error) {
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 	patch := client.MergeFrom(bmc.DeepCopy())
-- 
2.34.1

