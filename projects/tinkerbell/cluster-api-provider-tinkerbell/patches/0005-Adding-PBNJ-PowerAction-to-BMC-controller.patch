From 0aca7e52bfb89627ac03f588ef05c2c4c0695fb5 Mon Sep 17 00:00:00 2001
From: Aravind Ramalingam <ramaliar@amazon.com>
Date: Tue, 4 Jan 2022 20:40:46 -0800
Subject: [PATCH 2/5] Adding PBNJ PowerAction to BMC controller

---
 config/crd/bases/tinkerbell.org_bmc.yaml |  8 +++++-
 pbnj/api/v1alpha1/bmc_types.go           | 12 ++++----
 pbnj/controllers/controller.go           | 35 ++++++++++++++++++------
 3 files changed, 39 insertions(+), 16 deletions(-)

diff --git a/config/crd/bases/tinkerbell.org_bmc.yaml b/config/crd/bases/tinkerbell.org_bmc.yaml
index 0219089..50c8e8e 100644
--- a/config/crd/bases/tinkerbell.org_bmc.yaml
+++ b/config/crd/bases/tinkerbell.org_bmc.yaml
@@ -56,6 +56,12 @@ spec:
                 description: Host is the host IP address of the BMC
                 minLength: 1
                 type: string
+              powerAction:
+                description: PowerAction is the machine power action for PBNJ to run.
+                  The value must be one of the supported machine PowerAction names
+                  for PBNJ.
+                minLength: 1
+                type: string
               vendor:
                 description: Vendor is the vendor name of the BMC
                 minLength: 1
@@ -68,7 +74,7 @@ spec:
           status:
             description: BMCStatus defines the observed state of BMC.
             properties:
-              state:
+              powerState:
                 description: BMCState represents the template state.
                 type: string
             type: object
diff --git a/pbnj/api/v1alpha1/bmc_types.go b/pbnj/api/v1alpha1/bmc_types.go
index 471105c..36a9bd6 100644
--- a/pbnj/api/v1alpha1/bmc_types.go
+++ b/pbnj/api/v1alpha1/bmc_types.go
@@ -8,11 +8,6 @@ import (
 // BMCState represents the template state.
 type BMCState string
 
-const (
-	// BMCPowerOn represents a bmc that is in Power On state.
-	BMCPowerOn = BMCState("PowerOn")
-)
-
 // BMCSpec defines the desired state of BMC.
 type BMCSpec struct {
 	// Host is the host IP address of the BMC
@@ -26,11 +21,16 @@ type BMCSpec struct {
 	// Vendor is the vendor name of the BMC
 	// +kubebuilder:validation:MinLength=1
 	Vendor string `json:"vendor"`
+
+	// PowerAction is the machine power action for PBNJ to run.
+	// The value must be one of the supported machine PowerAction names for PBNJ.
+	// +kubebuilder:validation:MinLength=1
+	PowerAction string `json:"powerAction,omitempty"`
 }
 
 // BMCStatus defines the observed state of BMC.
 type BMCStatus struct {
-	State BMCState `json:"state,omitempty"`
+	PowerState BMCState `json:"powerState,omitempty"`
 }
 
 // +kubebuilder:subresource:status
diff --git a/pbnj/controllers/controller.go b/pbnj/controllers/controller.go
index 4946a11..24d9b77 100644
--- a/pbnj/controllers/controller.go
+++ b/pbnj/controllers/controller.go
@@ -52,7 +52,7 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Resu
 		return ctrl.Result{}, fmt.Errorf("failed to get bmc: %w", err)
 	}
 
-	if bmc.Status.State == pbnjv1alpha1.BMCPowerOn {
+	if bmc.Status.PowerState == pbnjv1alpha1.BMCState(bmc.Spec.PowerAction) {
 		return ctrl.Result{}, nil
 	}
 
@@ -62,12 +62,31 @@ func (r *Reconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Resu
 func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC) (ctrl.Result, error) {
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 
+	if bmc.Spec.PowerAction == "" {
+		return r.reconcileStatus(ctx, bmc)
+	}
+
 	username, password, err := r.resolveAuthSecretRef(ctx, bmc.Spec.AuthSecretRef)
 	if err != nil {
 		return ctrl.Result{}, fmt.Errorf("error resolving authentication from Secret: %w", err)
 	}
 
-	// Power on the machine with bmc.
+	err = r.powerAction(ctx, username, password, bmc)
+	if err != nil {
+		logger.Error(err, "Failed to perform power action with bmc", "PowerAction", bmc.Spec.PowerAction)
+
+		return ctrl.Result{}, fmt.Errorf("failed to perform PowerAction: %s", bmc.Spec.PowerAction) //nolint:goerr113
+	}
+
+	return r.reconcileStatus(ctx, bmc)
+}
+
+func (r *Reconciler) powerAction(ctx context.Context, username, password string, bmc *pbnjv1alpha1.BMC) error {
+	powerActionValue, ok := v1.PowerAction_value[bmc.Spec.PowerAction]
+	if !ok {
+		return fmt.Errorf("invalid PowerAction: %s", bmc.Spec.PowerAction) //nolint:goerr113
+	}
+
 	powerRequest := &v1.PowerRequest{
 		Authn: &v1.Authn{
 			Authn: &v1.Authn_DirectAuthn{
@@ -83,17 +102,15 @@ func (r *Reconciler) reconcileNormal(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 		Vendor: &v1.Vendor{
 			Name: bmc.Spec.Vendor,
 		},
-		PowerAction: v1.PowerAction_POWER_ACTION_ON,
+		PowerAction: v1.PowerAction(powerActionValue),
 	}
 
-	_, err = r.PbnjClient.MachinePower(ctx, powerRequest)
+	_, err := r.PbnjClient.MachinePower(ctx, powerRequest)
 	if err != nil {
-		logger.Error(err, "Failed to power on machine with bmc")
-
-		return ctrl.Result{}, fmt.Errorf("error calling MachinePower: %w", err)
+		return fmt.Errorf("error calling PBNJ MachinePower: %w", err)
 	}
 
-	return r.reconcileStatus(ctx, bmc)
+	return nil
 }
 
 func (r *Reconciler) resolveAuthSecretRef(ctx context.Context, secretRef corev1.SecretReference) (string, string, error) { //nolint:lll
@@ -125,7 +142,7 @@ func (r *Reconciler) reconcileStatus(ctx context.Context, bmc *pbnjv1alpha1.BMC)
 	logger := ctrl.LoggerFrom(ctx).WithValues("bmc", bmc.Name)
 	patch := client.MergeFrom(bmc.DeepCopy())
 
-	bmc.Status.State = pbnjv1alpha1.BMCPowerOn
+	bmc.Status.PowerState = pbnjv1alpha1.BMCState(bmc.Spec.PowerAction)
 	if err := r.Client.Status().Patch(ctx, bmc, patch); err != nil {
 		logger.Error(err, "Failed to patch bmc")
 
-- 
2.34.1

