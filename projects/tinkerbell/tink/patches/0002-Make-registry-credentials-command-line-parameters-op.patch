From 30278187a8742852d0228f3ceef0c10eb5cac769 Mon Sep 17 00:00:00 2001
From: Pooja Trivedi <poojatrivedi@gmail.com>
Date: Tue, 15 Feb 2022 02:51:26 +0000
Subject: [PATCH] Make registry credentials command-line parameters optional to
 allow for public registries

Allow for action image paths in workflow template as complete URIs
based on use-absolute-image-uri parameter. This allows skipping
the prepending of docker-registry to the action image paths
---
 cmd/tink-worker/cmd/root.go          | 14 ++++++++++----
 cmd/tink-worker/internal/action.go   | 12 +++++++++---
 cmd/tink-worker/internal/registry.go | 18 +++++++++++++-----
 cmd/tink-worker/internal/worker.go   |  6 +++---
 4 files changed, 35 insertions(+), 15 deletions(-)

diff --git a/cmd/tink-worker/cmd/root.go b/cmd/tink-worker/cmd/root.go
index 679b13f..6feffc8 100644
--- a/cmd/tink-worker/cmd/root.go
+++ b/cmd/tink-worker/cmd/root.go
@@ -48,9 +48,11 @@ func NewRootCommand(version string, logger log.Logger) *cobra.Command {
 			user, _ := cmd.Flags().GetString("registry-username")
 			pwd, _ := cmd.Flags().GetString("registry-password")
 			registry, _ := cmd.Flags().GetString("docker-registry")
+			useAbsoluteImageURI, _ := cmd.Flags().GetString("use-absolute-image-uri")
 			captureActionLogs, _ := cmd.Flags().GetBool("capture-action-logs")
 
 			logger.With("version", version).Info("starting")
+			logger.With("useAbsoluteImageURI", useAbsoluteImageURI).Info("starting")
 			if setupErr := client.Setup(); setupErr != nil {
 				return setupErr
 			}
@@ -68,7 +70,12 @@ func NewRootCommand(version string, logger log.Logger) *cobra.Command {
 			}
 			rClient := pb.NewWorkflowServiceClient(conn)
 
-			regConn := internal.NewRegistryConnDetails(registry, user, pwd, logger)
+			var regConn *internal.RegistryConnDetails
+			if useAbsoluteImageURI == "true" {
+				regConn = internal.NewRegistryConnDetails(registry, user, pwd, logger, true)
+			} else {
+				regConn = internal.NewRegistryConnDetails(registry, user, pwd, logger, false)
+			}
 			worker := internal.NewWorker(rClient, regConn, logger, registry, retries, retryInterval, maxFileSize)
 
 			err = worker.ProcessWorkflowActions(ctx, workerID, captureActionLogs)
@@ -101,13 +108,12 @@ func NewRootCommand(version string, logger log.Logger) *cobra.Command {
 	must(rootCmd.MarkFlagRequired("id"))
 
 	rootCmd.Flags().StringP("docker-registry", "r", "", "Sets the Docker registry (DOCKER_REGISTRY)")
-	must(rootCmd.MarkFlagRequired("docker-registry"))
 
 	rootCmd.Flags().StringP("registry-username", "u", "", "Sets the registry username (REGISTRY_USERNAME)")
-	must(rootCmd.MarkFlagRequired("registry-username"))
 
 	rootCmd.Flags().StringP("registry-password", "p", "", "Sets the registry-password (REGISTRY_PASSWORD)")
-	must(rootCmd.MarkFlagRequired("registry-password"))
+
+	rootCmd.Flags().StringP("use-absolute-image-uri", "a", "", "Do not prepend docker_registry to template action images (USE_ABSOLUTE_IMAGE_URI)")
 
 	return rootCmd
 }
diff --git a/cmd/tink-worker/internal/action.go b/cmd/tink-worker/internal/action.go
index 2703df9..3f2dfc5 100644
--- a/cmd/tink-worker/internal/action.go
+++ b/cmd/tink-worker/internal/action.go
@@ -21,10 +21,16 @@ const (
 	infoWaitFinished = "wait finished for failed or timeout container"
 )
 
-func (w *Worker) createContainer(ctx context.Context, cmd []string, wfID string, action *pb.WorkflowAction, captureLogs bool) (string, error) {
-	registry := w.registry
+func (w *Worker) createContainer(ctx context.Context, cmd []string, wfID string, action *pb.WorkflowAction, captureLogs bool, useAbsoluteImageURI bool) (string, error) {
+	var actionImage string
+	if useAbsoluteImageURI {
+		actionImage = action.GetImage()
+	} else {
+		registry := w.registry
+		actionImage = path.Join(registry, action.GetImage())
+	}
 	config := &container.Config{
-		Image:        path.Join(registry, action.GetImage()),
+		Image:        actionImage,
 		AttachStdout: true,
 		AttachStderr: true,
 		Cmd:          cmd,
diff --git a/cmd/tink-worker/internal/registry.go b/cmd/tink-worker/internal/registry.go
index 97bc13a..5e9c4b1 100644
--- a/cmd/tink-worker/internal/registry.go
+++ b/cmd/tink-worker/internal/registry.go
@@ -19,6 +19,7 @@ type RegistryConnDetails struct {
 	user,
 	pwd string
 	logger log.Logger
+	useAbsoluteImageURI bool
 }
 
 // ImagePullStatus is the status of the downloaded Image chunk
@@ -33,20 +34,18 @@ type ImagePullStatus struct {
 }
 
 // NewRegistryConnDetails creates a new RegistryConnDetails
-func NewRegistryConnDetails(registry, user, pwd string, logger log.Logger) *RegistryConnDetails {
+func NewRegistryConnDetails(registry, user, pwd string, logger log.Logger, useAbsoluteImageURI bool) *RegistryConnDetails {
 	return &RegistryConnDetails{
 		registry: registry,
 		user:     user,
 		pwd:      pwd,
 		logger:   logger,
+		useAbsoluteImageURI: useAbsoluteImageURI,
 	}
 }
 
 // NewClient uses the RegistryConnDetails to create a new Docker Client
 func (r *RegistryConnDetails) NewClient() (*client.Client, error) {
-	if r.registry == "" {
-		return nil, errors.New("required DOCKER_REGISTRY")
-	}
 	c, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
 
 	if err != nil {
@@ -73,7 +72,16 @@ func (r *RegistryConnDetails) pullImage(ctx context.Context, cli imagePuller, im
 	}
 	authStr := base64.URLEncoding.EncodeToString(encodedJSON)
 
-	out, err := cli.ImagePull(ctx, r.registry+"/"+image, types.ImagePullOptions{RegistryAuth: authStr})
+	var imageURI string
+	if r.useAbsoluteImageURI {
+		imageURI = image
+	} else if len(r.registry) > 0 {
+		imageURI = r.registry + "/" + image
+	} else {
+		return errors.Wrap(err, "REGISTRY REQUIRED")
+	}
+
+	out, err := cli.ImagePull(ctx, imageURI, types.ImagePullOptions{RegistryAuth: authStr})
 	if err != nil {
 		return errors.Wrap(err, "DOCKER PULL")
 	}
diff --git a/cmd/tink-worker/internal/worker.go b/cmd/tink-worker/internal/worker.go
index 55dfb0e..7b5590e 100644
--- a/cmd/tink-worker/internal/worker.go
+++ b/cmd/tink-worker/internal/worker.go
@@ -102,7 +102,7 @@ func (w *Worker) execute(ctx context.Context, wfID string, action *pb.WorkflowAc
 	if err := w.regConn.pullImage(ctx, cli, action.GetImage()); err != nil {
 		return pb.State_STATE_RUNNING, errors.Wrap(err, "DOCKER PULL")
 	}
-	id, err := w.createContainer(ctx, action.Command, wfID, action, captureLogs)
+	id, err := w.createContainer(ctx, action.Command, wfID, action, captureLogs, w.regConn.useAbsoluteImageURI)
 	if err != nil {
 		return pb.State_STATE_RUNNING, errors.Wrap(err, "DOCKER CREATE")
 	}
@@ -144,7 +144,7 @@ func (w *Worker) execute(ctx context.Context, wfID string, action *pb.WorkflowAc
 	l.With("status", status.String()).Info("container removed")
 	if status != pb.State_STATE_SUCCESS {
 		if status == pb.State_STATE_TIMEOUT && action.OnTimeout != nil {
-			id, err = w.createContainer(ctx, action.OnTimeout, wfID, action, captureLogs)
+			id, err = w.createContainer(ctx, action.OnTimeout, wfID, action, captureLogs, w.regConn.useAbsoluteImageURI)
 			if err != nil {
 				l.Error(errors.Wrap(err, errCreateContainer))
 			}
@@ -162,7 +162,7 @@ func (w *Worker) execute(ctx context.Context, wfID string, action *pb.WorkflowAc
 			l.With("status", onTimeoutStatus).Info("action timeout")
 		} else {
 			if action.OnFailure != nil {
-				id, err = w.createContainer(ctx, action.OnFailure, wfID, action, captureLogs)
+				id, err = w.createContainer(ctx, action.OnFailure, wfID, action, captureLogs, w.regConn.useAbsoluteImageURI)
 				if err != nil {
 					l.Error(errors.Wrap(err, errFailedToRunCmd))
 				}
-- 
2.25.1

