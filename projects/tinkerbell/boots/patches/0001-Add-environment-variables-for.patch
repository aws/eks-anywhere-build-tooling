From ac22d6c62639089931b51b0a3815b0071ade7ee8 Mon Sep 17 00:00:00 2001
From: Pooja Trivedi <poojatrivedi@gmail.com>
Date: Mon, 14 Feb 2022 23:57:58 +0000
Subject: [PATCH]
* Add environment variables for
	- OSIE path override
	- Custom URL for registry CA certificate
	- tink-worker image:tag and path
  These environment variables allow
	- Bypassing the requirement for OSIE artifacts to be under
	  predefined paths
 	- Specifying custom URL for downloading CA certificate for
	  the registry, which can be passed on to Hook for tink-docker
	  setup
 	- Specifying custom tink-worker image:tag and path, which can
	  be passed to hook for tink-worker image pull
* Make registry username/password optional to allow for public registry
  pulls

---
 installers/osie/main.go               | 15 ++++++-
 installers/osie/mirror.go             | 36 ++++++++++++---
 packet/mock_cacher/cacher_mock.go     | 36 +++++++--------
 packet/mock_workflow/workflow_mock.go | 64 +++++++++++++--------------
 4 files changed, 92 insertions(+), 59 deletions(-)

diff --git a/installers/osie/main.go b/installers/osie/main.go
index 38df5ba..2b080db 100644
--- a/installers/osie/main.go
+++ b/installers/osie/main.go
@@ -104,13 +104,21 @@ func kernelParams(ctx context.Context, action, state string, j job.Job, s ipxe.S
 	if j.CanWorkflow() {
 		buildWorkerParams()
 		s.Args("docker_registry=" + dockerRegistry)
+		if len(registryUsername) > 0 {
+			s.Args("registry_username=" + registryUsername)
+			s.Args("registry_password=" + registryPassword)
+		}
+		if len(registryCertUrl) > 0 {
+			s.Args("registry_cert_url=" + registryCertUrl)
+		}
 		s.Args("grpc_authority=" + grpcAuthority)
 		s.Args("grpc_cert_url=" + grpcCertURL)
 		s.Args("instance_id=" + j.InstanceID())
-		s.Args("registry_username=" + registryUsername)
-		s.Args("registry_password=" + registryPassword)
 		s.Args("packet_base_url=" + workflowBaseURL())
 		s.Args("worker_id=" + j.HardwareID().String())
+		if len(tinkWorkerImage) > 0 {
+			s.Args("tink_worker_image=" + tinkWorkerImage)
+		}
 	}
 
 	s.Args("packet_bootdev_mac=${bootdevmac}")
@@ -190,6 +198,9 @@ func isCustomOSIE(j job.Job) bool {
 
 // osieBaseURL returns the value of Custom OSIE Service Version or just /current
 func osieBaseURL(j job.Job) string {
+	if osiePathOverride != "" {
+		return osiePathOverride
+	}
 	if u := j.OSIEBaseURL(); u != "" {
 		return u
 	}
diff --git a/installers/osie/mirror.go b/installers/osie/mirror.go
index 796beba..672143b 100644
--- a/installers/osie/mirror.go
+++ b/installers/osie/mirror.go
@@ -14,11 +14,15 @@ const (
 )
 
 var (
-	osieURL                            = mustBuildOSIEURL().String()
-	mirrorBaseURL                      = conf.MirrorBaseUrl
-	dockerRegistry                     string
-	grpcAuthority, grpcCertURL         string
-	registryUsername, registryPassword string
+	osieURL                    = mustBuildOSIEURL().String()
+	osiePathOverride           = getOSIEPathOverride()
+	mirrorBaseURL              = conf.MirrorBaseUrl
+	dockerRegistry             string
+	grpcAuthority, grpcCertURL string
+	registryUsername           string
+	registryPassword           string
+	registryCertUrl            string		
+	tinkWorkerImage            string
 )
 
 func buildOSIEURL() (*url.URL, error) {
@@ -42,6 +46,22 @@ func buildOSIEURL() (*url.URL, error) {
 	return u, nil
 }
 
+func getOSIEPathOverride() string {
+	base, err := url.Parse(conf.MirrorBaseUrl)
+	if err != nil {
+		panic(errors.Wrap(err, "parsing MirrorBaseUrl"))
+	}
+	if s, ok := os.LookupEnv("OSIE_PATH_OVERRIDE"); ok {
+		u, err := base.Parse(s)
+		if err != nil {
+			panic(errors.Wrapf(err, "invalid OSIE_PATH_OVERRIDE: %s", s))
+		}
+
+		return u.String() 
+	}
+	return ""
+}
+
 func mustBuildOSIEURL() *url.URL {
 	u, err := buildOSIEURL()
 	if err != nil {
@@ -55,8 +75,10 @@ func buildWorkerParams() {
 	dockerRegistry = getParam("DOCKER_REGISTRY")
 	grpcAuthority = getParam("TINKERBELL_GRPC_AUTHORITY")
 	grpcCertURL = getParam("TINKERBELL_CERT_URL")
-	registryUsername = getParam("REGISTRY_USERNAME")
-	registryPassword = getParam("REGISTRY_PASSWORD")
+	registryUsername = os.Getenv("REGISTRY_USERNAME")
+	registryPassword = os.Getenv("REGISTRY_PASSWORD")
+	registryCertUrl = os.Getenv("REGISTRY_CERT_URL")
+	tinkWorkerImage = os.Getenv("TINK_WORKER_IMAGE")
 }
 
 func getParam(key string) string {
diff --git a/packet/mock_cacher/cacher_mock.go b/packet/mock_cacher/cacher_mock.go
index a12fadc..88fe3c7 100644
--- a/packet/mock_cacher/cacher_mock.go
+++ b/packet/mock_cacher/cacher_mock.go
@@ -13,30 +13,30 @@ import (
 	grpc "google.golang.org/grpc"
 )
 
-// MockCacherClient is a mock of CacherClient interface.
+// MockCacherClient is a mock of CacherClient interface
 type MockCacherClient struct {
 	ctrl     *gomock.Controller
 	recorder *MockCacherClientMockRecorder
 }
 
-// MockCacherClientMockRecorder is the mock recorder for MockCacherClient.
+// MockCacherClientMockRecorder is the mock recorder for MockCacherClient
 type MockCacherClientMockRecorder struct {
 	mock *MockCacherClient
 }
 
-// NewMockCacherClient creates a new mock instance.
+// NewMockCacherClient creates a new mock instance
 func NewMockCacherClient(ctrl *gomock.Controller) *MockCacherClient {
 	mock := &MockCacherClient{ctrl: ctrl}
 	mock.recorder = &MockCacherClientMockRecorder{mock}
 	return mock
 }
 
-// EXPECT returns an object that allows the caller to indicate expected use.
+// EXPECT returns an object that allows the caller to indicate expected use
 func (m *MockCacherClient) EXPECT() *MockCacherClientMockRecorder {
 	return m.recorder
 }
 
-// All mocks base method.
+// All mocks base method
 func (m *MockCacherClient) All(arg0 context.Context, arg1 *cacher.Empty, arg2 ...grpc.CallOption) (cacher.Cacher_AllClient, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -49,14 +49,14 @@ func (m *MockCacherClient) All(arg0 context.Context, arg1 *cacher.Empty, arg2 ..
 	return ret0, ret1
 }
 
-// All indicates an expected call of All.
+// All indicates an expected call of All
 func (mr *MockCacherClientMockRecorder) All(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCacherClient)(nil).All), varargs...)
 }
 
-// ByID mocks base method.
+// ByID mocks base method
 func (m *MockCacherClient) ByID(arg0 context.Context, arg1 *cacher.GetRequest, arg2 ...grpc.CallOption) (*cacher.Hardware, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -69,14 +69,14 @@ func (m *MockCacherClient) ByID(arg0 context.Context, arg1 *cacher.GetRequest, a
 	return ret0, ret1
 }
 
-// ByID indicates an expected call of ByID.
+// ByID indicates an expected call of ByID
 func (mr *MockCacherClientMockRecorder) ByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockCacherClient)(nil).ByID), varargs...)
 }
 
-// ByIP mocks base method.
+// ByIP mocks base method
 func (m *MockCacherClient) ByIP(arg0 context.Context, arg1 *cacher.GetRequest, arg2 ...grpc.CallOption) (*cacher.Hardware, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -89,14 +89,14 @@ func (m *MockCacherClient) ByIP(arg0 context.Context, arg1 *cacher.GetRequest, a
 	return ret0, ret1
 }
 
-// ByIP indicates an expected call of ByIP.
+// ByIP indicates an expected call of ByIP
 func (mr *MockCacherClientMockRecorder) ByIP(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByIP", reflect.TypeOf((*MockCacherClient)(nil).ByIP), varargs...)
 }
 
-// ByMAC mocks base method.
+// ByMAC mocks base method
 func (m *MockCacherClient) ByMAC(arg0 context.Context, arg1 *cacher.GetRequest, arg2 ...grpc.CallOption) (*cacher.Hardware, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -109,14 +109,14 @@ func (m *MockCacherClient) ByMAC(arg0 context.Context, arg1 *cacher.GetRequest,
 	return ret0, ret1
 }
 
-// ByMAC indicates an expected call of ByMAC.
+// ByMAC indicates an expected call of ByMAC
 func (mr *MockCacherClientMockRecorder) ByMAC(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByMAC", reflect.TypeOf((*MockCacherClient)(nil).ByMAC), varargs...)
 }
 
-// Ingest mocks base method.
+// Ingest mocks base method
 func (m *MockCacherClient) Ingest(arg0 context.Context, arg1 *cacher.Empty, arg2 ...grpc.CallOption) (*cacher.Empty, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -129,14 +129,14 @@ func (m *MockCacherClient) Ingest(arg0 context.Context, arg1 *cacher.Empty, arg2
 	return ret0, ret1
 }
 
-// Ingest indicates an expected call of Ingest.
+// Ingest indicates an expected call of Ingest
 func (mr *MockCacherClientMockRecorder) Ingest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingest", reflect.TypeOf((*MockCacherClient)(nil).Ingest), varargs...)
 }
 
-// Push mocks base method.
+// Push mocks base method
 func (m *MockCacherClient) Push(arg0 context.Context, arg1 *cacher.PushRequest, arg2 ...grpc.CallOption) (*cacher.Empty, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -149,14 +149,14 @@ func (m *MockCacherClient) Push(arg0 context.Context, arg1 *cacher.PushRequest,
 	return ret0, ret1
 }
 
-// Push indicates an expected call of Push.
+// Push indicates an expected call of Push
 func (mr *MockCacherClientMockRecorder) Push(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockCacherClient)(nil).Push), varargs...)
 }
 
-// Watch mocks base method.
+// Watch mocks base method
 func (m *MockCacherClient) Watch(arg0 context.Context, arg1 *cacher.GetRequest, arg2 ...grpc.CallOption) (cacher.Cacher_WatchClient, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -169,7 +169,7 @@ func (m *MockCacherClient) Watch(arg0 context.Context, arg1 *cacher.GetRequest,
 	return ret0, ret1
 }
 
-// Watch indicates an expected call of Watch.
+// Watch indicates an expected call of Watch
 func (mr *MockCacherClientMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
diff --git a/packet/mock_workflow/workflow_mock.go b/packet/mock_workflow/workflow_mock.go
index 2fade7e..b65cd41 100644
--- a/packet/mock_workflow/workflow_mock.go
+++ b/packet/mock_workflow/workflow_mock.go
@@ -13,30 +13,30 @@ import (
 	grpc "google.golang.org/grpc"
 )
 
-// MockWorkflowServiceClient is a mock of WorkflowServiceClient interface.
+// MockWorkflowServiceClient is a mock of WorkflowServiceClient interface
 type MockWorkflowServiceClient struct {
 	ctrl     *gomock.Controller
 	recorder *MockWorkflowServiceClientMockRecorder
 }
 
-// MockWorkflowServiceClientMockRecorder is the mock recorder for MockWorkflowServiceClient.
+// MockWorkflowServiceClientMockRecorder is the mock recorder for MockWorkflowServiceClient
 type MockWorkflowServiceClientMockRecorder struct {
 	mock *MockWorkflowServiceClient
 }
 
-// NewMockWorkflowServiceClient creates a new mock instance.
+// NewMockWorkflowServiceClient creates a new mock instance
 func NewMockWorkflowServiceClient(ctrl *gomock.Controller) *MockWorkflowServiceClient {
 	mock := &MockWorkflowServiceClient{ctrl: ctrl}
 	mock.recorder = &MockWorkflowServiceClientMockRecorder{mock}
 	return mock
 }
 
-// EXPECT returns an object that allows the caller to indicate expected use.
+// EXPECT returns an object that allows the caller to indicate expected use
 func (m *MockWorkflowServiceClient) EXPECT() *MockWorkflowServiceClientMockRecorder {
 	return m.recorder
 }
 
-// CreateWorkflow mocks base method.
+// CreateWorkflow mocks base method
 func (m *MockWorkflowServiceClient) CreateWorkflow(arg0 context.Context, arg1 *workflow.CreateRequest, arg2 ...grpc.CallOption) (*workflow.CreateResponse, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -49,14 +49,14 @@ func (m *MockWorkflowServiceClient) CreateWorkflow(arg0 context.Context, arg1 *w
 	return ret0, ret1
 }
 
-// CreateWorkflow indicates an expected call of CreateWorkflow.
+// CreateWorkflow indicates an expected call of CreateWorkflow
 func (mr *MockWorkflowServiceClientMockRecorder) CreateWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockWorkflowServiceClient)(nil).CreateWorkflow), varargs...)
 }
 
-// DeleteWorkflow mocks base method.
+// DeleteWorkflow mocks base method
 func (m *MockWorkflowServiceClient) DeleteWorkflow(arg0 context.Context, arg1 *workflow.GetRequest, arg2 ...grpc.CallOption) (*workflow.Empty, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -69,14 +69,14 @@ func (m *MockWorkflowServiceClient) DeleteWorkflow(arg0 context.Context, arg1 *w
 	return ret0, ret1
 }
 
-// DeleteWorkflow indicates an expected call of DeleteWorkflow.
+// DeleteWorkflow indicates an expected call of DeleteWorkflow
 func (mr *MockWorkflowServiceClientMockRecorder) DeleteWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockWorkflowServiceClient)(nil).DeleteWorkflow), varargs...)
 }
 
-// GetWorkflow mocks base method.
+// GetWorkflow mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflow(arg0 context.Context, arg1 *workflow.GetRequest, arg2 ...grpc.CallOption) (*workflow.Workflow, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -89,14 +89,14 @@ func (m *MockWorkflowServiceClient) GetWorkflow(arg0 context.Context, arg1 *work
 	return ret0, ret1
 }
 
-// GetWorkflow indicates an expected call of GetWorkflow.
+// GetWorkflow indicates an expected call of GetWorkflow
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflow), varargs...)
 }
 
-// GetWorkflowActions mocks base method.
+// GetWorkflowActions mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowActions(arg0 context.Context, arg1 *workflow.WorkflowActionsRequest, arg2 ...grpc.CallOption) (*workflow.WorkflowActionList, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -109,14 +109,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowActions(arg0 context.Context, arg
 	return ret0, ret1
 }
 
-// GetWorkflowActions indicates an expected call of GetWorkflowActions.
+// GetWorkflowActions indicates an expected call of GetWorkflowActions
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowActions", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowActions), varargs...)
 }
 
-// GetWorkflowContext mocks base method.
+// GetWorkflowContext mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowContext(arg0 context.Context, arg1 *workflow.GetRequest, arg2 ...grpc.CallOption) (*workflow.WorkflowContext, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -129,14 +129,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowContext(arg0 context.Context, arg
 	return ret0, ret1
 }
 
-// GetWorkflowContext indicates an expected call of GetWorkflowContext.
+// GetWorkflowContext indicates an expected call of GetWorkflowContext
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowContext", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowContext), varargs...)
 }
 
-// GetWorkflowContextList mocks base method.
+// GetWorkflowContextList mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowContextList(arg0 context.Context, arg1 *workflow.WorkflowContextRequest, arg2 ...grpc.CallOption) (*workflow.WorkflowContextList, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -149,14 +149,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowContextList(arg0 context.Context,
 	return ret0, ret1
 }
 
-// GetWorkflowContextList indicates an expected call of GetWorkflowContextList.
+// GetWorkflowContextList indicates an expected call of GetWorkflowContextList
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowContextList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowContextList", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowContextList), varargs...)
 }
 
-// GetWorkflowContexts mocks base method.
+// GetWorkflowContexts mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowContexts(arg0 context.Context, arg1 *workflow.WorkflowContextRequest, arg2 ...grpc.CallOption) (workflow.WorkflowService_GetWorkflowContextsClient, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -169,14 +169,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowContexts(arg0 context.Context, ar
 	return ret0, ret1
 }
 
-// GetWorkflowContexts indicates an expected call of GetWorkflowContexts.
+// GetWorkflowContexts indicates an expected call of GetWorkflowContexts
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowContexts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowContexts", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowContexts), varargs...)
 }
 
-// GetWorkflowData mocks base method.
+// GetWorkflowData mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowData(arg0 context.Context, arg1 *workflow.GetWorkflowDataRequest, arg2 ...grpc.CallOption) (*workflow.GetWorkflowDataResponse, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -189,14 +189,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowData(arg0 context.Context, arg1 *
 	return ret0, ret1
 }
 
-// GetWorkflowData indicates an expected call of GetWorkflowData.
+// GetWorkflowData indicates an expected call of GetWorkflowData
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowData", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowData), varargs...)
 }
 
-// GetWorkflowDataVersion mocks base method.
+// GetWorkflowDataVersion mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowDataVersion(arg0 context.Context, arg1 *workflow.GetWorkflowDataRequest, arg2 ...grpc.CallOption) (*workflow.GetWorkflowDataResponse, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -209,14 +209,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowDataVersion(arg0 context.Context,
 	return ret0, ret1
 }
 
-// GetWorkflowDataVersion indicates an expected call of GetWorkflowDataVersion.
+// GetWorkflowDataVersion indicates an expected call of GetWorkflowDataVersion
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowDataVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowDataVersion", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowDataVersion), varargs...)
 }
 
-// GetWorkflowMetadata mocks base method.
+// GetWorkflowMetadata mocks base method
 func (m *MockWorkflowServiceClient) GetWorkflowMetadata(arg0 context.Context, arg1 *workflow.GetWorkflowDataRequest, arg2 ...grpc.CallOption) (*workflow.GetWorkflowDataResponse, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -229,14 +229,14 @@ func (m *MockWorkflowServiceClient) GetWorkflowMetadata(arg0 context.Context, ar
 	return ret0, ret1
 }
 
-// GetWorkflowMetadata indicates an expected call of GetWorkflowMetadata.
+// GetWorkflowMetadata indicates an expected call of GetWorkflowMetadata
 func (mr *MockWorkflowServiceClientMockRecorder) GetWorkflowMetadata(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowMetadata", reflect.TypeOf((*MockWorkflowServiceClient)(nil).GetWorkflowMetadata), varargs...)
 }
 
-// ListWorkflows mocks base method.
+// ListWorkflows mocks base method
 func (m *MockWorkflowServiceClient) ListWorkflows(arg0 context.Context, arg1 *workflow.Empty, arg2 ...grpc.CallOption) (workflow.WorkflowService_ListWorkflowsClient, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -249,14 +249,14 @@ func (m *MockWorkflowServiceClient) ListWorkflows(arg0 context.Context, arg1 *wo
 	return ret0, ret1
 }
 
-// ListWorkflows indicates an expected call of ListWorkflows.
+// ListWorkflows indicates an expected call of ListWorkflows
 func (mr *MockWorkflowServiceClientMockRecorder) ListWorkflows(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockWorkflowServiceClient)(nil).ListWorkflows), varargs...)
 }
 
-// ReportActionStatus mocks base method.
+// ReportActionStatus mocks base method
 func (m *MockWorkflowServiceClient) ReportActionStatus(arg0 context.Context, arg1 *workflow.WorkflowActionStatus, arg2 ...grpc.CallOption) (*workflow.Empty, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -269,14 +269,14 @@ func (m *MockWorkflowServiceClient) ReportActionStatus(arg0 context.Context, arg
 	return ret0, ret1
 }
 
-// ReportActionStatus indicates an expected call of ReportActionStatus.
+// ReportActionStatus indicates an expected call of ReportActionStatus
 func (mr *MockWorkflowServiceClientMockRecorder) ReportActionStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportActionStatus", reflect.TypeOf((*MockWorkflowServiceClient)(nil).ReportActionStatus), varargs...)
 }
 
-// ShowWorkflowEvents mocks base method.
+// ShowWorkflowEvents mocks base method
 func (m *MockWorkflowServiceClient) ShowWorkflowEvents(arg0 context.Context, arg1 *workflow.GetRequest, arg2 ...grpc.CallOption) (workflow.WorkflowService_ShowWorkflowEventsClient, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -289,14 +289,14 @@ func (m *MockWorkflowServiceClient) ShowWorkflowEvents(arg0 context.Context, arg
 	return ret0, ret1
 }
 
-// ShowWorkflowEvents indicates an expected call of ShowWorkflowEvents.
+// ShowWorkflowEvents indicates an expected call of ShowWorkflowEvents
 func (mr *MockWorkflowServiceClientMockRecorder) ShowWorkflowEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowWorkflowEvents", reflect.TypeOf((*MockWorkflowServiceClient)(nil).ShowWorkflowEvents), varargs...)
 }
 
-// UpdateWorkflowData mocks base method.
+// UpdateWorkflowData mocks base method
 func (m *MockWorkflowServiceClient) UpdateWorkflowData(arg0 context.Context, arg1 *workflow.UpdateWorkflowDataRequest, arg2 ...grpc.CallOption) (*workflow.Empty, error) {
 	m.ctrl.T.Helper()
 	varargs := []interface{}{arg0, arg1}
@@ -309,7 +309,7 @@ func (m *MockWorkflowServiceClient) UpdateWorkflowData(arg0 context.Context, arg
 	return ret0, ret1
 }
 
-// UpdateWorkflowData indicates an expected call of UpdateWorkflowData.
+// UpdateWorkflowData indicates an expected call of UpdateWorkflowData
 func (mr *MockWorkflowServiceClientMockRecorder) UpdateWorkflowData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
 	varargs := append([]interface{}{arg0, arg1}, arg2...)
-- 
2.25.1

