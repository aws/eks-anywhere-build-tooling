From 78661258f008d140444782545750d85c025b230a Mon Sep 17 00:00:00 2001
From: Vincent Ni <kangqini@amazon.com>
Date: Tue, 20 Sep 2022 08:33:37 -0700
Subject: [PATCH 4/4] fix cross account issue for AWS ECR

---
 src/pkg/reg/adapter/awsecr/adapter.go      | 14 +++++++-------
 src/pkg/reg/adapter/awsecr/adapter_test.go | 10 +++++-----
 src/pkg/reg/adapter/awsecr/auth.go         | 12 +++++++++---
 3 files changed, 21 insertions(+), 15 deletions(-)

diff --git a/src/pkg/reg/adapter/awsecr/adapter.go b/src/pkg/reg/adapter/awsecr/adapter.go
index 1ad6ea11c..846e99216 100644
--- a/src/pkg/reg/adapter/awsecr/adapter.go
+++ b/src/pkg/reg/adapter/awsecr/adapter.go
@@ -28,11 +28,11 @@ import (
 )
 
 const (
-	regionPattern = "https://(?:api|\\d+\\.dkr)\\.ecr\\.([\\w\\-]+)\\.amazonaws\\.com"
+	ecrPattern = "https://(?:api|(\\d+)\\.dkr)\\.ecr\\.([\\w\\-]+)\\.amazonaws\\.com"
 )
 
 var (
-	regionRegexp = regexp.MustCompile(regionPattern)
+	ecrRegexp = regexp.MustCompile(ecrPattern)
 )
 
 func init() {
@@ -44,7 +44,7 @@ func init() {
 }
 
 func newAdapter(registry *model.Registry) (*adapter, error) {
-	region, err := parseRegion(registry.URL)
+	_, region, err := parseAccountRegion(registry.URL)
 	if err != nil {
 		return nil, err
 	}
@@ -61,12 +61,12 @@ func newAdapter(registry *model.Registry) (*adapter, error) {
 	}, nil
 }
 
-func parseRegion(url string) (string, error) {
-	rs := regionRegexp.FindStringSubmatch(url)
+func parseAccountRegion(url string) (string, string, error) {
+	rs := ecrRegexp.FindStringSubmatch(url)
 	if rs == nil {
-		return "", errors.New("bad aws url")
+		return "", "", errors.New("bad aws url")
 	}
-	return rs[1], nil
+	return rs[1], rs[2], nil
 }
 
 type factory struct {
diff --git a/src/pkg/reg/adapter/awsecr/adapter_test.go b/src/pkg/reg/adapter/awsecr/adapter_test.go
index cbdf5b86b..d0b4d4c44 100644
--- a/src/pkg/reg/adapter/awsecr/adapter_test.go
+++ b/src/pkg/reg/adapter/awsecr/adapter_test.go
@@ -288,18 +288,18 @@ var urlForBenchmark = []string{
 	"https://test-region.amazonaws.com",
 }
 
-func compileRegexpEveryTime(url string) (string, error) {
-	rs := regexp.MustCompile(regionPattern).FindStringSubmatch(url)
+func compileRegexpEveryTime(url string) (string, string, error) {
+	rs := regexp.MustCompile(ecrPattern).FindStringSubmatch(url)
 	if rs == nil {
-		return "", errors.New("bad aws url")
+		return "", "", errors.New("bad aws url")
 	}
-	return rs[1], nil
+	return rs[1], rs[2], nil
 }
 
 func BenchmarkGetRegion(b *testing.B) {
 	for i := 0; i < b.N; i++ {
 		for _, url := range urlForBenchmark {
-			parseRegion(url)
+			parseAccountRegion(url)
 		}
 	}
 }
diff --git a/src/pkg/reg/adapter/awsecr/auth.go b/src/pkg/reg/adapter/awsecr/auth.go
index 62cb49984..24d18a26d 100644
--- a/src/pkg/reg/adapter/awsecr/auth.go
+++ b/src/pkg/reg/adapter/awsecr/auth.go
@@ -63,7 +63,7 @@ func (a *awsAuthCredential) Modify(req *http.Request) error {
 		return nil
 	}
 	if !a.isTokenValid() {
-		endpoint, user, pass, expiresAt, err := a.getAuthorization()
+		endpoint, user, pass, expiresAt, err := a.getAuthorization(req.URL.String())
 
 		if err != nil {
 			return err
@@ -121,9 +121,15 @@ func getAwsSvc(region, accessKey, accessSecret string, insecure bool, forceEndpo
 	return svc, nil
 }
 
-func (a *awsAuthCredential) getAuthorization() (string, string, string, *time.Time, error) {
+func (a *awsAuthCredential) getAuthorization(url string) (string, string, string, *time.Time, error) {
+	id, _, err := parseAccountRegion(url)
+	if err != nil {
+		return "", "", "", nil, err
+	}
+
+	regIds := []*string{ &id }
 	svc := a.awssvc
-	result, err := svc.GetAuthorizationToken(nil)
+	result, err := svc.GetAuthorizationToken(&awsecrapi.GetAuthorizationTokenInput{RegistryIds: regIds})
 	if err != nil {
 		if aerr, ok := err.(awserr.Error); ok {
 			return "", "", "", nil, fmt.Errorf("%s: %s", aerr.Code(), aerr.Error())
-- 
2.32.1 (Apple Git-133)

