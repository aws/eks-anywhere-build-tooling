// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eks-anywhere-build-tooling/aws/bottlerocket-bootstrap/pkg/providers/snow/system (interfaces: APIClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// Reboot mocks base method.
func (m *MockAPIClient) Reboot() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reboot indicates an expected call of Reboot.
func (mr *MockAPIClientMockRecorder) Reboot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockAPIClient)(nil).Reboot))
}

// SetKernelCorePattern mocks base method.
func (m *MockAPIClient) SetKernelCorePattern(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKernelCorePattern", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKernelCorePattern indicates an expected call of SetKernelCorePattern.
func (mr *MockAPIClientMockRecorder) SetKernelCorePattern(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKernelCorePattern", reflect.TypeOf((*MockAPIClient)(nil).SetKernelCorePattern), arg0)
}

// SetKernelRmemMax mocks base method.
func (m *MockAPIClient) SetKernelRmemMax(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKernelRmemMax", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKernelRmemMax indicates an expected call of SetKernelRmemMax.
func (mr *MockAPIClientMockRecorder) SetKernelRmemMax(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKernelRmemMax", reflect.TypeOf((*MockAPIClient)(nil).SetKernelRmemMax), arg0)
}

// SetKernelWmemMax mocks base method.
func (m *MockAPIClient) SetKernelWmemMax(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKernelWmemMax", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKernelWmemMax indicates an expected call of SetKernelWmemMax.
func (mr *MockAPIClientMockRecorder) SetKernelWmemMax(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKernelWmemMax", reflect.TypeOf((*MockAPIClient)(nil).SetKernelWmemMax), arg0)
}

// SetKubernetesAllowUnsafeSysctls mocks base method.
func (m *MockAPIClient) SetKubernetesAllowUnsafeSysctls(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKubernetesAllowUnsafeSysctls", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKubernetesAllowUnsafeSysctls indicates an expected call of SetKubernetesAllowUnsafeSysctls.
func (mr *MockAPIClientMockRecorder) SetKubernetesAllowUnsafeSysctls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKubernetesAllowUnsafeSysctls", reflect.TypeOf((*MockAPIClient)(nil).SetKubernetesAllowUnsafeSysctls), arg0)
}

// SetKubernetesCloudProvider mocks base method.
func (m *MockAPIClient) SetKubernetesCloudProvider(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKubernetesCloudProvider", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKubernetesCloudProvider indicates an expected call of SetKubernetesCloudProvider.
func (mr *MockAPIClientMockRecorder) SetKubernetesCloudProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKubernetesCloudProvider", reflect.TypeOf((*MockAPIClient)(nil).SetKubernetesCloudProvider), arg0)
}

// SetKubernetesNodeIP mocks base method.
func (m *MockAPIClient) SetKubernetesNodeIP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKubernetesNodeIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKubernetesNodeIP indicates an expected call of SetKubernetesNodeIP.
func (mr *MockAPIClientMockRecorder) SetKubernetesNodeIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKubernetesNodeIP", reflect.TypeOf((*MockAPIClient)(nil).SetKubernetesNodeIP), arg0)
}

// SetKubernetesProviderID mocks base method.
func (m *MockAPIClient) SetKubernetesProviderID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKubernetesProviderID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKubernetesProviderID indicates an expected call of SetKubernetesProviderID.
func (mr *MockAPIClientMockRecorder) SetKubernetesProviderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKubernetesProviderID", reflect.TypeOf((*MockAPIClient)(nil).SetKubernetesProviderID), arg0)
}
