// Code generated by MockGen. DO NOT EDIT.
// Source: ./secretsmanager.go

package service

import (
	context "context"
	reflect "reflect"

	secretsmanager "github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	gomock "github.com/golang/mock/gomock"
)

// MockSecretsManagerService is a mock of SecretsManagerService interface.
type MockSecretsManagerService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsManagerServiceMockRecorder
}

// MockSecretsManagerServiceMockRecorder is the mock recorder for MockSecretsManagerService.
type MockSecretsManagerServiceMockRecorder struct {
	mock *MockSecretsManagerService
}

// NewMockSecretsManagerService creates a new mock instance.
func NewMockSecretsManagerService(ctrl *gomock.Controller) *MockSecretsManagerService {
	mock := &MockSecretsManagerService{ctrl: ctrl}
	mock.recorder = &MockSecretsManagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsManagerService) EXPECT() *MockSecretsManagerServiceMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method.
func (m *MockSecretsManagerService) DeleteSecret(ctx context.Context, secretName string) (*secretsmanager.DeleteSecretOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretName)
	ret0, _ := ret[0].(*secretsmanager.DeleteSecretOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretsManagerServiceMockRecorder) DeleteSecret(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretsManagerService)(nil).DeleteSecret), ctx, secretName)
}

// GetSecretValue mocks base method.
func (m *MockSecretsManagerService) GetSecretValue(ctx context.Context, secretName string) (*secretsmanager.GetSecretValueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", ctx, secretName)
	ret0, _ := ret[0].(*secretsmanager.GetSecretValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretsManagerServiceMockRecorder) GetSecretValue(ctx, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretsManagerService)(nil).GetSecretValue), ctx, secretName)
}
