From 0e30701437f3bdc4c3673358a791b0abe3149905 Mon Sep 17 00:00:00 2001
From: Guillermo Gaston <gaslor@amazon.com>
Date: Mon, 2 Aug 2021 18:05:34 +0000
Subject: [PATCH 2/9] Updated init and join commands to be able to use kubelet
 init system

---
 apis/config.go                   | 10 ++++
 cmd/init.go                      | 37 +++-----------
 cmd/join.go                      | 38 +++-----------
 cmd/reset.go                     |  2 +-
 constants/constants.go           |  7 +--
 initsystem/initsystem.go         | 22 +++++++-
 initsystem/kubelet/initsystem.go | 31 +++++++++++-
 initsystem/systemd.go            | 87 +++++++++++++++++++++++++++++++-
 service/unit.go                  | 22 --------
 9 files changed, 163 insertions(+), 93 deletions(-)

diff --git a/apis/config.go b/apis/config.go
index 598aa623..9ab7f312 100644
--- a/apis/config.go
+++ b/apis/config.go
@@ -36,6 +36,7 @@ import (
 type EtcdAdmConfig struct {
 	Version         string
 	ReleaseURL      string
+	ImageRepository string
 	CertificatesDir string
 
 	DownloadConnectTimeout time.Duration
@@ -89,8 +90,17 @@ type EtcdAdmConfig struct {
 	// Retry sets enable or disable backoff retry when join etcd member to cluster.
 	// Default true, it mean that enable backoff retry.
 	Retry bool
+
+	InitSystem InitSystem
 }
 
+type InitSystem string
+
+const (
+	Systemd InitSystem = "systemd"
+	Kubelet InitSystem = "kubelet"
+)
+
 // EndpointStatus TODO: add description
 type EndpointStatus struct {
 	EtcdMember
diff --git a/cmd/init.go b/cmd/init.go
index 97496580..b433b2dc 100644
--- a/cmd/init.go
+++ b/cmd/init.go
@@ -24,7 +24,6 @@ import (
 	"github.com/spf13/cobra"
 
 	"sigs.k8s.io/etcdadm/apis"
-	"sigs.k8s.io/etcdadm/binary"
 	"sigs.k8s.io/etcdadm/certs"
 	"sigs.k8s.io/etcdadm/constants"
 	"sigs.k8s.io/etcdadm/etcd"
@@ -43,7 +42,7 @@ var initCmd = &cobra.Command{
 			log.Fatalf("[defaults] Error: %s", err)
 		}
 
-		initSystem, err := initsystem.GetInitSystem()
+		initSystem, err := initsystem.GetInitSystem(&etcdAdmConfig)
 		if err != nil {
 			log.Fatalf("[initsystem] Error detecting the init system: %s", err)
 		}
@@ -61,32 +60,9 @@ var initCmd = &cobra.Command{
 			os.RemoveAll(etcdAdmConfig.DataDir)
 		}
 
-		// etcd binaries installation
-		inCache, err := binary.InstallFromCache(etcdAdmConfig.Version, etcdAdmConfig.InstallDir, etcdAdmConfig.CacheDir)
-		if err != nil {
-			log.Fatalf("[install] Artifact could not be installed from cache: %s", err)
-		}
-		if !inCache {
-			log.Printf("[install] Artifact not found in cache. Trying to fetch from upstream: %s", etcdAdmConfig.ReleaseURL)
-			if err = binary.Download(etcdAdmConfig.ReleaseURL, etcdAdmConfig.Version, etcdAdmConfig.CacheDir); err != nil {
-				log.Fatalf("[install] Unable to fetch artifact from upstream: %s", err)
-			}
-			// Try installing binaries from cache now
-			inCache, err := binary.InstallFromCache(etcdAdmConfig.Version, etcdAdmConfig.InstallDir, etcdAdmConfig.CacheDir)
-			if err != nil {
-				log.Fatalf("[install] Artifact could not be installed from cache: %s", err)
-			}
-			if !inCache {
-				log.Fatalf("[install] Artifact not found in cache after download. Exiting.")
-			}
-		}
-		installed, err := binary.IsInstalled(etcdAdmConfig.Version, etcdAdmConfig.InstallDir)
-		if err != nil {
+		if err = initSystem.Install(); err != nil {
 			log.Fatalf("[install] Error: %s", err)
 		}
-		if !installed {
-			log.Fatalf("[install] Binaries not found in install dir. Exiting.")
-		}
 		// cert management
 		if err = certs.CreatePKIAssets(&etcdAdmConfig); err != nil {
 			log.Fatalf("[certificates] Error: %s", err)
@@ -96,10 +72,7 @@ var initCmd = &cobra.Command{
 				log.Fatalf("[snapshot] Error restoring snapshot: %v", err)
 			}
 		}
-		if err = service.WriteEnvironmentFile(&etcdAdmConfig); err != nil {
-			log.Fatalf("[configure] Error: %s", err)
-		}
-		if err = service.WriteUnitFile(&etcdAdmConfig); err != nil {
+		if err = initSystem.Configure(); err != nil {
 			log.Fatalf("[configure] Error: %s", err)
 		}
 		if err = initSystem.EnableAndStartService(constants.UnitFileBaseName); err != nil {
@@ -117,7 +90,7 @@ var initCmd = &cobra.Command{
 		if err != nil {
 			log.Printf("[health] Error checking health: %v", err)
 		}
-		ctx, cancel := context.WithTimeout(context.Background(), constants.DefaultEtcdRequestTimeout)
+		ctx, cancel := context.WithTimeout(context.Background(), initSystem.StartupTimeout())
 		_, err = client.Get(ctx, constants.EtcdHealthCheckKey)
 		cancel()
 		// Healthy because the cluster reaches consensus for the get request,
@@ -147,4 +120,6 @@ func init() {
 	initCmd.PersistentFlags().BoolVar(&etcdAdmConfig.SkipHashCheck, "skip-hash-check", false, "Ignore snapshot integrity hash value (required if copied from data directory)")
 	initCmd.PersistentFlags().DurationVar(&etcdAdmConfig.DownloadConnectTimeout, "download-connect-timeout", constants.DefaultDownloadConnectTimeout, "Maximum time in seconds that you allow the connection to the server to take.")
 	initCmd.PersistentFlags().StringArrayVar(&etcdAdmConfig.EtcdDiskPriorities, "disk-priorities", constants.DefaultEtcdDiskPriorities, "Setting etcd disk priority")
+	initCmd.PersistentFlags().StringVar((*string)(&etcdAdmConfig.InitSystem), "init-system", string(apis.Systemd), "init system type (systemd or kubelet)")
+	initCmd.PersistentFlags().StringVar(&etcdAdmConfig.ImageRepository, "image-repository", constants.DefaultImageRepository, "image repository when using kubelet init system")
 }
diff --git a/cmd/join.go b/cmd/join.go
index b2ad24c7..b1108162 100644
--- a/cmd/join.go
+++ b/cmd/join.go
@@ -27,7 +27,6 @@ import (
 
 	"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
 	"sigs.k8s.io/etcdadm/apis"
-	"sigs.k8s.io/etcdadm/binary"
 	"sigs.k8s.io/etcdadm/certs"
 	"sigs.k8s.io/etcdadm/constants"
 	"sigs.k8s.io/etcdadm/etcd"
@@ -53,7 +52,7 @@ var joinCmd = &cobra.Command{
 			log.Fatalf("[defaults] Error: %s", err)
 		}
 
-		initSystem, err := initsystem.GetInitSystem()
+		initSystem, err := initsystem.GetInitSystem(&etcdAdmConfig)
 		if err != nil {
 			log.Fatalf("[initsystem] Error detecting the init system: %s", err)
 		}
@@ -148,37 +147,10 @@ var joinCmd = &cobra.Command{
 			etcdAdmConfig.InitialCluster = etcd.InitialClusterFromMembers(members)
 		}
 
-		// etcd binaries installation
-		inCache, err := binary.InstallFromCache(etcdAdmConfig.Version, etcdAdmConfig.InstallDir, etcdAdmConfig.CacheDir)
-		if err != nil {
-			log.Fatalf("[install] Artifact could not be installed from cache: %s", err)
-		}
-		if !inCache {
-			log.Printf("[install] Artifact not found in cache. Trying to fetch from upstream: %s", etcdAdmConfig.ReleaseURL)
-			if err = binary.Download(etcdAdmConfig.ReleaseURL, etcdAdmConfig.Version, etcdAdmConfig.CacheDir); err != nil {
-				log.Fatalf("[install] Unable to fetch artifact from upstream: %s", err)
-			}
-			// Try installing binaries from cache now
-			inCache, err := binary.InstallFromCache(etcdAdmConfig.Version, etcdAdmConfig.InstallDir, etcdAdmConfig.CacheDir)
-			if err != nil {
-				log.Fatalf("[install] Artifact could not be installed from cache: %s", err)
-			}
-			if !inCache {
-				log.Fatalf("[install] Artifact not found in cache after download. Exiting.")
-			}
-		}
-		installed, err := binary.IsInstalled(etcdAdmConfig.Version, etcdAdmConfig.InstallDir)
-		if err != nil {
+		if err = initSystem.Install(); err != nil {
 			log.Fatalf("[install] Error: %s", err)
 		}
-		if !installed {
-			log.Fatalf("[install] Binaries not found in install dir. Exiting.")
-		}
-
-		if err := service.WriteEnvironmentFile(&etcdAdmConfig); err != nil {
-			log.Fatalf("[configure] Error: %s", err)
-		}
-		if err := service.WriteUnitFile(&etcdAdmConfig); err != nil {
+		if err = initSystem.Configure(); err != nil {
 			log.Fatalf("[configure] Error: %s", err)
 		}
 		if err := initSystem.EnableAndStartService(constants.UnitFileBaseName); err != nil {
@@ -196,7 +168,7 @@ var joinCmd = &cobra.Command{
 		if err != nil {
 			log.Printf("[health] Error checking health: %v", err)
 		}
-		ctx, cancel = context.WithTimeout(context.Background(), constants.DefaultEtcdRequestTimeout)
+		ctx, cancel = context.WithTimeout(context.Background(), initSystem.StartupTimeout())
 		_, err = client.Get(ctx, constants.EtcdHealthCheckKey)
 		cancel()
 		// Healthy because the cluster reaches consensus for the get request,
@@ -219,4 +191,6 @@ func init() {
 	joinCmd.PersistentFlags().StringVar(&etcdAdmConfig.InstallDir, "install-dir", constants.DefaultInstallDir, "install directory")
 	joinCmd.PersistentFlags().StringArrayVar(&etcdAdmConfig.EtcdDiskPriorities, "disk-priorities", constants.DefaultEtcdDiskPriorities, "Setting etcd disk priority")
 	joinCmd.PersistentFlags().BoolVar(&etcdAdmConfig.Retry, "retry", true, "Enable or disable backoff retry when join etcd member to cluster")
+	joinCmd.PersistentFlags().StringVar((*string)(&etcdAdmConfig.InitSystem), "init-system", string(apis.Systemd), "init system type (systemd or kubelet)")
+	joinCmd.PersistentFlags().StringVar(&etcdAdmConfig.ImageRepository, "image-repository", constants.DefaultImageRepository, "image repository when using kubelet init system")
 }
diff --git a/cmd/reset.go b/cmd/reset.go
index 3105c24a..b345c52b 100644
--- a/cmd/reset.go
+++ b/cmd/reset.go
@@ -44,7 +44,7 @@ var resetCmd = &cobra.Command{
 			log.Fatalf("[defaults] Error: %s", err)
 		}
 
-		initSystem, err := initsystem.GetInitSystem()
+		initSystem, err := initsystem.GetInitSystem(&etcdAdmConfig)
 		if err != nil {
 			log.Fatalf("[initsystem] Error detecting the init system: %s", err)
 		}
diff --git a/constants/constants.go b/constants/constants.go
index 5bbca2f5..79031dda 100644
--- a/constants/constants.go
+++ b/constants/constants.go
@@ -23,9 +23,10 @@ const (
 	DefaultVersion    = "3.5.0"
 	DefaultInstallDir = "/opt/bin/"
 
-	DefaultReleaseURL     = "https://github.com/coreos/etcd/releases/download"
-	DefaultBindAddressv4  = "0.0.0.0"
-	DefaultCertificateDir = "/etc/etcd/pki"
+	DefaultReleaseURL      = "https://github.com/coreos/etcd/releases/download"
+	DefaultImageRepository = "quay.io/coreos/etcd"
+	DefaultBindAddressv4   = "0.0.0.0"
+	DefaultCertificateDir  = "/etc/etcd/pki"
 
 	UnitFileBaseName = "etcd.service"
 	UnitFile         = "/etc/systemd/system/etcd.service"
diff --git a/initsystem/initsystem.go b/initsystem/initsystem.go
index ace923e2..80e2b461 100644
--- a/initsystem/initsystem.go
+++ b/initsystem/initsystem.go
@@ -19,21 +19,39 @@ package initsystem
 import (
 	"fmt"
 	"os/exec"
+	"time"
+
+	"sigs.k8s.io/etcdadm/apis"
+	"sigs.k8s.io/etcdadm/initsystem/kubelet"
 )
 
 // InitSystem is the interface that describe behaviors of an init system
 type InitSystem interface {
+	Install() error
+	Configure() error
 	IsActive(service string) (bool, error)
 	EnableAndStartService(service string) error
 	DisableAndStopService(service string) error
+	StartupTimeout() time.Duration
 }
 
 // GetInitSystem returns an InitSystem for the current system, or error
 // if we cannot detect a supported init system.
-func GetInitSystem() (InitSystem, error) {
+func GetInitSystem(config *apis.EtcdAdmConfig) (InitSystem, error) {
+	switch config.InitSystem {
+	case apis.Systemd:
+		return systemd(config)
+	case apis.Kubelet:
+		return kubelet.New(config), nil
+	default:
+		return nil, fmt.Errorf("invalid init system %s", config.InitSystem)
+	}
+}
+
+func systemd(config *apis.EtcdAdmConfig) (InitSystem, error) {
 	_, err := exec.LookPath("systemctl")
 	if err == nil {
-		return &SystemdInitSystem{}, nil
+		return &SystemdInitSystem{etcdAdmConfig: config}, nil
 	}
 
 	return nil, fmt.Errorf("systemd not detected; ensure that `systemctl` is in the PATH")
diff --git a/initsystem/kubelet/initsystem.go b/initsystem/kubelet/initsystem.go
index 288837eb..d907753a 100644
--- a/initsystem/kubelet/initsystem.go
+++ b/initsystem/kubelet/initsystem.go
@@ -22,6 +22,7 @@ import (
 	"os"
 	"sort"
 	"strings"
+	"time"
 
 	"k8s.io/klog"
 	"sigs.k8s.io/etcdadm/apis"
@@ -29,6 +30,14 @@ import (
 	"sigs.k8s.io/yaml"
 )
 
+const DefaultEtcdStartupTimeout = 30 * time.Second
+
+func New(config *apis.EtcdAdmConfig) *InitSystem {
+	return &InitSystem{
+		desiredConfig: config,
+	}
+}
+
 // InitSystem runs etcd under the kubelet
 type InitSystem struct {
 	desiredConfig *apis.EtcdAdmConfig
@@ -160,7 +169,7 @@ func (s *InitSystem) buildPod(name string, cfg *apis.EtcdAdmConfig) (*pod, error
 		"memory": "100Mi",
 	}
 
-	container.Image = "k8s.gcr.io/etcd:" + cfg.Version
+	container.Image = s.image()
 	container.Command = []string{"etcd"}
 
 	for k, v := range env {
@@ -229,6 +238,10 @@ func (s *InitSystem) buildPod(name string, cfg *apis.EtcdAdmConfig) (*pod, error
 	return pod, nil
 }
 
+func (s *InitSystem) image() string {
+	return fmt.Sprintf("%s:v%s", s.desiredConfig.ImageRepository, s.desiredConfig.Version)
+}
+
 // pod (and the other types) are a minimal version of the k8s Pod API
 // This avoids having to pull in all of the kubernetes API and infrastructure
 type pod struct {
@@ -289,3 +302,19 @@ type hostPath struct {
 	Path string `json:"path"`
 	Type string `json:"type"`
 }
+
+func (s InitSystem) Install() error {
+	// TODO: preload etcd image to make start up times more reliable?
+	return nil
+}
+
+// Configure boostraps the necessary configuration files for the etcd service
+func (s InitSystem) Configure() error {
+	// TODO: move manifest generation here?
+	return nil
+}
+
+// StartupTimeout defines the max time that the system should wait for etcd to be up
+func (s InitSystem) StartupTimeout() time.Duration {
+	return DefaultEtcdStartupTimeout
+}
diff --git a/initsystem/systemd.go b/initsystem/systemd.go
index 5d027038..ab84d499 100644
--- a/initsystem/systemd.go
+++ b/initsystem/systemd.go
@@ -17,12 +17,27 @@ limitations under the License.
 package initsystem
 
 import (
+	"errors"
 	"fmt"
+	"html/template"
+	"log"
+	"os"
 	"os/exec"
+	"path/filepath"
+	"time"
+
+	"sigs.k8s.io/etcdadm/apis"
+	"sigs.k8s.io/etcdadm/binary"
+	"sigs.k8s.io/etcdadm/constants"
+	"sigs.k8s.io/etcdadm/service"
 )
 
+const DefaultEtcdStartupTimeout = 5 * time.Second
+
 // SystemdInitSystem defines systemd init system
-type SystemdInitSystem struct{}
+type SystemdInitSystem struct {
+	etcdAdmConfig *apis.EtcdAdmConfig
+}
 
 func (s SystemdInitSystem) reloadSystemd() error {
 	if err := exec.Command("systemctl", "daemon-reload").Run(); err != nil {
@@ -148,3 +163,73 @@ func (s SystemdInitSystem) isEnabled(service string) (bool, error) {
 	}
 	return true, nil
 }
+
+// Install downloads the necessary bianries (if not in cache already) in moves them to the right directory
+func (s SystemdInitSystem) Install() error {
+	inCache, err := binary.InstallFromCache(s.etcdAdmConfig.Version, s.etcdAdmConfig.InstallDir, s.etcdAdmConfig.CacheDir)
+	if err != nil {
+		return fmt.Errorf("artifact could not be installed from cache: %w", err)
+	}
+	if !inCache {
+		log.Printf("[install] Artifact not found in cache. Trying to fetch from upstream: %w", s.etcdAdmConfig.ReleaseURL)
+		if err = binary.Download(s.etcdAdmConfig.ReleaseURL, s.etcdAdmConfig.Version, s.etcdAdmConfig.CacheDir); err != nil {
+			return fmt.Errorf("unable to fetch artifact from upstream: %w", err)
+		}
+		// Try installing binaries from cache now
+		inCache, err := binary.InstallFromCache(s.etcdAdmConfig.Version, s.etcdAdmConfig.InstallDir, s.etcdAdmConfig.CacheDir)
+		if err != nil {
+			return fmt.Errorf("artifact could not be installed from cache: %w", err)
+		}
+		if !inCache {
+			return errors.New("artifact not found in cache after download")
+		}
+	}
+	installed, err := binary.IsInstalled(s.etcdAdmConfig.Version, s.etcdAdmConfig.InstallDir)
+	if err != nil {
+		return fmt.Errorf("failed checking if binary is installed: %w", err)
+	}
+	if !installed {
+		return fmt.Errorf("binaries not found in install dir")
+	}
+
+	return nil
+}
+
+// Configure boostraps the necessary configuration files for the etcd service
+func (s SystemdInitSystem) Configure() error {
+	if err := service.WriteEnvironmentFile(s.etcdAdmConfig); err != nil {
+		return fmt.Errorf("failed writing environment file for etcd service: %w", err)
+	}
+
+	if err := s.writeUnitFile(); err != nil {
+		return err
+	}
+
+	return nil
+}
+
+// writeUnitFile writes etcd service unit file
+func (s SystemdInitSystem) writeUnitFile() error {
+	t := template.Must(template.New("unit").Parse(constants.UnitFileTemplate))
+
+	unitFileDir := filepath.Dir(s.etcdAdmConfig.UnitFile)
+	if err := os.MkdirAll(unitFileDir, 0755); err != nil {
+		return fmt.Errorf("unable to create unit file directory %q: %s", unitFileDir, err)
+	}
+
+	f, err := os.OpenFile(s.etcdAdmConfig.UnitFile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
+	if err != nil {
+		return fmt.Errorf("unable to open the etcd service unit file %s: %s", s.etcdAdmConfig.UnitFile, err)
+	}
+	defer f.Close()
+
+	if err := t.Execute(f, s.etcdAdmConfig); err != nil {
+		return fmt.Errorf("unable to apply etcd environment: %s", err)
+	}
+	return nil
+}
+
+// StartupTimeout defines the max time that the system should wait for etcd to be up
+func (s SystemdInitSystem) StartupTimeout() time.Duration {
+	return DefaultEtcdStartupTimeout
+}
diff --git a/service/unit.go b/service/unit.go
index 76086974..f06e73b6 100644
--- a/service/unit.go
+++ b/service/unit.go
@@ -63,25 +63,3 @@ func BuildEnvironment(cfg *apis.EtcdAdmConfig) ([]byte, error) {
 	}
 	return b.Bytes(), nil
 }
-
-// WriteUnitFile writes etcd service unit file
-// TODO: Move to systemd-specific area
-func WriteUnitFile(cfg *apis.EtcdAdmConfig) error {
-	t := template.Must(template.New("unit").Parse(constants.UnitFileTemplate))
-
-	unitFileDir := filepath.Dir(cfg.UnitFile)
-	if err := os.MkdirAll(unitFileDir, 0755); err != nil {
-		return fmt.Errorf("unable to create unit file directory %q: %s", unitFileDir, err)
-	}
-
-	f, err := os.OpenFile(cfg.UnitFile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
-	if err != nil {
-		return fmt.Errorf("unable to open the etcd service unit file %s: %s", cfg.UnitFile, err)
-	}
-	defer f.Close()
-
-	if err := t.Execute(f, cfg); err != nil {
-		return fmt.Errorf("unable to apply etcd environment: %s", err)
-	}
-	return nil
-}
-- 
2.25.1

