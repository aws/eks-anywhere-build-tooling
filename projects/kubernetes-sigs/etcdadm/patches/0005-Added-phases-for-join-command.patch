From ffe87a4b5242d06c050806bd82a6bb2ed01127a9 Mon Sep 17 00:00:00 2001
From: Guillermo Gaston <gaslor@amazon.com>
Date: Wed, 4 Aug 2021 11:25:04 +0000
Subject: [PATCH 5/9] Added phases for join command

---
 apis/config.go |   2 +
 cmd/init.go    |  26 ++--
 cmd/join.go    | 341 ++++++++++++++++++++++++++++---------------------
 cmd/phases.go  |  20 +--
 4 files changed, 226 insertions(+), 163 deletions(-)

diff --git a/apis/config.go b/apis/config.go
index 3eddb02b..7f2d77e2 100644
--- a/apis/config.go
+++ b/apis/config.go
@@ -92,6 +92,8 @@ type EtcdAdmConfig struct {
 	Retry bool
 
 	InitSystem InitSystem
+
+	Endpoint string
 }
 
 // InitSystem represents the different types of init system
diff --git a/cmd/init.go b/cmd/init.go
index 1aa14023..8ecf2742 100644
--- a/cmd/init.go
+++ b/cmd/init.go
@@ -59,7 +59,7 @@ func newInitCmd(runner *runner) *cobra.Command {
 		Use:   "init",
 		Short: "Initialize a new etcd cluster",
 		Run: func(cmd *cobra.Command, args []string) {
-			if err := runner.run(); err != nil {
+			if err := runner.run(cmd, args); err != nil {
 				log.Fatal(err)
 			}
 		},
@@ -67,21 +67,22 @@ func newInitCmd(runner *runner) *cobra.Command {
 }
 
 func newInitRunner() *runner {
-	runner := newRunner(setup)
+	runner := newRunner(initPhasesSetup)
 	runner.registerPhases(
-		install(),
+		initInstall(),
 		certificates(),
 		snapshot(),
 		configure(),
-		start(),
+		initStart(),
 		etcdctl(),
 		healthcheck(),
+		postInitInstructions(),
 	)
 
 	return runner
 }
 
-func setup() (*phaseInput, error) {
+func initPhasesSetup(_ *cobra.Command, _ []string) (*phaseInput, error) {
 	apis.SetDefaults(&etcdAdmConfig)
 	if err := apis.SetInitDynamicDefaults(&etcdAdmConfig); err != nil {
 		return nil, fmt.Errorf("[defaults] error setting init dynamic defaults: %w", err)
@@ -100,7 +101,7 @@ func setup() (*phaseInput, error) {
 	return in, nil
 }
 
-func install() phase {
+func initInstall() phase {
 	return &singlePhase{
 		phaseName: "install",
 		runFunc: func(in *phaseInput) error {
@@ -165,7 +166,7 @@ func configure() phase {
 	}
 }
 
-func start() phase {
+func initStart() phase {
 	return &singlePhase{
 		phaseName: "start",
 		runFunc: func(in *phaseInput) error {
@@ -214,6 +215,15 @@ func healthcheck() phase {
 				return fmt.Errorf("local etcd endpoint is unhealthy: %w", err)
 			}
 
+			return nil
+		},
+	}
+}
+
+func postInitInstructions() phase {
+	return &singlePhase{
+		phaseName: "post-init-instructions",
+		runFunc: func(in *phaseInput) error {
 			// Output etcdadm join command
 			// TODO print all advertised client URLs (first, join must parse than one endpoint)
 			log.Println("To add another member to the cluster, copy the CA cert/key to its certificate dir and run:")
@@ -221,5 +231,5 @@ func healthcheck() phase {
 
 			return nil
 		},
-	}
+	}	
 }
diff --git a/cmd/join.go b/cmd/join.go
index b1108162..09242e3f 100644
--- a/cmd/join.go
+++ b/cmd/join.go
@@ -18,6 +18,7 @@ package cmd
 
 import (
 	"context"
+	"fmt"
 	"net/url"
 	"os"
 
@@ -25,163 +26,18 @@ import (
 
 	"github.com/coreos/etcd/etcdserver/etcdserverpb"
 
-	"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
 	"sigs.k8s.io/etcdadm/apis"
-	"sigs.k8s.io/etcdadm/certs"
 	"sigs.k8s.io/etcdadm/constants"
 	"sigs.k8s.io/etcdadm/etcd"
 	"sigs.k8s.io/etcdadm/initsystem"
-	"sigs.k8s.io/etcdadm/service"
 
 	"github.com/spf13/cobra"
 	"k8s.io/apimachinery/pkg/util/wait"
 )
 
-var joinCmd = &cobra.Command{
-	Use:   "join",
-	Short: "Join an existing etcd cluster",
-	Args:  cobra.MinimumNArgs(1),
-	Run: func(cmd *cobra.Command, args []string) {
-		endpoint := args[0]
-		if _, err := url.Parse(endpoint); err != nil {
-			log.Fatalf("Error: endpoint %q must be a valid URL: %s", endpoint, err)
-		}
-
-		apis.SetDefaults(&etcdAdmConfig)
-		if err := apis.SetJoinDynamicDefaults(&etcdAdmConfig); err != nil {
-			log.Fatalf("[defaults] Error: %s", err)
-		}
-
-		initSystem, err := initsystem.GetInitSystem(&etcdAdmConfig)
-		if err != nil {
-			log.Fatalf("[initsystem] Error detecting the init system: %s", err)
-		}
-
-		if err := initSystem.DisableAndStopService(constants.UnitFileBaseName); err != nil {
-			log.Fatalf("[install] Error disabling and stopping etcd service: %s", err)
-		}
-
-		// cert management
-		if err := certs.CreatePKIAssets(&etcdAdmConfig); err != nil {
-			log.Fatalf("[certificates] Error: %s", err)
-		}
-
-		var localMember *etcdserverpb.Member
-		var members []*etcdserverpb.Member
-		log.Println("[membership] Checking if this member was added")
-		client, err := etcd.ClientForEndpoint(endpoint, &etcdAdmConfig)
-		if err != nil {
-			log.Fatalf("[membership] Error checking membership: %v", err)
-		}
-		ctx, cancel := context.WithTimeout(context.Background(), constants.DefaultEtcdRequestTimeout)
-		mresp, err := client.MemberList(ctx)
-		cancel()
-		if err != nil {
-			log.Fatalf("[membership] Error listing members: %v", err)
-		}
-		members = mresp.Members
-		localMember, ok := etcd.MemberForPeerURLs(members, etcdAdmConfig.InitialAdvertisePeerURLs.StringSlice())
-		if !ok {
-			log.Printf("[membership] Member was not added")
-			log.Printf("Removing existing data dir %q", etcdAdmConfig.DataDir)
-			os.RemoveAll(etcdAdmConfig.DataDir)
-			log.Println("[membership] Adding member")
-
-			var lastErr error
-			retrySteps := 1
-			if etcdAdmConfig.Retry {
-				retrySteps = constants.DefaultBackOffSteps
-			}
-
-			// Exponential backoff for MemberAdd (values exclude jitter):
-			// If --retry=false, add member only try one times, otherwise try five times.
-			// The backoff duration is 0, 2, 4, 8, 16 s
-			opts := wait.Backoff{
-				Duration: constants.DefaultBackOffDuration,
-				Steps:    retrySteps,
-				Factor:   constants.DefaultBackOffFactor,
-				Jitter:   0.1,
-			}
-			err := wait.ExponentialBackoff(opts, func() (bool, error) {
-				ctx, cancel := context.WithTimeout(context.Background(), constants.DefaultEtcdRequestTimeout)
-				mresp, err := client.MemberAdd(ctx, etcdAdmConfig.InitialAdvertisePeerURLs.StringSlice())
-				cancel()
-				if err != nil {
-					log.Warningf("[membership] Error adding member: %v, will retry after %s.", err, opts.Step())
-					lastErr = err
-					return false, nil
-				}
-				localMember = mresp.Member
-				members = mresp.Members
-				return true, nil
-			})
-			if err != nil {
-				log.Fatalf("[membership] Error adding member: %v", lastErr)
-			}
-		} else {
-			log.Println("[membership] Member was added")
-		}
-
-		log.Println("[membership] Checking if member was started")
-		if !etcd.Started(localMember) {
-			log.Println("[membership] Member was not started")
-			log.Printf("[membership] Removing existing data dir %q", etcdAdmConfig.DataDir)
-			os.RemoveAll(etcdAdmConfig.DataDir)
-
-			// To derive the initial cluster string, add the name and peerURLs to the local member
-			localMember.Name = etcdAdmConfig.Name
-			localMember.PeerURLs = etcdAdmConfig.InitialAdvertisePeerURLs.StringSlice()
-
-			var desiredMembers []*etcdserverpb.Member
-			for _, m := range members {
-				if m.ID == localMember.ID {
-					continue
-				}
-				desiredMembers = append(desiredMembers, m)
-			}
-			desiredMembers = append(desiredMembers, localMember)
-			etcdAdmConfig.InitialCluster = etcd.InitialClusterFromMembers(desiredMembers)
-		} else {
-			log.Println("[membership] Member was started")
-			log.Printf("[membership] Keeping existing data dir %q", etcdAdmConfig.DataDir)
-			etcdAdmConfig.InitialCluster = etcd.InitialClusterFromMembers(members)
-		}
-
-		if err = initSystem.Install(); err != nil {
-			log.Fatalf("[install] Error: %s", err)
-		}
-		if err = initSystem.Configure(); err != nil {
-			log.Fatalf("[configure] Error: %s", err)
-		}
-		if err := initSystem.EnableAndStartService(constants.UnitFileBaseName); err != nil {
-			log.Fatalf("[start] Error: %s", err)
-		}
-		if err := service.WriteEtcdctlEnvFile(&etcdAdmConfig); err != nil {
-			log.Printf("[configure] Warning: %s", err)
-		}
-		if err := service.WriteEtcdctlShellWrapper(&etcdAdmConfig); err != nil {
-			log.Printf("[configure] Warning: %s", err)
-		}
-
-		log.Println("[health] Checking local etcd endpoint health")
-		client, err = etcd.ClientForEndpoint(etcdAdmConfig.LoopbackClientURL.String(), &etcdAdmConfig)
-		if err != nil {
-			log.Printf("[health] Error checking health: %v", err)
-		}
-		ctx, cancel = context.WithTimeout(context.Background(), initSystem.StartupTimeout())
-		_, err = client.Get(ctx, constants.EtcdHealthCheckKey)
-		cancel()
-		// Healthy because the cluster reaches consensus for the get request,
-		// even if permission (to get the key) is denied.
-		if err == nil || err == rpctypes.ErrPermissionDenied {
-			log.Println("[health] Local etcd endpoint is healthy")
-		} else {
-			log.Fatalf("[health] Local etcd endpoint is unhealthy: %v", err)
-		}
-	},
-}
-
 func init() {
+	runner := newJoinRunner()
+	joinCmd := newJoinCmd(runner)
 	rootCmd.AddCommand(joinCmd)
 	joinCmd.PersistentFlags().StringVar(&etcdAdmConfig.Name, "name", "", "etcd member name")
 	joinCmd.PersistentFlags().StringVar(&etcdAdmConfig.Version, "version", constants.DefaultVersion, "etcd version")
@@ -193,4 +49,195 @@ func init() {
 	joinCmd.PersistentFlags().BoolVar(&etcdAdmConfig.Retry, "retry", true, "Enable or disable backoff retry when join etcd member to cluster")
 	joinCmd.PersistentFlags().StringVar((*string)(&etcdAdmConfig.InitSystem), "init-system", string(apis.Systemd), "init system type (systemd or kubelet)")
 	joinCmd.PersistentFlags().StringVar(&etcdAdmConfig.ImageRepository, "image-repository", constants.DefaultImageRepository, "image repository when using kubelet init system")
+
+	runner.registerPhasesAsSubcommands(joinCmd)
+}
+
+func newJoinCmd(runner *runner) *cobra.Command {
+	return &cobra.Command{
+		Use:   "join",
+		Short: "Join an existing etcd cluster",
+		Args:  cobra.MinimumNArgs(1),
+		Run: func(cmd *cobra.Command, args []string) {
+			if err := runner.run(cmd, args); err != nil {
+				log.Fatal(err)
+			}
+		},
+	}
+}
+
+func newJoinRunner() *runner {
+	runner := newRunner(joinPhasesSetup)
+	runner.registerPhases(
+		stop(),
+		certificates(),
+		membership(),
+		joinInstall(),
+		configure(),
+		joinStart(),
+		etcdctl(),
+		healthcheck(),
+	)
+
+	return runner
+}
+
+func joinPhasesSetup(cmd *cobra.Command, args []string) (*phaseInput, error) {
+	endpoint := args[0]
+	if _, err := url.Parse(endpoint); err != nil {
+		return nil, fmt.Errorf("endpoint %q must be a valid URL: %s", endpoint, err)
+	}
+	etcdAdmConfig.Endpoint = endpoint
+
+	apis.SetDefaults(&etcdAdmConfig)
+	if err := apis.SetJoinDynamicDefaults(&etcdAdmConfig); err != nil {
+		return nil, fmt.Errorf("[defaults] error setting join dynamic defaults: %w", err)
+	}
+
+	initSystem, err := initsystem.GetInitSystem(&etcdAdmConfig)
+	if err != nil {
+		return nil, fmt.Errorf("[initsystem] error detecting the init system: %w", err)
+	}
+
+	in := &phaseInput{
+		initSystem:    initSystem,
+		etcdAdmConfig: &etcdAdmConfig,
+	}
+
+	return in, nil
+}
+
+func stop() phase {
+	return &singlePhase{
+		phaseName: "stop",
+		runFunc: func(in *phaseInput) error {
+			if err := in.initSystem.DisableAndStopService(constants.UnitFileBaseName); err != nil {
+				return fmt.Errorf("error disabling and stopping etcd service: %w", err)
+			}
+
+			return nil
+		},
+	}
+}
+
+func membership() phase {
+	return &singlePhase{
+		phaseName: "membership",
+		runFunc: func(in *phaseInput) error {
+			if in.etcdAdmConfig.InitialCluster != "" {
+				// we already run this phase
+				return nil
+			}
+
+			var localMember *etcdserverpb.Member
+			var members []*etcdserverpb.Member
+			log.Println("[membership] Checking if this member was added")
+			client, err := etcd.ClientForEndpoint(in.etcdAdmConfig.Endpoint, in.etcdAdmConfig)
+			if err != nil {
+				return fmt.Errorf("error checking membership: %v", err)
+			}
+			ctx, cancel := context.WithTimeout(context.Background(), constants.DefaultEtcdRequestTimeout)
+			mresp, err := client.MemberList(ctx)
+			cancel()
+			if err != nil {
+				return fmt.Errorf("error listing members: %v", err)
+			}
+			members = mresp.Members
+			localMember, ok := etcd.MemberForPeerURLs(members, in.etcdAdmConfig.InitialAdvertisePeerURLs.StringSlice())
+			if !ok {
+				log.Printf("[membership] Member was not added")
+				log.Printf("Removing existing data dir %q", in.etcdAdmConfig.DataDir)
+				os.RemoveAll(in.etcdAdmConfig.DataDir)
+				log.Println("[membership] Adding member")
+
+				var lastErr error
+				retrySteps := 1
+				if in.etcdAdmConfig.Retry {
+					retrySteps = constants.DefaultBackOffSteps
+				}
+
+				// Exponential backoff for MemberAdd (values exclude jitter):
+				// If --retry=false, add member only try one times, otherwise try five times.
+				// The backoff duration is 0, 2, 4, 8, 16 s
+				opts := wait.Backoff{
+					Duration: constants.DefaultBackOffDuration,
+					Steps:    retrySteps,
+					Factor:   constants.DefaultBackOffFactor,
+					Jitter:   0.1,
+				}
+				err := wait.ExponentialBackoff(opts, func() (bool, error) {
+					ctx, cancel := context.WithTimeout(context.Background(), constants.DefaultEtcdRequestTimeout)
+					mresp, err := client.MemberAdd(ctx, in.etcdAdmConfig.InitialAdvertisePeerURLs.StringSlice())
+					cancel()
+					if err != nil {
+						log.Warningf("[membership] Error adding member: %v, will retry after %s.", err, opts.Step())
+						lastErr = err
+						return false, nil
+					}
+					localMember = mresp.Member
+					members = mresp.Members
+					return true, nil
+				})
+				if err != nil {
+					return fmt.Errorf("error adding member: %v", lastErr)
+				}
+			} else {
+				log.Println("[membership] Member was added")
+			}
+
+			log.Println("[membership] Checking if member was started")
+			if !etcd.Started(localMember) {
+				log.Println("[membership] Member was not started")
+				log.Printf("[membership] Removing existing data dir %q", in.etcdAdmConfig.DataDir)
+				os.RemoveAll(in.etcdAdmConfig.DataDir)
+
+				// To derive the initial cluster string, add the name and peerURLs to the local member
+				localMember.Name = in.etcdAdmConfig.Name
+				localMember.PeerURLs = in.etcdAdmConfig.InitialAdvertisePeerURLs.StringSlice()
+
+				var desiredMembers []*etcdserverpb.Member
+				for _, m := range members {
+					if m.ID == localMember.ID {
+						continue
+					}
+					desiredMembers = append(desiredMembers, m)
+				}
+				desiredMembers = append(desiredMembers, localMember)
+				in.etcdAdmConfig.InitialCluster = etcd.InitialClusterFromMembers(desiredMembers)
+			} else {
+				log.Println("[membership] Member was started")
+				log.Printf("[membership] Keeping existing data dir %q", in.etcdAdmConfig.DataDir)
+				in.etcdAdmConfig.InitialCluster = etcd.InitialClusterFromMembers(members)
+			}
+
+			return nil
+		},
+	}
+}
+
+func joinInstall() phase {
+	return &singlePhase{
+		phaseName: "install",
+		runFunc: func(in *phaseInput) error {
+			if err := in.initSystem.Install(); err != nil {
+				return fmt.Errorf("failed installing init system components: %w", err)
+			}
+
+			return nil
+		},
+	}
+}
+
+func joinStart() phase {
+	return &singlePhase{
+		phaseName: "start",
+		prerequisites: []phase{membership()},
+		runFunc: func(in *phaseInput) error {
+			if err := in.initSystem.EnableAndStartService(constants.UnitFileBaseName); err != nil {
+				return fmt.Errorf("error starting etcd: %w", err)
+			}
+
+			return nil
+		},
+	}
 }
diff --git a/cmd/phases.go b/cmd/phases.go
index bba03d6c..fdd6a49f 100644
--- a/cmd/phases.go
+++ b/cmd/phases.go
@@ -23,8 +23,9 @@ type phase interface {
 }
 
 type singlePhase struct {
-	phaseName string
-	runFunc  runFunc
+	phaseName     string
+	runFunc       runFunc
+	prerequisites []phase
 }
 
 func (p *singlePhase) name() string {
@@ -40,7 +41,10 @@ func (p *singlePhase) registerInCommand(cmd *cobra.Command, runner *runner) {
 		Use:   p.phaseName,
 		Short: fmt.Sprintf("Run %s phase", p.phaseName),
 		Run: func(cmd *cobra.Command, args []string) {
-			if err := runner.runPhases(p); err != nil {
+			phases := make([]phase, 0, len(p.prerequisites)+1)
+			phases = append(phases, p.prerequisites...)
+			phases = append(phases, p)
+			if err := runner.runPhases(cmd, args, phases...); err != nil {
 				log.Fatal(err)
 			}
 		},
@@ -48,7 +52,7 @@ func (p *singlePhase) registerInCommand(cmd *cobra.Command, runner *runner) {
 	cmd.AddCommand(phaseCmd)
 }
 
-type initFunc func() (*phaseInput, error)
+type initFunc func(cmd *cobra.Command, args []string) (*phaseInput, error)
 
 type runner struct {
 	phases []phase
@@ -66,12 +70,12 @@ func (r *runner) registerPhases(phases ...phase) {
 	r.phases = append(r.phases, phases...)
 }
 
-func (r *runner) run() error {
-	return r.runPhases(r.phases...)
+func (r *runner) run(cmd *cobra.Command, args []string) error {
+	return r.runPhases(cmd, args, r.phases...)
 }
 
-func (r *runner) runPhases(phases ...phase) error {
-	phaseInput, err := r.init()
+func (r *runner) runPhases(cmd *cobra.Command, args []string, phases ...phase) error {
+	phaseInput, err := r.init(cmd, args)
 	if err != nil {
 		return err
 	}
-- 
2.25.1

