From fc6ed013f61ce370ea9bb89d972c70acae247aa9 Mon Sep 17 00:00:00 2001
From: Jackson West <jgw@amazon.com>
Date: Thu, 29 Jun 2023 00:56:53 -0700
Subject: [PATCH 1/3] Switch to AL2 base image for node image

---
 images/base/Dockerfile                        | 231 +++++++-----------
 images/base/files/usr/local/bin/clean-install |  10 +-
 2 files changed, 99 insertions(+), 142 deletions(-)

diff --git a/images/base/Dockerfile b/images/base/Dockerfile
index eb3f95ad..0ab8ab87 100644
--- a/images/base/Dockerfile
+++ b/images/base/Dockerfile
@@ -17,11 +17,27 @@
 # For systemd + docker configuration used below, see the following references:
 # https://systemd.io/CONTAINER_INTERFACE/
 
-# start from debian slim, this image is reasonably small as a starting point
-# for a kubernetes node image, it doesn't contain much (anything?) we don't need
-# this stage will install basic files and packages
-ARG BASE_IMAGE=debian:bullseye-slim
-FROM $BASE_IMAGE as base
+# start from ubuntu, this image is reasonably small as a starting point
+# for a kubernetes node image, it doesn't contain much we don't need
+ARG BASE_IMAGE
+ARG BUILDER_IMAGE
+FROM $BASE_IMAGE as base-amd64
+
+ARG CRICTL_AMD64_URL
+ARG CRICTL_AMD64_SHA256SUM_URL
+ARG CRICTL_URL=${CRICTL_AMD64_URL}
+ARG CRICTL_SHA256SUM_URL=${CRICTL_AMD64_SHA256SUM_URL}
+
+
+FROM $BASE_IMAGE as base-arm64
+
+ARG CRICTL_ARM64_URL
+ARG CRICTL_ARM64_SHA256SUM_URL
+ARG CRICTL_URL=${CRICTL_ARM64_URL}
+ARG CRICTL_SHA256SUM_URL=${CRICTL_ARM64_SHA256SUM_URL}
+
+ARG TARGETARCH
+FROM base-$TARGETARCH as base
 
 # copy in static files
 # all scripts are 0755 (rwx r-x r-x)
@@ -71,10 +87,11 @@ COPY --chmod=0644 files/etc/systemd/system/kubelet.service.d/* /etc/systemd/syst
 RUN echo "Installing Packages ..." \
     && DEBIAN_FRONTEND=noninteractive clean-install \
       systemd \
-      conntrack iptables iproute2 ethtool util-linux mount ebtables kmod \
-      libseccomp2 pigz fuse-overlayfs \
-      nfs-common open-iscsi \
+      conntrack iptables iproute ethtool util-linux ebtables kmod \
+      libseccomp pigz \
+      nfs-utils \
       bash ca-certificates curl jq procps \
+      containerd  hostname lockdev rsync sudo tar which \
     && find /lib/systemd/system/sysinit.target.wants/ -name "systemd-tmpfiles-setup.service" -delete \
     && rm -f /lib/systemd/system/multi-user.target.wants/* \
     && rm -f /etc/systemd/system/*.wants/* \
@@ -83,148 +100,90 @@ RUN echo "Installing Packages ..." \
     && rm -f /lib/systemd/system/sockets.target.wants/*initctl* \
     && rm -f /lib/systemd/system/basic.target.wants/* \
     && echo "ReadKMsg=no" >> /etc/systemd/journald.conf \
-    && ln -s "$(which systemd)" /sbin/init
+    # already set on al23
+    # && ln -s "$(which systemd)" /sbin/init    
+    # avoid runaway agetty processes most likely due to al2 being based on older centos 7
+    # leaving for now, but al23 may not be affected by this issue
+    && systemctl mask getty@tty1.service
+    
 
 RUN echo "Enabling services ... " \
     && systemctl enable kubelet.service \
     && systemctl enable containerd.service \
     && systemctl enable undo-mount-hacks.service
 
+RUN echo "Installing crictl ..." \   
+    && curl -sSL --retry 5 --output /tmp/crictl.${TARGETARCH}.tgz "${CRICTL_URL}" \
+    && echo "$(curl $CRICTL_SHA256SUM_URL | cut -d ' ' -f1)  /tmp/crictl.${TARGETARCH}.tgz" | tee /tmp/crictl.sha256 \
+    && sha256sum -c /tmp/crictl.sha256 \
+    && rm -f /tmp/crictl.sha256 \
+    && tar -C /usr/local/bin -xzvf /tmp/crictl.${TARGETARCH}.tgz \
+    && rm -rf /tmp/crictl.${TARGETARCH}.tgz 
+
 RUN echo "Ensuring /etc/kubernetes/manifests" \
     && mkdir -p /etc/kubernetes/manifests
 
-# shared stage to setup go version for building binaries
-# NOTE we will be cross-compiling for performance reasons
-# This is also why we start again FROM the same base image but a different
-# platform and only the files needed for building
-# We will copy the built binaries from later stages to the final stage(s)
-FROM --platform=$BUILDPLATFORM $BASE_IMAGE as go-build
-COPY --chmod=0755 files/usr/local/bin/* /usr/local/bin/
-COPY --chmod=0755 scripts/third_party/gimme/gimme /usr/local/bin/
-COPY --chmod=0755 scripts/target-cc /usr/local/bin/
-# tools needed at build-time only
-# first ensure we can install packages for both architectures
-RUN dpkg --add-architecture arm64 && dpkg --add-architecture amd64 \
-    && clean-install bash ca-certificates curl git make pkg-config \
-    crossbuild-essential-amd64 crossbuild-essential-arm64 \
-    libseccomp-dev:amd64 libseccomp-dev:arm64
-# set by makefile to .go-version
-ARG GO_VERSION
-RUN eval "$(gimme "${GO_VERSION}")" \
-    && GOBIN=/usr/local/bin go install github.com/google/go-licenses@latest
-
-
-# stage for building containerd
-FROM go-build as build-containerd
-ARG TARGETARCH GO_VERSION
-ARG CONTAINERD_VERSION="v1.7.1"
-ARG CONTAINERD_CLONE_URL="https://github.com/containerd/containerd"
-# we don't build with optional snapshotters, we never select any of these
-# they're not ideal inside kind anyhow, and we save some disk space
-ARG BUILDTAGS="no_aufs no_zfs no_btrfs no_devmapper"
-RUN git clone --filter=tree:0 "${CONTAINERD_CLONE_URL}" /containerd \
-    && cd /containerd \
-    && git checkout "${CONTAINERD_VERSION}" \
-    && eval "$(gimme "${GO_VERSION}")" \
-    && export GOARCH=$TARGETARCH && export CC=$(target-cc) && export CGO_ENABLED=1 \
-    && make bin/ctr bin/containerd bin/containerd-shim-runc-v2 \
-    && GOARCH=$TARGETARCH go-licenses save --save_path=/_LICENSES \
-        ./cmd/ctr ./cmd/containerd ./cmd/containerd-shim-runc-v2
-
-# stage for building runc
-FROM go-build as build-runc
-ARG TARGETARCH GO_VERSION
-ARG RUNC_VERSION="v1.1.7"
-ARG RUNC_CLONE_URL="https://github.com/opencontainers/runc"
-RUN git clone --filter=tree:0 "${RUNC_CLONE_URL}" /runc \
-    && cd /runc \
-    && git checkout "${RUNC_VERSION}" \
-    && eval "$(gimme "${GO_VERSION}")" \
-    && export GOARCH=$TARGETARCH && export CC=$(target-cc) && export CGO_ENABLED=1 \
-    && make runc \
-    && GOARCH=$TARGETARCH go-licenses save --save_path=/_LICENSES .
-
-# stage for building crictl
-FROM go-build as build-crictl
-ARG TARGETARCH GO_VERSION
-ARG CRI_TOOLS_CLONE_URL="https://github.com/kubernetes-sigs/cri-tools"
-ARG CRICTL_VERSION="v1.27.0"
-RUN git clone --filter=tree:0 "${CRI_TOOLS_CLONE_URL}" /cri-tools \
-    && cd /cri-tools \
-    && git checkout "${CRICTL_VERSION}" \
-    && eval "$(gimme "${GO_VERSION}")" \
-    && export GOARCH=$TARGETARCH && export CC=$(target-cc) && export CGO_ENABLED=1 \
-    && make BUILD_BIN_PATH=./build crictl \
-    && GOARCH=$TARGETARCH go-licenses save --save_path=/_LICENSES ./cmd/crictl
-
-# stage for building cni-plugins
-FROM go-build as build-cni
-ARG TARGETARCH GO_VERSION
-ARG CNI_PLUGINS_VERSION="v1.3.0"
-ARG CNI_PLUGINS_CLONE_URL="https://github.com/containernetworking/plugins"
-RUN git clone --filter=tree:0 "${CNI_PLUGINS_CLONE_URL}" /cni-plugins \
-    && cd /cni-plugins \
-    && git checkout "${CNI_PLUGINS_VERSION}" \
-    && eval "$(gimme "${GO_VERSION}")" \
-    && mkdir ./bin \
-    && export GOARCH=$TARGETARCH && export CC=$(target-cc) && export CGO_ENABLED=1 \
-    && go build -o ./bin/host-local -mod=vendor ./plugins/ipam/host-local \
-    && go build -o ./bin/loopback -mod=vendor ./plugins/main/loopback \
-    && go build -o ./bin/ptp -mod=vendor ./plugins/main/ptp \
-    && go build -o ./bin/portmap -mod=vendor ./plugins/meta/portmap \
-    && GOARCH=$TARGETARCH go-licenses save --save_path=/_LICENSES \
-        ./plugins/ipam/host-local \
-        ./plugins/main/loopback ./plugins/main/ptp \
-        ./plugins/meta/portmap
-
-# stage for building containerd-fuse-overlayfs
-FROM go-build as build-fuse-overlayfs
-ARG TARGETARCH GO_VERSION
-ARG CONTAINERD_FUSE_OVERLAYFS_VERSION="v1.0.5"
-ARG CONTAINERD_FUSE_OVERLAYFS_CLONE_URL="https://github.com/containerd/fuse-overlayfs-snapshotter"
-RUN git clone --filter=tree:0 "${CONTAINERD_FUSE_OVERLAYFS_CLONE_URL}" /fuse-overlayfs-snapshotter \
-    && cd /fuse-overlayfs-snapshotter \
-    && git checkout "${CONTAINERD_FUSE_OVERLAYFS_VERSION}" \
-    && eval "$(gimme "${GO_VERSION}")" \
-    && export GOARCH=$TARGETARCH && export CC=$(target-cc) && export CGO_ENABLED=1 \
-    && make bin/containerd-fuse-overlayfs-grpc \
-    && GOARCH=$TARGETARCH go-licenses save --save_path=/_LICENSES ./cmd/containerd-fuse-overlayfs-grpc
-
-
-# build final image layout from other stages
-FROM base as build
-# copy over containerd build and install
-COPY --from=build-containerd /containerd/bin/containerd /usr/local/bin/
-COPY --from=build-containerd /containerd/bin/ctr /usr/local/bin/
-COPY --from=build-containerd /containerd/bin/containerd-shim-runc-v2 /usr/local/bin/
+# this was removed upstream when they switched to debian
+# keeping since this unit exists in al23
+RUN echo "Adjusting systemd-tmpfiles timer" \
+    && sed -i /usr/lib/systemd/system/systemd-tmpfiles-clean.timer -e 's#OnBootSec=.*#OnBootSec=1min#'
+
 RUN ctr oci spec \
         | jq '.hooks.createContainer[.hooks.createContainer| length] |= . + {"path": "/kind/bin/mount-product-files.sh"}' \
         | jq 'del(.process.rlimits)' \
         > /etc/containerd/cri-base.json \
     && containerd --version
-COPY --from=build-containerd /_LICENSES/* /LICENSES/
-# copy over runc build and install
-COPY --from=build-runc /runc/runc /usr/local/sbin/runc
-RUN runc --version
-COPY --from=build-runc /_LICENSES/* /LICENSES/
-# copy over crictl build and install
-COPY --from=build-crictl /cri-tools/build/crictl /usr/local/bin/
-COPY --from=build-crictl /_LICENSES/* /LICENSES/
-# copy over CNI plugins build and install
-RUN  mkdir -p /opt/cni/bin
-COPY --from=build-cni /cni-plugins/bin/host-local /opt/cni/bin/
-COPY --from=build-cni /cni-plugins/bin/loopback /opt/cni/bin/
-COPY --from=build-cni /cni-plugins/bin/ptp /opt/cni/bin/
-COPY --from=build-cni /cni-plugins/bin/portmap /opt/cni/bin/
-COPY --from=build-cni /_LICENSES/* /LICENSES/
-# copy over containerd-fuse-overlayfs and install
-COPY --from=build-fuse-overlayfs /fuse-overlayfs-snapshotter/bin/containerd-fuse-overlayfs-grpc /usr/local/bin/
-COPY --from=build-fuse-overlayfs /_LICENSES/* /LICENSES/
-
-# squash down to one compressed layer, without any lingering whiteout files etc
-FROM scratch
-COPY --from=build / /
-# add metadata, must be done after the squashing
+
+# force use of al23 provided containerd.service config
+RUN cp /usr/lib/systemd/system/containerd.service /etc/systemd/system/containerd.service
+
+# These targets are basing off the "pushed" verison of the image above which is BUILDER_IMAGE
+# the final base will be eks-distro-base, with the contents from the above copied
+# into it to simulate "scratch" but from one of standard bases
+
+FROM $BUILDER_IMAGE as base-versioned-amd64
+
+ARG CNI_PLUGINS_AMD64_URL
+ARG CNI_PLUGINS_AMD64_SHA256SUM
+ARG CNI_PLUGINS_URL=${CNI_PLUGINS_AMD64_URL}
+ARG CNI_PLUGINS_SHA256SUM=${CNI_PLUGINS_AMD64_SHA256SUM}
+
+
+FROM $BUILDER_IMAGE as base-versioned-arm64
+
+ARG CNI_PLUGINS_ARM64_URL
+ARG CNI_PLUGINS_ARM64_SHA256SUM
+ARG CNI_PLUGINS_URL=${CNI_PLUGINS_ARM64_URL}
+ARG CNI_PLUGINS_SHA256SUM=${CNI_PLUGINS_ARM64_SHA256SUM}
+
+FROM base-versioned-$TARGETARCH as base-versioned-intermediate
+
+COPY --chmod=0755 files/usr/local/bin/* /usr/local/bin/
+COPY --chmod=0644 files/etc/* /etc
+
+RUN echo "Installing CNI plugin binaries ..." \
+    && curl -sSL --retry 5 --output /tmp/cni.${TARGETARCH}.tgz "${CNI_PLUGINS_URL}" \
+    && echo "${CNI_PLUGINS_SHA256SUM}  /tmp/cni.${TARGETARCH}.tgz" | tee /tmp/cni.sha256 \
+    && sha256sum -c /tmp/cni.sha256 \
+    && rm -f /tmp/cni.sha256 \
+    && mkdir -p /opt/cni/bin \
+    && tar -C /opt/cni/bin -xzvf /tmp/cni.${TARGETARCH}.tgz \
+    && rm -rf /tmp/cni.${TARGETARCH}.tgz \
+    && find /opt/cni/bin -type f -not \( \
+         -iname host-local \
+         -o -iname ptp \
+         -o -iname portmap \
+         -o -iname loopback \
+      \) \
+      -delete
+
+
+FROM $BASE_IMAGE as base-versioned
+
+COPY --from=base-versioned-intermediate / /
+
+
+
 # first tell systemd that it is in docker (it will check for the container env)
 # https://systemd.io/CONTAINER_INTERFACE/
 ENV container docker
diff --git a/images/base/files/usr/local/bin/clean-install b/images/base/files/usr/local/bin/clean-install
index b0b861c3..f1d714a6 100755
--- a/images/base/files/usr/local/bin/clean-install
+++ b/images/base/files/usr/local/bin/clean-install
@@ -24,12 +24,10 @@ if [ $# = 0 ]; then
   echo >&2 "No packages specified"
   exit 1
 fi
-
-apt-get update
-apt-get upgrade -y
-apt-get install -y --no-install-recommends "$@"
-apt-get clean -y
+yum install -y "$@"
+yum clean all
 rm -rf \
+   /var/cache/yum/* \
    /var/cache/debconf/* \
    /var/lib/apt/lists/* \
    /var/log/* \
@@ -38,4 +36,4 @@ rm -rf \
    /usr/share/doc/* \
    /usr/share/doc-base/* \
    /usr/share/man/* \
-   /usr/share/local/*
+   /usr/share/local/* || true
-- 
2.40.1

