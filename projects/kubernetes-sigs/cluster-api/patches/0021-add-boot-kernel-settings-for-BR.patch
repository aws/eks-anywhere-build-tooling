From 16ce93adf155f287a10bf2732515b050378a47f0 Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Thu, 23 Mar 2023 01:51:16 -0700
Subject: [PATCH 21/34] add boot kernel settings for BR

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 api/bootstrap/kubeadm/v1beta1/conversion.go   | 19 ++++
 .../kubeadm/v1beta1/kubeadm_types.go          | 10 +++
 .../v1beta1/zz_generated.conversion.go        | 88 ++++++++++++++++---
 .../kubeadm/v1beta1/zz_generated.deepcopy.go  | 27 ++++++
 .../kubeadm/v1beta2/kubeadm_types.go          |  8 ++
 .../kubeadm/v1beta2/zz_generated.deepcopy.go  | 36 ++++++++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 66 ++++++++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 66 ++++++++++++++
 .../internal/bottlerocket/bootstrap.go        | 13 +++
 .../internal/bottlerocket/bootstrap_test.go   | 59 +++++++++++++
 .../internal/bottlerocket/bottlerocket.go     | 24 +++++
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 66 ++++++++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 68 ++++++++++++++
 .../kubeadm/v1alpha4/kubeadm_types.go         |  8 ++
 .../v1alpha4/zz_generated.conversion.go       | 32 +++++++
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go | 36 ++++++++
 16 files changed, 612 insertions(+), 14 deletions(-)

diff --git a/api/bootstrap/kubeadm/v1beta1/conversion.go b/api/bootstrap/kubeadm/v1beta1/conversion.go
index b13fe3bd4..e7938e854 100644
--- a/api/bootstrap/kubeadm/v1beta1/conversion.go
+++ b/api/bootstrap/kubeadm/v1beta1/conversion.go
@@ -744,6 +744,25 @@ func Convert_v1beta2_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(in *bootstra
 	return nil
 }
 
+func Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *bootstrapv1.BottlerocketSettings, out *BottlerocketSettings, _ apimachineryconversion.Scope) error {
+	// Copy the Kubernetes field
+	if in.Kubernetes != nil {
+		out.Kubernetes = &BottlerocketKubernetesSettings{
+			MaxPods:              in.Kubernetes.MaxPods,
+			AllowedUnsafeSysctls: in.Kubernetes.AllowedUnsafeSysctls,
+			ClusterDNSIPs:        in.Kubernetes.ClusterDNSIPs,
+		}
+	}
+	// Copy the Kernel field if it exists in v1beta1
+	if in.Kernel != nil {
+		out.Kernel = &BottlerocketKernelSettings{
+			SysctlSettings: in.Kernel.SysctlSettings,
+		}
+	}
+	// Note: v1beta2 has additional Boot field that doesn't exist in v1beta1, so it's lost during conversion
+	return nil
+}
+
 func Convert_v1beta1_Etcd_To_v1beta2_Etcd(in *Etcd, out *bootstrapv1.Etcd, s apimachineryconversion.Scope) error {
 	if in.Local != nil {
 		if err := Convert_v1beta1_LocalEtcd_To_v1beta2_LocalEtcd(in.Local, &out.Local, s); err != nil {
diff --git a/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go b/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
index 0ddcc0f40..39bc13db7 100644
--- a/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
+++ b/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
@@ -277,6 +277,10 @@ type BottlerocketBootstrapContainer struct {
 type BottlerocketSettings struct {
 	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
 	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+
+	// KernelSettings contains additional kernel settings for Bottlerocket.
+	// +optional
+	Kernel *BottlerocketKernelSettings `json:"kernel,omitempty"`
 }
 
 // BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
@@ -292,6 +296,12 @@ type BottlerocketKubernetesSettings struct {
 	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
 }
 
+// BottlerocketKernelSettings holds the kernel settings for bottlerocket nodes
+type BottlerocketKernelSettings struct {
+	// SysctlSettings defines the kernel sysctl settings to set for bottlerocket nodes.
+	SysctlSettings map[string]string `json:"sysctlSettings,omitempty"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
diff --git a/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go b/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
index a7b66f3bc..92c5fd94c 100644
--- a/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
+++ b/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
@@ -70,6 +70,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketKernelSettings)(nil), (*v1beta2.BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketKernelSettings_To_v1beta2_BottlerocketKernelSettings(a.(*BottlerocketKernelSettings), b.(*v1beta2.BottlerocketKernelSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketKernelSettings)(nil), (*BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(a.(*v1beta2.BottlerocketKernelSettings), b.(*BottlerocketKernelSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*BottlerocketKubernetesSettings)(nil), (*v1beta2.BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(a.(*BottlerocketKubernetesSettings), b.(*v1beta2.BottlerocketKubernetesSettings), scope)
 	}); err != nil {
@@ -85,11 +95,6 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketSettings)(nil), (*BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(a.(*v1beta2.BottlerocketSettings), b.(*BottlerocketSettings), scope)
-	}); err != nil {
-		return err
-	}
 	if err := s.AddGeneratedConversionFunc((*ContainerLinuxConfig)(nil), (*v1beta2.ContainerLinuxConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ContainerLinuxConfig_To_v1beta2_ContainerLinuxConfig(a.(*ContainerLinuxConfig), b.(*v1beta2.ContainerLinuxConfig), scope)
 	}); err != nil {
@@ -530,6 +535,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta2.BottlerocketSettings)(nil), (*BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(a.(*v1beta2.BottlerocketSettings), b.(*BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*v1beta2.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -811,6 +821,26 @@ func autoConvert_v1beta2_BottlerocketHostContainer_To_v1beta1_BottlerocketHostCo
 	return nil
 }
 
+func autoConvert_v1beta1_BottlerocketKernelSettings_To_v1beta2_BottlerocketKernelSettings(in *BottlerocketKernelSettings, out *v1beta2.BottlerocketKernelSettings, s conversion.Scope) error {
+	out.SysctlSettings = *(*map[string]string)(unsafe.Pointer(&in.SysctlSettings))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketKernelSettings_To_v1beta2_BottlerocketKernelSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketKernelSettings_To_v1beta2_BottlerocketKernelSettings(in *BottlerocketKernelSettings, out *v1beta2.BottlerocketKernelSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketKernelSettings_To_v1beta2_BottlerocketKernelSettings(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in *v1beta2.BottlerocketKernelSettings, out *BottlerocketKernelSettings, s conversion.Scope) error {
+	out.SysctlSettings = *(*map[string]string)(unsafe.Pointer(&in.SysctlSettings))
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in *v1beta2.BottlerocketKernelSettings, out *BottlerocketKernelSettings, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in, out, s)
+}
+
 func autoConvert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta2.BottlerocketKubernetesSettings, s conversion.Scope) error {
 	out.MaxPods = in.MaxPods
 	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
@@ -837,6 +867,7 @@ func Convert_v1beta2_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKuber
 
 func autoConvert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *BottlerocketSettings, out *v1beta2.BottlerocketSettings, s conversion.Scope) error {
 	out.Kubernetes = (*v1beta2.BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	out.Kernel = (*v1beta2.BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
 	return nil
 }
 
@@ -847,14 +878,11 @@ func Convert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *Bo
 
 func autoConvert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
 	out.Kubernetes = (*BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	out.Kernel = (*BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
+	// WARNING: in.Boot requires manual conversion: does not exist in peer-type
 	return nil
 }
 
-// Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings is an autogenerated conversion function.
-func Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
-	return autoConvert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in, out, s)
-}
-
 func autoConvert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in *ClusterConfiguration, out *v1beta2.ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta1_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
@@ -891,7 +919,15 @@ func autoConvert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
-	out.Bottlerocket = (*v1beta2.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(v1beta2.BottlerocketSettings)
+		if err := Convert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.Bottlerocket = nil
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -964,7 +1000,15 @@ func autoConvert_v1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
-	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		if err := Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.Bottlerocket = nil
+	}
 	if err := Convert_v1beta2_Etcd_To_v1beta1_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -1395,7 +1439,15 @@ func autoConvert_v1beta1_JoinConfiguration_To_v1beta2_JoinConfiguration(in *Join
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
-	out.Bottlerocket = (*v1beta2.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(v1beta2.BottlerocketSettings)
+		if err := Convert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.Bottlerocket = nil
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -1446,7 +1498,15 @@ func autoConvert_v1beta2_JoinConfiguration_To_v1beta1_JoinConfiguration(in *v1be
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
-	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		if err := Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.Bottlerocket = nil
+	}
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1beta1_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go b/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
index b3ac51469..3c864fbe1 100644
--- a/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
+++ b/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
@@ -222,6 +222,28 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKernelSettings) DeepCopyInto(out *BottlerocketKernelSettings) {
+	*out = *in
+	if in.SysctlSettings != nil {
+		in, out := &in.SysctlSettings, &out.SysctlSettings
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKernelSettings.
+func (in *BottlerocketKernelSettings) DeepCopy() *BottlerocketKernelSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKernelSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
 	*out = *in
@@ -255,6 +277,11 @@ func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
 		*out = new(BottlerocketKubernetesSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Kernel != nil {
+		in, out := &in.Kernel, &out.Kernel
+		*out = new(BottlerocketKernelSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
diff --git a/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go b/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
index 0cc38e4e3..b14e984c7 100644
--- a/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
+++ b/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
@@ -270,6 +270,11 @@ type BottlerocketKernelSettings struct {
 	SysctlSettings map[string]string `json:"sysctlSettings,omitempty"`
 }
 
+// BottlerocketBootSettings holds the boot-related settings for bottlerocket nodes.
+type BottlerocketBootSettings struct {
+	BootKernelParameters map[string][]string `json:"bootKernelParameters,omitempty"`
+}
+
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
 // This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
 type Pause struct {
@@ -399,6 +404,9 @@ type BottlerocketSettings struct {
 	// KernelSettings contains additional kernel settings for Bottlerocket.
 	// +optional
 	Kernel *BottlerocketKernelSettings `json:"kernel,omitempty"`
+
+	// Boot holds the boot-related settings for bottlerocket nodes
+	Boot *BottlerocketBootSettings `json:"boot,omitempty"`
 }
 
 // BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
diff --git a/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go b/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
index c010c6596..b7096c404 100644
--- a/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
+++ b/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
@@ -194,6 +194,37 @@ func (in *BottlerocketAdmin) DeepCopy() *BottlerocketAdmin {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootSettings) DeepCopyInto(out *BottlerocketBootSettings) {
+	*out = *in
+	if in.BootKernelParameters != nil {
+		in, out := &in.BootKernelParameters, &out.BootKernelParameters
+		*out = make(map[string][]string, len(*in))
+		for key, val := range *in {
+			var outVal []string
+			if val == nil {
+				(*out)[key] = nil
+			} else {
+				inVal := (*in)[key]
+				in, out := &inVal, &outVal
+				*out = make([]string, len(*in))
+				copy(*out, *in)
+			}
+			(*out)[key] = outVal
+		}
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootSettings.
+func (in *BottlerocketBootSettings) DeepCopy() *BottlerocketBootSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
 	*out = *in
@@ -314,6 +345,11 @@ func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
 		*out = new(BottlerocketKernelSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Boot != nil {
+		in, out := &in.Boot, &out.Boot
+		*out = new(BottlerocketBootSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index b620b4aab..dda0c90bf 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -1117,6 +1117,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      boot:
+                        description: Boot holds the boot-related settings for bottlerocket
+                          nodes
+                        properties:
+                          bootKernelParameters:
+                            additionalProperties:
+                              items:
+                                type: string
+                              type: array
+                            type: object
+                        type: object
                       kernel:
                         description: KernelSettings contains additional kernel settings
                           for Bottlerocket.
@@ -1885,6 +1896,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      boot:
+                        description: Boot holds the boot-related settings for bottlerocket
+                          nodes
+                        properties:
+                          bootKernelParameters:
+                            additionalProperties:
+                              items:
+                                type: string
+                              type: array
+                            type: object
+                        type: object
                       kernel:
                         description: KernelSettings contains additional kernel settings
                           for Bottlerocket.
@@ -2682,6 +2704,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -4025,6 +4058,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -5249,6 +5293,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      boot:
+                        description: Boot holds the boot-related settings for bottlerocket
+                          nodes
+                        properties:
+                          bootKernelParameters:
+                            additionalProperties:
+                              items:
+                                type: string
+                              type: array
+                            type: object
+                        type: object
                       kernel:
                         description: KernelSettings contains additional kernel settings
                           for Bottlerocket.
@@ -6756,6 +6811,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      boot:
+                        description: Boot holds the boot-related settings for bottlerocket
+                          nodes
+                        properties:
+                          bootKernelParameters:
+                            additionalProperties:
+                              items:
+                                type: string
+                              type: array
+                            type: object
+                        type: object
                       kernel:
                         description: KernelSettings contains additional kernel settings
                           for Bottlerocket.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 481df6573..59f80a31b 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -1080,6 +1080,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              boot:
+                                description: Boot holds the boot-related settings
+                                  for bottlerocket nodes
+                                properties:
+                                  bootKernelParameters:
+                                    additionalProperties:
+                                      items:
+                                        type: string
+                                      type: array
+                                    type: object
+                                type: object
                               kernel:
                                 description: KernelSettings contains additional kernel
                                   settings for Bottlerocket.
@@ -1865,6 +1876,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              boot:
+                                description: Boot holds the boot-related settings
+                                  for bottlerocket nodes
+                                properties:
+                                  bootKernelParameters:
+                                    additionalProperties:
+                                      items:
+                                        type: string
+                                      type: array
+                                    type: object
+                                type: object
                               kernel:
                                 description: KernelSettings contains additional kernel
                                   settings for Bottlerocket.
@@ -2643,6 +2665,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -4018,6 +4051,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -5140,6 +5184,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              boot:
+                                description: Boot holds the boot-related settings
+                                  for bottlerocket nodes
+                                properties:
+                                  bootKernelParameters:
+                                    additionalProperties:
+                                      items:
+                                        type: string
+                                      type: array
+                                    type: object
+                                type: object
                               kernel:
                                 description: KernelSettings contains additional kernel
                                   settings for Bottlerocket.
@@ -6678,6 +6733,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              boot:
+                                description: Boot holds the boot-related settings
+                                  for bottlerocket nodes
+                                properties:
+                                  bootKernelParameters:
+                                    additionalProperties:
+                                      items:
+                                        type: string
+                                      type: array
+                                    type: object
+                                type: object
                               kernel:
                                 description: KernelSettings contains additional kernel
                                   settings for Bottlerocket.
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index a23a43668..901db1cb7 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -119,6 +119,15 @@ time-servers = [{{stringsJoin .NTPServers ", " }}]
 [settings.kernel.sysctl]
 {{.SysctlSettings}}
 {{- end -}}
+`
+
+	bootSettingsTemplate = `{{ define "bootSettings" -}}
+[settings.boot]
+reboot-to-reconcile = true
+
+[settings.boot.kernel-parameters]
+{{.BootKernel}}
+{{- end -}}
 `
 
 	bottlerocketNodeInitSettingsTemplate = `{{template "hostContainerSlice" .}}
@@ -159,5 +168,9 @@ time-servers = [{{stringsJoin .NTPServers ", " }}]
 {{- if (ne .SysctlSettings "")}}
 {{template "sysctlSettingsTemplate" .}}
 {{- end -}}
+
+{{- if .BootKernel}}
+{{template "bootSettings" .}}
+{{- end -}}
 `
 )
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
index ba0504724..02bb55b5d 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
@@ -278,6 +278,36 @@ hostname = "hostname"
 [settings.kernel.sysctl]
 "foo" = "bar"
 "abc" = "def"
+`
+
+	BootSettingsUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
+[settings.boot]
+reboot-to-reconcile = true
+
+[settings.boot.kernel-parameters]
+"abc" = ["def","123"]
+"foo" = ["bar"]
 `
 )
 
@@ -537,6 +567,35 @@ func TestGetBottlerocketNodeUserData(t *testing.T) {
 			},
 			output: kernelSettingsUserData,
 		},
+		{
+			name: "with boot settings",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
+					{
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
+					},
+				},
+				BottlerocketSettings: &bootstrapv1.BottlerocketSettings{
+					Boot: &bootstrapv1.BottlerocketBootSettings{
+						BootKernelParameters: map[string][]string{
+							"abc": {
+								"def",
+								"123",
+							},
+							"foo": {
+								"bar",
+							},
+						},
+					},
+				},
+			},
+			output: BootSettingsUserData,
+		},
 	}
 	for _, testcase := range testcases {
 		t.Run(testcase.name, func(t *testing.T) {
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index 3889e9211..70f39e75f 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -61,6 +61,7 @@ type BottlerocketSettingsInput struct {
 	AllowedUnsafeSysctls       []string
 	ClusterDNSIPs              []string
 	MaxPods                    int
+	BootKernel                 string
 	HostContainers             []bootstrapv1.BottlerocketHostContainer
 	BootstrapContainers        []bootstrapv1.BottlerocketBootstrapContainer
 	SysctlSettings             string
@@ -164,6 +165,9 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 	if _, err := tm.Parse(sysctlSettingsTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse sysctl settings %s template", kind)
 	}
+	if _, err := tm.Parse(bootSettingsTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse boot settings %s template", kind)
+	}
 	t, err := tm.Parse(tpl)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
@@ -265,6 +269,10 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 			bottlerocketInput.SysctlSettings = parseSysctlSettings(config.BottlerocketSettings.Kernel.SysctlSettings)
 		}
 
+		if config.BottlerocketSettings.Boot != nil {
+			bottlerocketInput.BootKernel = parseBootSettings(config.BottlerocketSettings.Boot.BootKernelParameters)
+		}
+
 	}
 
 	return generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
@@ -337,6 +345,22 @@ func parseSysctlSettings(sysctlSettings map[string]string) string {
 	return sysctlSettingsToml
 }
 
+func parseBootSettings(bootSettings map[string][]string) string {
+	bootSettingsToml := ""
+	for key, value := range bootSettings {
+		var values []string
+		if len(value) != 0 {
+			for _, val := range value {
+				quotedVal := "\"" + val + "\""
+				values = append(values, quotedVal)
+			}
+		}
+		keyVal := strings.Join(values, ",")
+		bootSettingsToml += fmt.Sprintf("\"%v\" = [%v]\n", key, keyVal)
+	}
+	return bootSettingsToml
+}
+
 // Parses through all the users and return list of all user's authorized ssh keys
 func getAllAuthorizedKeys(users []bootstrapv1.User) string {
 	var sshAuthorizedKeys []string
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index 0cb7ae815..3f741f860 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -1345,6 +1345,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          boot:
+                            description: Boot holds the boot-related settings for
+                              bottlerocket nodes
+                            properties:
+                              bootKernelParameters:
+                                additionalProperties:
+                                  items:
+                                    type: string
+                                  type: array
+                                type: object
+                            type: object
                           kernel:
                             description: KernelSettings contains additional kernel
                               settings for Bottlerocket.
@@ -2124,6 +2135,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          boot:
+                            description: Boot holds the boot-related settings for
+                              bottlerocket nodes
+                            properties:
+                              bootKernelParameters:
+                                additionalProperties:
+                                  items:
+                                    type: string
+                                  type: array
+                                type: object
+                            type: object
                           kernel:
                             description: KernelSettings contains additional kernel
                               settings for Bottlerocket.
@@ -3161,6 +3183,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -4520,6 +4553,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -6177,6 +6221,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          boot:
+                            description: Boot holds the boot-related settings for
+                              bottlerocket nodes
+                            properties:
+                              bootKernelParameters:
+                                additionalProperties:
+                                  items:
+                                    type: string
+                                  type: array
+                                type: object
+                            type: object
                           kernel:
                             description: KernelSettings contains additional kernel
                               settings for Bottlerocket.
@@ -7698,6 +7753,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          boot:
+                            description: Boot holds the boot-related settings for
+                              bottlerocket nodes
+                            properties:
+                              bootKernelParameters:
+                                additionalProperties:
+                                  items:
+                                    type: string
+                                  type: array
+                                type: object
+                            type: object
                           kernel:
                             description: KernelSettings contains additional kernel
                               settings for Bottlerocket.
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 004439896..e21982f89 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -133,6 +133,17 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  boot:
+                                    description: Boot holds the boot-related settings
+                                      for bottlerocket nodes
+                                    properties:
+                                      bootKernelParameters:
+                                        additionalProperties:
+                                          items:
+                                            type: string
+                                          type: array
+                                        type: object
+                                    type: object
                                   kernel:
                                     description: KernelSettings contains additional
                                       kernel settings for Bottlerocket.
@@ -928,6 +939,17 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  boot:
+                                    description: Boot holds the boot-related settings
+                                      for bottlerocket nodes
+                                    properties:
+                                      bootKernelParameters:
+                                        additionalProperties:
+                                          items:
+                                            type: string
+                                          type: array
+                                        type: object
+                                    type: object
                                   kernel:
                                     description: KernelSettings contains additional
                                       kernel settings for Bottlerocket.
@@ -1862,6 +1884,18 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  kernel:
+                                    description: KernelSettings contains additional
+                                      kernel settings for Bottlerocket.
+                                    properties:
+                                      sysctlSettings:
+                                        additionalProperties:
+                                          type: string
+                                        description: SysctlSettings defines the kernel
+                                          sysctl settings to set for bottlerocket
+                                          nodes.
+                                        type: object
+                                    type: object
                                   kubernetes:
                                     description: Kubernetes holds the kubernetes settings
                                       for bottlerocket nodes.
@@ -3254,6 +3288,18 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  kernel:
+                                    description: KernelSettings contains additional
+                                      kernel settings for Bottlerocket.
+                                    properties:
+                                      sysctlSettings:
+                                        additionalProperties:
+                                          type: string
+                                        description: SysctlSettings defines the kernel
+                                          sysctl settings to set for bottlerocket
+                                          nodes.
+                                        type: object
+                                    type: object
                                   kubernetes:
                                     description: Kubernetes holds the kubernetes settings
                                       for bottlerocket nodes.
@@ -4568,6 +4614,17 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  boot:
+                                    description: Boot holds the boot-related settings
+                                      for bottlerocket nodes
+                                    properties:
+                                      bootKernelParameters:
+                                        additionalProperties:
+                                          items:
+                                            type: string
+                                          type: array
+                                        type: object
+                                    type: object
                                   kernel:
                                     description: KernelSettings contains additional
                                       kernel settings for Bottlerocket.
@@ -6129,6 +6186,17 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  boot:
+                                    description: Boot holds the boot-related settings
+                                      for bottlerocket nodes
+                                    properties:
+                                      bootKernelParameters:
+                                        additionalProperties:
+                                          items:
+                                            type: string
+                                          type: array
+                                        type: object
+                                    type: object
                                   kernel:
                                     description: KernelSettings contains additional
                                       kernel settings for Bottlerocket.
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index d560eaa07..242542b16 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -182,6 +182,9 @@ type BottlerocketSettings struct {
 	// KernelSettings contains additional kernel settings for Bottlerocket.
 	// +optional
 	Kernel *BottlerocketKernelSettings `json:"kernel,omitempty"`
+
+	// Boot holds the boot-related settings for bottlerocket nodes
+	Boot *BottlerocketBootSettings `json:"boot,omitempty"`
 }
 
 // BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
@@ -203,6 +206,11 @@ type BottlerocketKernelSettings struct {
 	SysctlSettings map[string]string `json:"sysctlSettings,omitempty"`
 }
 
+// BottlerocketBootSettings holds the boot-related settings for bottlerocket nodes.
+type BottlerocketBootSettings struct {
+	BootKernelParameters map[string][]string `json:"bootKernelParameters,omitempty"`
+}
+
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
 // This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
 type Pause struct {
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index 9d4e21166..2e89b7cda 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -69,6 +69,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketBootSettings)(nil), (*v1beta2.BottlerocketBootSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketBootSettings_To_v1beta2_BottlerocketBootSettings(a.(*BottlerocketBootSettings), b.(*v1beta2.BottlerocketBootSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketBootSettings)(nil), (*BottlerocketBootSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketBootSettings_To_v1alpha4_BottlerocketBootSettings(a.(*v1beta2.BottlerocketBootSettings), b.(*BottlerocketBootSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*BottlerocketKernelSettings)(nil), (*v1beta2.BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_BottlerocketKernelSettings_To_v1beta2_BottlerocketKernelSettings(a.(*BottlerocketKernelSettings), b.(*v1beta2.BottlerocketKernelSettings), scope)
 	}); err != nil {
@@ -632,6 +642,26 @@ func autoConvert_v1beta2_BottlerocketAdmin_To_v1alpha4_BottlerocketAdmin(in *v1b
 	return nil
 }
 
+func autoConvert_v1alpha4_BottlerocketBootSettings_To_v1beta2_BottlerocketBootSettings(in *BottlerocketBootSettings, out *v1beta2.BottlerocketBootSettings, s conversion.Scope) error {
+	out.BootKernelParameters = *(*map[string][]string)(unsafe.Pointer(&in.BootKernelParameters))
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketBootSettings_To_v1beta2_BottlerocketBootSettings is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketBootSettings_To_v1beta2_BottlerocketBootSettings(in *BottlerocketBootSettings, out *v1beta2.BottlerocketBootSettings, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketBootSettings_To_v1beta2_BottlerocketBootSettings(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketBootSettings_To_v1alpha4_BottlerocketBootSettings(in *v1beta2.BottlerocketBootSettings, out *BottlerocketBootSettings, s conversion.Scope) error {
+	out.BootKernelParameters = *(*map[string][]string)(unsafe.Pointer(&in.BootKernelParameters))
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketBootSettings_To_v1alpha4_BottlerocketBootSettings is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketBootSettings_To_v1alpha4_BottlerocketBootSettings(in *v1beta2.BottlerocketBootSettings, out *BottlerocketBootSettings, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketBootSettings_To_v1alpha4_BottlerocketBootSettings(in, out, s)
+}
+
 func autoConvert_v1alpha4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta2.BottlerocketBootstrap, s conversion.Scope) error {
 	// WARNING: in.ImageMeta requires manual conversion: does not exist in peer-type
 	return nil
@@ -737,6 +767,7 @@ func Convert_v1beta2_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKube
 func autoConvert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *BottlerocketSettings, out *v1beta2.BottlerocketSettings, s conversion.Scope) error {
 	out.Kubernetes = (*v1beta2.BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
 	out.Kernel = (*v1beta2.BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
+	out.Boot = (*v1beta2.BottlerocketBootSettings)(unsafe.Pointer(in.Boot))
 	return nil
 }
 
@@ -748,6 +779,7 @@ func Convert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *B
 func autoConvert_v1beta2_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
 	out.Kubernetes = (*BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
 	out.Kernel = (*BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
+	out.Boot = (*BottlerocketBootSettings)(unsafe.Pointer(in.Boot))
 	return nil
 }
 
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index c2ec9ba96..2370cf392 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -158,6 +158,37 @@ func (in *BottlerocketAdmin) DeepCopy() *BottlerocketAdmin {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootSettings) DeepCopyInto(out *BottlerocketBootSettings) {
+	*out = *in
+	if in.BootKernelParameters != nil {
+		in, out := &in.BootKernelParameters, &out.BootKernelParameters
+		*out = make(map[string][]string, len(*in))
+		for key, val := range *in {
+			var outVal []string
+			if val == nil {
+				(*out)[key] = nil
+			} else {
+				inVal := (*in)[key]
+				in, out := &inVal, &outVal
+				*out = make([]string, len(*in))
+				copy(*out, *in)
+			}
+			(*out)[key] = outVal
+		}
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootSettings.
+func (in *BottlerocketBootSettings) DeepCopy() *BottlerocketBootSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
 	*out = *in
@@ -282,6 +313,11 @@ func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
 		*out = new(BottlerocketKernelSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Boot != nil {
+		in, out := &in.Boot, &out.Boot
+		*out = new(BottlerocketBootSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
-- 
2.47.1

