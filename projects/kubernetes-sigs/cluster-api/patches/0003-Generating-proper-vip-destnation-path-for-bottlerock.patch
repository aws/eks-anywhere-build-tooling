From 941e30228e739e869b0d5a819d1da9d944f8a192 Mon Sep 17 00:00:00 2001
From: Vignesh Goutham Ganesh <vgg@amazon.com>
Date: Fri, 25 Jun 2021 18:28:44 -0700
Subject: [PATCH 03/36] Generating proper vip destnation path for bottlerocket
 among other cluster config patches

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>
---
 .../controllers/kubeadmconfig_controller.go   | 28 ++++++++++++++
 .../internal/bottlerocket/bootstrap.go        |  2 +-
 .../internal/bottlerocket/bottlerocket.go     | 38 ++++++++++++++++++-
 .../bottlerocket/controlplane_init.go         |  8 ++++
 .../bottlerocket/controlplane_join.go         |  3 +-
 .../kubeadm/internal/bottlerocket/node.go     |  3 +-
 6 files changed, 76 insertions(+), 6 deletions(-)

diff --git a/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
index 80250dcaa..aba0c4efc 100644
--- a/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
@@ -403,6 +403,34 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 	// injects into config.ClusterConfiguration values from top level object
 	r.reconcileTopLevelObjectSettings(ctx, scope.Cluster, machine, scope.Config)
 
+	// Add extra config to cluster config for bottlerocket
+	if scope.Config.Spec.Format == bootstrapv1.Bottlerocket {
+		// Add certificates dir
+		if scope.Config.Spec.ClusterConfiguration.CertificatesDir == "" {
+			scope.Config.Spec.ClusterConfiguration.CertificatesDir = "/var/lib/kubeadm/pki"
+		}
+
+		// Add controllerManager extra volumes
+		scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes = append(scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes,
+			bootstrapv1.HostPathMount{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/controller-manager.conf",
+				MountPath: "/etc/kubernetes/controller-manager.conf",
+				ReadOnly:  true,
+				PathType:  "File",
+			})
+
+		// Add scheduler extraVol
+		scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes = append(scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes,
+			bootstrapv1.HostPathMount{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/scheduler.conf",
+				MountPath: "/etc/kubernetes/scheduler.conf",
+				ReadOnly:  true,
+				PathType:  "File",
+			})
+	}
+
 	clusterdata, err := kubeadmtypes.MarshalClusterConfigurationForVersion(scope.Config.Spec.ClusterConfiguration, parsedVersion)
 	if err != nil {
 		scope.Error(err, "Failed to marshal cluster configuration")
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index dff148855..ef6cb98ff 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -21,7 +21,7 @@ server-tls-bootstrap = false
 [settings.host-containers.kubeadm-bootstrap]
 enabled = true
 superpowered = true
-source = "public.ecr.aws/w4k1d8o8/kubeadm-the-hard-way:latest"
+source = "public.ecr.aws/w4k1d8o8/kubeadm-bootstrap:latest"
 user-data = "{{.BootstrapContainerUserData}}"
 {{- end -}}
 `
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index 2f0e99789..3de3304b3 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -4,11 +4,13 @@ import (
 	"bytes"
 	"encoding/base64"
 	"fmt"
-	"github.com/pkg/errors"
 	"strings"
 	"text/template"
 
 	bootstrapv1 "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+
+	"github.com/pkg/errors"
+	yaml "gopkg.in/yaml.v2"
 )
 
 const (
@@ -23,6 +25,11 @@ type BottlerocketSettingsInput struct {
 	AdminContainerUserData     string
 }
 
+type HostPath struct {
+	Path string
+	Type string
+}
+
 func generateBootstrapContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
 	tm := template.New(kind).Funcs(defaultTemplateFuncMap)
 	if _, err := tm.Parse(filesTemplate); err != nil {
@@ -123,3 +130,32 @@ func getAllAuthorizedKeys(users []bootstrapv1.User) string {
 	}
 	return strings.Join(sshAuthorizedKeys, ",")
 }
+
+func patchKubeVipFile(writeFiles []bootstrapv1.File) ([]bootstrapv1.File, error) {
+	for _, file := range writeFiles {
+		if file.Path == "/etc/kubernetes/manifests/kube-vip.yaml" {
+			// unmarshal the yaml file from contents
+			var yamlData map[string]interface{}
+			err := yaml.Unmarshal([]byte(file.Content), &yamlData)
+			if err != nil {
+				return nil, errors.Wrap(err, "Error unmarshalling yaml content from kube-vip")
+			}
+
+			// Patch the spec.Volume mount path
+			spec := yamlData["spec"].(map[interface{}]interface{})
+			volumes := spec["volumes"].([]interface{})
+			currentVol := volumes[0].(map[interface{}]interface{})
+			hostPath := currentVol["hostPath"].(map[interface{}]interface{})
+			hostPath["type"] = "File"
+			hostPath["path"] = "/var/lib/kubeadm/admin.conf"
+
+			// Marshall back into yaml and override
+			patchedYaml, err := yaml.Marshal(&yamlData)
+			if err != nil {
+				return nil, errors.Wrap(err, "Error marshalling patched kube-vip yaml")
+			}
+			file.Content = string(patchedYaml)
+		}
+	}
+	return writeFiles, nil
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
index f384e3616..24ded4739 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
@@ -8,6 +8,7 @@ package bottlerocket
 import (
 	"fmt"
 
+	"github.com/pkg/errors"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
 )
 
@@ -22,6 +23,7 @@ const (
 {{.ClusterConfiguration | Indent 6}}
       ---
 {{.InitConfiguration | Indent 6}}
+runcmd: "ControlPlaneInit"
 `
 )
 
@@ -32,6 +34,12 @@ func NewInitControlPlane(input *cloudinit.ControlPlaneInput) ([]byte, error) {
 	input.Header = cloudConfigHeader
 	input.WriteFiles = input.Certificates.AsFiles()
 	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+
+	var err error
+	input.WriteFiles, err = patchKubeVipFile(input.WriteFiles)
+	if err != nil {
+		return nil, errors.Wrap(err, "Failed to patch kube-vip manifest file")
+	}
 	bootstrapContainerUserData, err := generateBootstrapContainerUserData("InitBootstrapContainer", controlPlaneBootstrapContainerTemplate, input)
 	if err != nil {
 		return nil, err
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
index 487a16b45..a060e68a4 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
@@ -12,8 +12,7 @@ const (
     permissions: '0640'
     content: |
 {{.JoinConfiguration | Indent 6}}
-runcmd:
-  - {{ .KubeadmCommand }}
+runcmd: "ControlPlaneJoin"
 `
 )
 
diff --git a/bootstrap/kubeadm/internal/bottlerocket/node.go b/bootstrap/kubeadm/internal/bottlerocket/node.go
index 78fe4407a..573422eee 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/node.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/node.go
@@ -13,8 +13,7 @@ const (
     content: |
       ---
 {{.JoinConfiguration | Indent 6}}
-runcmd:
-  - {{ .KubeadmCommand }}
+runcmd: "WorkerJoin"
 `
 )
 
-- 
2.30.1

