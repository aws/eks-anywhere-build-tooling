From 5a71badd78f0627a23bfa3e7a315005abd5b2b3b Mon Sep 17 00:00:00 2001
From: Vignesh Goutham Ganesh <vgg@amazon.com>
Date: Tue, 13 Jul 2021 13:54:11 -0700
Subject: [PATCH] Fix kube-vip config patching by creating new Files array

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>
---
 .../controllers/kubeadmconfig_controller.go   | 22 ++++++++++---------
 .../internal/bottlerocket/bottlerocket.go     | 14 +++++++-----
 2 files changed, 20 insertions(+), 16 deletions(-)

diff --git a/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
index aedd54b0c..65dfd2bbc 100644
--- a/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
@@ -406,24 +406,26 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 		}
 
 		// Add controllerManager extra volumes
-		scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes = append(scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes,
-			kubeadmv1beta1.HostPathMount{
+		scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes = []kubeadmv1beta1.HostPathMount{
+			{
 				Name: "kubeconfig",
 				HostPath: "/var/lib/kubeadm/controller-manager.conf",
 				MountPath: "/etc/kubernetes/controller-manager.conf",
 				ReadOnly: true,
 				PathType: "File",
-		})
+			},
+		}
 
 		// Add scheduler extraVol
-		scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes = append(scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes,
-			kubeadmv1beta1.HostPathMount{
-				Name: "kubeconfig",
-				HostPath: "/var/lib/kubeadm/scheduler.conf",
+		scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes = []kubeadmv1beta1.HostPathMount{
+			{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/scheduler.conf",
 				MountPath: "/etc/kubernetes/scheduler.conf",
-				ReadOnly: true,
-				PathType: "File",
-		})
+				ReadOnly:  true,
+				PathType:  "File",
+			},
+		}
 	}
 
 	clusterdata, err := kubeadmv1beta1.ConfigurationToYAMLForVersion(scope.Config.Spec.ClusterConfiguration, scope.ConfigOwner.KubernetesVersion())
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index aca22790c..08e597bfd 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -13,7 +13,7 @@ import (
 	yaml "gopkg.in/yaml.v2"
 )
 
-const(
+const (
 	standardJoinCommand = "kubeadm join --config /tmp/kubeadm-join-config.yaml %s"
 	cloudConfigHeader   = `## template: jinja
 #cloud-config
@@ -21,8 +21,8 @@ const(
 )
 
 type BottlerocketSettingsInput struct {
-	BootstrapContainerUserData	string
-	AdminContainerUserData 		string
+	BootstrapContainerUserData string
+	AdminContainerUserData     string
 }
 
 type HostPath struct {
@@ -90,7 +90,7 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 }
 
 // getBottlerocketNodeUserData returns the userdata for the host bottlerocket in toml format
-func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []bootstrapv1.User) ([]byte, error){
+func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []bootstrapv1.User) ([]byte, error) {
 	// base64 encode the bootstrapContainer's user data
 	b64BootstrapContainerUserData := base64.StdEncoding.EncodeToString(bootstrapContainerUserData)
 
@@ -106,7 +106,7 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 
 	bottlerocketInput := &BottlerocketSettingsInput{
 		BootstrapContainerUserData: b64BootstrapContainerUserData,
-		AdminContainerUserData: b64AdminContainerUserData,
+		AdminContainerUserData:     b64AdminContainerUserData,
 	}
 
 	bottlerocketNodeUserData, err := generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
@@ -132,6 +132,7 @@ func getAllAuthorizedKeys(users []bootstrapv1.User) string {
 }
 
 func patchKubeVipFile(writeFiles []bootstrapv1.File) ([]bootstrapv1.File, error) {
+	var patchedFiles []bootstrapv1.File
 	for _, file := range writeFiles {
 		if file.Path == "/etc/kubernetes/manifests/kube-vip.yaml" {
 			// unmarshal the yaml file from contents
@@ -156,6 +157,7 @@ func patchKubeVipFile(writeFiles []bootstrapv1.File) ([]bootstrapv1.File, error)
 			}
 			file.Content = string(patchedYaml)
 		}
+		patchedFiles = append(patchedFiles, file)
 	}
-	return writeFiles, nil
+	return patchedFiles, nil
 }
-- 
2.24.3 (Apple Git-128)

