From 0f523e9612e4eb98039fe0ef1fa92baee242596d Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Tue, 7 Mar 2023 14:01:39 -0800
Subject: [PATCH 26/40] add br kernel.sysctl settings

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 api/v1beta1/zz_generated.openapi.go           |   6 -
 .../kubeadm/api/v1beta1/kubeadm_types.go      |  10 +
 .../api/v1beta1/zz_generated.deepcopy.go      |  27 +++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml |  66 ++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml |  66 ++++++
 .../internal/bottlerocket/bootstrap.go        |  10 +
 .../internal/bottlerocket/bootstrap_test.go   |  48 +++++
 .../internal/bottlerocket/bottlerocket.go     |  32 ++-
 .../kubeadm/types/upstreamv1beta1/types.go    |  10 +
 .../zz_generated.conversion.go                | 192 ++++++++++++++++++
 .../upstreamv1beta1/zz_generated.deepcopy.go  |  27 +++
 .../zz_generated.conversion.go                |   6 +
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml |  66 ++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml |  48 +++++
 .../kubeadm/v1alpha4/kubeadm_types.go         |  10 +
 .../v1alpha4/zz_generated.conversion.go       |  32 +++
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go |  27 +++
 17 files changed, 670 insertions(+), 13 deletions(-)

diff --git a/api/v1beta1/zz_generated.openapi.go b/api/v1beta1/zz_generated.openapi.go
index fa44cc92b..9a689cdfb 100644
--- a/api/v1beta1/zz_generated.openapi.go
+++ b/api/v1beta1/zz_generated.openapi.go
@@ -807,12 +807,6 @@ func schema_sigsk8sio_cluster_api_api_v1beta1_ClusterSpec(ref common.ReferenceCa
 							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
 						},
 					},
-					"managedExternalEtcdRef": {
-						SchemaProps: spec.SchemaProps{
-							Description: "ManagedExternalEtcdRef is an optional reference to an etcd provider resource that holds details for provisioning an external etcd cluster",
-							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
-						},
-					},
 					"infrastructureRef": {
 						SchemaProps: spec.SchemaProps{
 							Description: "InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.",
diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
index fe8bd2d9e..2008319d2 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
@@ -197,6 +197,10 @@ type ClusterConfiguration struct {
 type BottlerocketSettings struct {
 	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
 	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+
+	// KernelSettings contains additional kernel settings for Bottlerocket.
+	// +optional
+	Kernel *BottlerocketKernelSettings `json:"kernel,omitempty"`
 }
 
 // BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
@@ -212,6 +216,12 @@ type BottlerocketKubernetesSettings struct {
 	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
 }
 
+// BottlerocketKernelSettings holds the kernel settings for bottlerocket nodes
+type BottlerocketKernelSettings struct {
+	// SysctlSettings defines the kernel sysctl settings to set for bottlerocket nodes.
+	SysctlSettings map[string]string `json:"sysctlSettings,omitempty"`
+}
+
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
 // This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
 type Pause struct {
diff --git a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
index 230f0609c..28a460ed9 100644
--- a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
@@ -222,6 +222,28 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKernelSettings) DeepCopyInto(out *BottlerocketKernelSettings) {
+	*out = *in
+	if in.SysctlSettings != nil {
+		in, out := &in.SysctlSettings, &out.SysctlSettings
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKernelSettings.
+func (in *BottlerocketKernelSettings) DeepCopy() *BottlerocketKernelSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKernelSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
 	*out = *in
@@ -255,6 +277,11 @@ func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
 		*out = new(BottlerocketKubernetesSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Kernel != nil {
+		in, out := &in.Kernel, &out.Kernel
+		*out = new(BottlerocketKernelSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index c263dc729..6750dc495 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -119,6 +119,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -884,6 +895,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -1541,6 +1563,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -2302,6 +2335,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -3078,6 +3122,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
@@ -4341,6 +4396,17 @@ spec:
                       Bottlerocket holds configuration for certain bottlerocket settings.
                       This is only for bottlerocket.
                     properties:
+                      kernel:
+                        description: KernelSettings contains additional kernel settings
+                          for Bottlerocket.
+                        properties:
+                          sysctlSettings:
+                            additionalProperties:
+                              type: string
+                            description: SysctlSettings defines the kernel sysctl
+                              settings to set for bottlerocket nodes.
+                            type: object
+                        type: object
                       kubernetes:
                         description: Kubernetes holds the kubernetes settings for
                           bottlerocket nodes.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index a1da6dc07..90d0ddee5 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -127,6 +127,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -908,6 +919,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -1511,6 +1533,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -2289,6 +2322,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -3046,6 +3090,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
@@ -4343,6 +4398,17 @@ spec:
                               Bottlerocket holds configuration for certain bottlerocket settings.
                               This is only for bottlerocket.
                             properties:
+                              kernel:
+                                description: KernelSettings contains additional kernel
+                                  settings for Bottlerocket.
+                                properties:
+                                  sysctlSettings:
+                                    additionalProperties:
+                                      type: string
+                                    description: SysctlSettings defines the kernel
+                                      sysctl settings to set for bottlerocket nodes.
+                                    type: object
+                                type: object
                               kubernetes:
                                 description: Kubernetes holds the kubernetes settings
                                   for bottlerocket nodes.
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index e5926de86..a23a43668 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -113,6 +113,12 @@ password = "{{.RegistryMirrorPassword}}"
 [settings.ntp]
 time-servers = [{{stringsJoin .NTPServers ", " }}]
 {{- end -}}
+`
+
+	sysctlSettingsTemplate = `{{ define "sysctlSettingsTemplate" -}}
+[settings.kernel.sysctl]
+{{.SysctlSettings}}
+{{- end -}}
 `
 
 	bottlerocketNodeInitSettingsTemplate = `{{template "hostContainerSlice" .}}
@@ -149,5 +155,9 @@ time-servers = [{{stringsJoin .NTPServers ", " }}]
 {{- if .NTPServers}}
 {{template "ntpSettings" .}}
 {{- end -}}
+
+{{- if (ne .SysctlSettings "")}}
+{{template "sysctlSettingsTemplate" .}}
+{{- end -}}
 `
 )
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
index 3463a2769..fdc60204d 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
@@ -253,6 +253,33 @@ essential = false
 mode = "MODE"
 source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
 user-data = "BOOTSTRAP_B6_4USERDATA"`
+
+	kernelSettingsUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
+[settings.kernel.sysctl]
+"foo" = "bar"
+"abc" = "def"
+`
 )
 
 var (
@@ -465,6 +492,27 @@ func TestGetBottlerocketNodeUserData(t *testing.T) {
 			},
 			output: customBootstrapUserData,
 		},
+		{
+			name: "with kernel settings",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: map[string]string{
+					"provider-id": "PROVIDERID",
+				},
+				BottlerocketSettings: &bootstrapv1.BottlerocketSettings{
+					Kernel: &bootstrapv1.BottlerocketKernelSettings{
+						SysctlSettings: map[string]string{
+							"foo": "bar",
+							"abc": "def",
+						},
+					},
+				},
+			},
+			output: kernelSettingsUserData,
+		},
 	}
 	for _, testcase := range testcases {
 		t.Run(testcase.name, func(t *testing.T) {
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index cbab7c7a4..afd854f1c 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -55,10 +55,11 @@ type BottlerocketSettingsInput struct {
 	ProviderID             string
 	Hostname               string
 	AllowedUnsafeSysctls   []string
-	ClusterDNSIPs           []string
+	ClusterDNSIPs          []string
 	MaxPods                int
 	HostContainers         []bootstrapv1.BottlerocketHostContainer
 	BootstrapContainers    []bootstrapv1.BottlerocketBootstrapContainer
+	SysctlSettings         string
 }
 
 // HostPath holds the path and type of a host path volume.
@@ -156,6 +157,9 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 	if _, err := tm.Parse(ntpTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse NTP %s template", kind)
 	}
+	if _, err := tm.Parse(sysctlSettingsTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse sysctl settings %s template", kind)
+	}
 	t, err := tm.Parse(tpl)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
@@ -239,14 +243,20 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 			bottlerocketInput.NTPServers = append(bottlerocketInput.NTPServers, strconv.Quote(ntp))
 		}
 	}
-	if config.BottlerocketSettings != nil && config.BottlerocketSettings.Kubernetes != nil {
-		bottlerocketInput.MaxPods = config.BottlerocketSettings.Kubernetes.MaxPods
-		for _, sysctl := range config.BottlerocketSettings.Kubernetes.AllowedUnsafeSysctls {
-			bottlerocketInput.AllowedUnsafeSysctls = append(bottlerocketInput.AllowedUnsafeSysctls, strconv.Quote(sysctl))
+	if config.BottlerocketSettings != nil {
+		if config.BottlerocketSettings.Kubernetes != nil {
+			bottlerocketInput.MaxPods = config.BottlerocketSettings.Kubernetes.MaxPods
+			for _, sysctl := range config.BottlerocketSettings.Kubernetes.AllowedUnsafeSysctls {
+				bottlerocketInput.AllowedUnsafeSysctls = append(bottlerocketInput.AllowedUnsafeSysctls, strconv.Quote(sysctl))
+			}
+			for _, ip := range config.BottlerocketSettings.Kubernetes.ClusterDNSIPs {
+				bottlerocketInput.ClusterDNSIPs = append(bottlerocketInput.ClusterDNSIPs, strconv.Quote(ip))
+			}
 		}
-		for _, ip := range config.BottlerocketSettings.Kubernetes.ClusterDNSIPs {
-			bottlerocketInput.ClusterDNSIPs = append(bottlerocketInput.ClusterDNSIPs, strconv.Quote(ip))
+		if config.BottlerocketSettings.Kernel != nil {
+			bottlerocketInput.SysctlSettings = parseSysctlSettings(config.BottlerocketSettings.Kernel.SysctlSettings)
 		}
+
 	}
 
 	return generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
@@ -297,6 +307,14 @@ func parseNodeLabels(nodeLabels string) string {
 	return nodeLabelsToml
 }
 
+func parseSysctlSettings(sysctlSettings map[string]string) string {
+	sysctlSettingsToml := ""
+	for key, value := range sysctlSettings {
+		sysctlSettingsToml += fmt.Sprintf("\"%v\" = \"%v\"\n", key, value)
+	}
+	return sysctlSettingsToml
+}
+
 // Parses through all the users and return list of all user's authorized ssh keys
 func getAllAuthorizedKeys(users []bootstrapv1.User) string {
 	var sshAuthorizedKeys []string
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/types.go b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
index 607810003..4563d15de 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
@@ -176,6 +176,10 @@ type ClusterConfiguration struct {
 type BottlerocketSettings struct {
 	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
 	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+
+	// KernelSettings contains additional kernel settings for Bottlerocket.
+	// +optional
+	Kernel *BottlerocketKernelSettings `json:"kernel,omitempty"`
 }
 
 // BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
@@ -191,6 +195,12 @@ type BottlerocketKubernetesSettings struct {
 	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
 }
 
+// BottlerocketKernelSettings holds the kernel settings for bottlerocket nodes
+type BottlerocketKernelSettings struct {
+	// SysctlSettings defines the kernel sysctl settings to set for bottlerocket nodes.
+	SysctlSettings map[string]string `json:"sysctlSettings,omitempty"`
+}
+
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
 // This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
 type Pause struct {
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
index 613918d9e..1480c8d66 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
@@ -88,6 +88,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketAdmin)(nil), (*v1beta1.BottlerocketAdmin)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(a.(*BottlerocketAdmin), b.(*v1beta1.BottlerocketAdmin), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketAdmin)(nil), (*BottlerocketAdmin)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin(a.(*v1beta1.BottlerocketAdmin), b.(*BottlerocketAdmin), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*BottlerocketBootstrap)(nil), (*v1beta1.BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(a.(*BottlerocketBootstrap), b.(*v1beta1.BottlerocketBootstrap), scope)
 	}); err != nil {
@@ -98,6 +108,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketBootstrapContainer)(nil), (*v1beta1.BottlerocketBootstrapContainer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketBootstrapContainer_To_v1beta1_BottlerocketBootstrapContainer(a.(*BottlerocketBootstrapContainer), b.(*v1beta1.BottlerocketBootstrapContainer), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketBootstrapContainer)(nil), (*BottlerocketBootstrapContainer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketBootstrapContainer_To_upstreamv1beta1_BottlerocketBootstrapContainer(a.(*v1beta1.BottlerocketBootstrapContainer), b.(*BottlerocketBootstrapContainer), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*BottlerocketControl)(nil), (*v1beta1.BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(a.(*BottlerocketControl), b.(*v1beta1.BottlerocketControl), scope)
 	}); err != nil {
@@ -118,6 +138,36 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketKernelSettings)(nil), (*v1beta1.BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(a.(*BottlerocketKernelSettings), b.(*v1beta1.BottlerocketKernelSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketKernelSettings)(nil), (*BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketKernelSettings_To_upstreamv1beta1_BottlerocketKernelSettings(a.(*v1beta1.BottlerocketKernelSettings), b.(*BottlerocketKernelSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketKubernetesSettings)(nil), (*v1beta1.BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(a.(*BottlerocketKubernetesSettings), b.(*v1beta1.BottlerocketKubernetesSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketKubernetesSettings)(nil), (*BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketKubernetesSettings_To_upstreamv1beta1_BottlerocketKubernetesSettings(a.(*v1beta1.BottlerocketKubernetesSettings), b.(*BottlerocketKubernetesSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketSettings)(nil), (*v1beta1.BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketSettings_To_v1beta1_BottlerocketSettings(a.(*BottlerocketSettings), b.(*v1beta1.BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketSettings)(nil), (*BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSettings(a.(*v1beta1.BottlerocketSettings), b.(*BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -439,6 +489,30 @@ func Convert_v1beta1_BootstrapTokenString_To_upstreamv1beta1_BootstrapTokenStrin
 	return autoConvert_v1beta1_BootstrapTokenString_To_upstreamv1beta1_BootstrapTokenString(in, out, s)
 }
 
+func autoConvert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(in *BottlerocketAdmin, out *v1beta1.BottlerocketAdmin, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(in *BottlerocketAdmin, out *v1beta1.BottlerocketAdmin, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin(in *v1beta1.BottlerocketAdmin, out *BottlerocketAdmin, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin(in *v1beta1.BottlerocketAdmin, out *BottlerocketAdmin, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin(in, out, s)
+}
+
 func autoConvert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta1.BottlerocketBootstrap, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
 		return err
@@ -463,6 +537,38 @@ func Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootst
 	return autoConvert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(in, out, s)
 }
 
+func autoConvert_upstreamv1beta1_BottlerocketBootstrapContainer_To_v1beta1_BottlerocketBootstrapContainer(in *BottlerocketBootstrapContainer, out *v1beta1.BottlerocketBootstrapContainer, s conversion.Scope) error {
+	out.Name = in.Name
+	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	out.Essential = in.Essential
+	out.Mode = in.Mode
+	out.UserData = in.UserData
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketBootstrapContainer_To_v1beta1_BottlerocketBootstrapContainer is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketBootstrapContainer_To_v1beta1_BottlerocketBootstrapContainer(in *BottlerocketBootstrapContainer, out *v1beta1.BottlerocketBootstrapContainer, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketBootstrapContainer_To_v1beta1_BottlerocketBootstrapContainer(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketBootstrapContainer_To_upstreamv1beta1_BottlerocketBootstrapContainer(in *v1beta1.BottlerocketBootstrapContainer, out *BottlerocketBootstrapContainer, s conversion.Scope) error {
+	out.Name = in.Name
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	out.Essential = in.Essential
+	out.Mode = in.Mode
+	out.UserData = in.UserData
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketBootstrapContainer_To_upstreamv1beta1_BottlerocketBootstrapContainer is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketBootstrapContainer_To_upstreamv1beta1_BottlerocketBootstrapContainer(in *v1beta1.BottlerocketBootstrapContainer, out *BottlerocketBootstrapContainer, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketBootstrapContainer_To_upstreamv1beta1_BottlerocketBootstrapContainer(in, out, s)
+}
+
 func autoConvert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
 		return err
@@ -517,6 +623,72 @@ func Convert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHo
 	return autoConvert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHostContainer(in, out, s)
 }
 
+func autoConvert_upstreamv1beta1_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in *BottlerocketKernelSettings, out *v1beta1.BottlerocketKernelSettings, s conversion.Scope) error {
+	out.SysctlSettings = *(*map[string]string)(unsafe.Pointer(&in.SysctlSettings))
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in *BottlerocketKernelSettings, out *v1beta1.BottlerocketKernelSettings, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketKernelSettings_To_upstreamv1beta1_BottlerocketKernelSettings(in *v1beta1.BottlerocketKernelSettings, out *BottlerocketKernelSettings, s conversion.Scope) error {
+	out.SysctlSettings = *(*map[string]string)(unsafe.Pointer(&in.SysctlSettings))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketKernelSettings_To_upstreamv1beta1_BottlerocketKernelSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketKernelSettings_To_upstreamv1beta1_BottlerocketKernelSettings(in *v1beta1.BottlerocketKernelSettings, out *BottlerocketKernelSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketKernelSettings_To_upstreamv1beta1_BottlerocketKernelSettings(in, out, s)
+}
+
+func autoConvert_upstreamv1beta1_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta1.BottlerocketKubernetesSettings, s conversion.Scope) error {
+	out.MaxPods = in.MaxPods
+	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
+	out.ClusterDNSIPs = *(*[]string)(unsafe.Pointer(&in.ClusterDNSIPs))
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta1.BottlerocketKubernetesSettings, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketKubernetesSettings_To_upstreamv1beta1_BottlerocketKubernetesSettings(in *v1beta1.BottlerocketKubernetesSettings, out *BottlerocketKubernetesSettings, s conversion.Scope) error {
+	out.MaxPods = in.MaxPods
+	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
+	out.ClusterDNSIPs = *(*[]string)(unsafe.Pointer(&in.ClusterDNSIPs))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketKubernetesSettings_To_upstreamv1beta1_BottlerocketKubernetesSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketKubernetesSettings_To_upstreamv1beta1_BottlerocketKubernetesSettings(in *v1beta1.BottlerocketKubernetesSettings, out *BottlerocketKubernetesSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketKubernetesSettings_To_upstreamv1beta1_BottlerocketKubernetesSettings(in, out, s)
+}
+
+func autoConvert_upstreamv1beta1_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *BottlerocketSettings, out *v1beta1.BottlerocketSettings, s conversion.Scope) error {
+	out.Kubernetes = (*v1beta1.BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	out.Kernel = (*v1beta1.BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketSettings_To_v1beta1_BottlerocketSettings is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *BottlerocketSettings, out *v1beta1.BottlerocketSettings, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSettings(in *v1beta1.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
+	out.Kubernetes = (*BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	out.Kernel = (*BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSettings(in *v1beta1.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSettings(in, out, s)
+}
+
 func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -524,6 +696,9 @@ func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	if err := Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(&in.BottlerocketAdmin, &out.BottlerocketAdmin, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
 		return err
 	}
@@ -559,6 +734,8 @@ func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
 	out.BottlerocketHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
+	out.BottlerocketCustomBootstrapContainers = *(*[]v1beta1.BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
+	out.Bottlerocket = (*v1beta1.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	return nil
 }
 
@@ -569,6 +746,9 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfigur
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin(&in.BottlerocketAdmin, &out.BottlerocketAdmin, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
 		return err
 	}
@@ -603,6 +783,8 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfigur
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
 	out.BottlerocketHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
+	out.BottlerocketCustomBootstrapContainers = *(*[]BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
+	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	return nil
 }
 
@@ -877,6 +1059,9 @@ func autoConvert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(
 	if err := Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta1_BottlerocketAdmin_To_v1beta1_BottlerocketAdmin(&in.BottlerocketAdmin, &out.BottlerocketAdmin, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
 		return err
 	}
@@ -895,6 +1080,8 @@ func autoConvert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(
 	}
 	out.ControlPlane = (*v1beta1.JoinControlPlane)(unsafe.Pointer(in.ControlPlane))
 	out.BottlerocketCustomHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
+	out.BottlerocketCustomBootstrapContainers = *(*[]v1beta1.BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
+	out.Bottlerocket = (*v1beta1.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	return nil
 }
 
@@ -910,6 +1097,9 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta1_JoinConfiguration(
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketAdmin_To_upstreamv1beta1_BottlerocketAdmin(&in.BottlerocketAdmin, &out.BottlerocketAdmin, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
 		return err
 	}
@@ -930,6 +1120,8 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta1_JoinConfiguration(
 	// WARNING: in.SkipPhases requires manual conversion: does not exist in peer-type
 	// WARNING: in.Patches requires manual conversion: does not exist in peer-type
 	out.BottlerocketCustomHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
+	out.BottlerocketCustomBootstrapContainers = *(*[]BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
+	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	return nil
 }
 
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
index 5699dff61..8f1c6d578 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
@@ -221,6 +221,28 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKernelSettings) DeepCopyInto(out *BottlerocketKernelSettings) {
+	*out = *in
+	if in.SysctlSettings != nil {
+		in, out := &in.SysctlSettings, &out.SysctlSettings
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKernelSettings.
+func (in *BottlerocketKernelSettings) DeepCopy() *BottlerocketKernelSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKernelSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
 	*out = *in
@@ -254,6 +276,11 @@ func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
 		*out = new(BottlerocketKubernetesSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Kernel != nil {
+		in, out := &in.Kernel, &out.Kernel
+		*out = new(BottlerocketKernelSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
index 32bbc1c41..ab8805e0b 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
@@ -418,6 +418,7 @@ func autoConvert_upstreamv1beta4_ClusterConfiguration_To_v1beta1_ClusterConfigur
 func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta4_ClusterConfiguration(in *v1beta1.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketAdmin requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketControl requires manual conversion: does not exist in peer-type
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta1_Etcd_To_upstreamv1beta4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
@@ -445,6 +446,8 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta4_ClusterConfigur
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
 	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	return nil
 }
 
@@ -734,6 +737,7 @@ func autoConvert_upstreamv1beta4_JoinConfiguration_To_v1beta1_JoinConfiguration(
 func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta4_JoinConfiguration(in *v1beta1.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
 	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketAdmin requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketControl requires manual conversion: does not exist in peer-type
 	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
@@ -756,6 +760,8 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta4_JoinConfiguration(
 	out.SkipPhases = *(*[]string)(unsafe.Pointer(&in.SkipPhases))
 	out.Patches = (*Patches)(unsafe.Pointer(in.Patches))
 	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	return nil
 }
 
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index ed655a4c1..edddb9e06 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -203,6 +203,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -978,6 +989,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -1771,6 +1793,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -2543,6 +2576,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -3558,6 +3602,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
@@ -4839,6 +4894,17 @@ spec:
                           Bottlerocket holds configuration for certain bottlerocket settings.
                           This is only for bottlerocket.
                         properties:
+                          kernel:
+                            description: KernelSettings contains additional kernel
+                              settings for Bottlerocket.
+                            properties:
+                              sysctlSettings:
+                                additionalProperties:
+                                  type: string
+                                description: SysctlSettings defines the kernel sysctl
+                                  settings to set for bottlerocket nodes.
+                                type: object
+                            type: object
                           kubernetes:
                             description: Kubernetes holds the kubernetes settings
                               for bottlerocket nodes.
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 1f4c533fe..ab410f8d3 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -139,6 +139,18 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  kernel:
+                                    description: KernelSettings contains additional
+                                      kernel settings for Bottlerocket.
+                                    properties:
+                                      sysctlSettings:
+                                        additionalProperties:
+                                          type: string
+                                        description: SysctlSettings defines the kernel
+                                          sysctl settings to set for bottlerocket
+                                          nodes.
+                                        type: object
+                                    type: object
                                   kubernetes:
                                     description: Kubernetes holds the kubernetes settings
                                       for bottlerocket nodes.
@@ -926,6 +938,18 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  kernel:
+                                    description: KernelSettings contains additional
+                                      kernel settings for Bottlerocket.
+                                    properties:
+                                      sysctlSettings:
+                                        additionalProperties:
+                                          type: string
+                                        description: SysctlSettings defines the kernel
+                                          sysctl settings to set for bottlerocket
+                                          nodes.
+                                        type: object
+                                    type: object
                                   kubernetes:
                                     description: Kubernetes holds the kubernetes settings
                                       for bottlerocket nodes.
@@ -1844,6 +1868,18 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  kernel:
+                                    description: KernelSettings contains additional
+                                      kernel settings for Bottlerocket.
+                                    properties:
+                                      sysctlSettings:
+                                        additionalProperties:
+                                          type: string
+                                        description: SysctlSettings defines the kernel
+                                          sysctl settings to set for bottlerocket
+                                          nodes.
+                                        type: object
+                                    type: object
                                   kubernetes:
                                     description: Kubernetes holds the kubernetes settings
                                       for bottlerocket nodes.
@@ -3158,6 +3194,18 @@ spec:
                                   Bottlerocket holds configuration for certain bottlerocket settings.
                                   This is only for bottlerocket.
                                 properties:
+                                  kernel:
+                                    description: KernelSettings contains additional
+                                      kernel settings for Bottlerocket.
+                                    properties:
+                                      sysctlSettings:
+                                        additionalProperties:
+                                          type: string
+                                        description: SysctlSettings defines the kernel
+                                          sysctl settings to set for bottlerocket
+                                          nodes.
+                                        type: object
+                                    type: object
                                   kubernetes:
                                     description: Kubernetes holds the kubernetes settings
                                       for bottlerocket nodes.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index 5fe836370..c00ea0a53 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -178,6 +178,10 @@ type ClusterConfiguration struct {
 type BottlerocketSettings struct {
 	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
 	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+
+	// KernelSettings contains additional kernel settings for Bottlerocket.
+	// +optional
+	Kernel *BottlerocketKernelSettings `json:"kernel,omitempty"`
 }
 
 // BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
@@ -193,6 +197,12 @@ type BottlerocketKubernetesSettings struct {
 	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
 }
 
+// BottlerocketKernelSettings holds the kernel settings for bottlerocket nodes
+type BottlerocketKernelSettings struct {
+	// SysctlSettings defines the kernel sysctl settings to set for bottlerocket nodes.
+	SysctlSettings map[string]string `json:"sysctlSettings,omitempty"`
+}
+
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
 // This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
 type Pause struct {
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index 8d1bd4c1e..3e3ecf61b 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -140,6 +140,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketKernelSettings)(nil), (*v1beta1.BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(a.(*BottlerocketKernelSettings), b.(*v1beta1.BottlerocketKernelSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketKernelSettings)(nil), (*BottlerocketKernelSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketKernelSettings_To_v1alpha4_BottlerocketKernelSettings(a.(*v1beta1.BottlerocketKernelSettings), b.(*BottlerocketKernelSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*BottlerocketKubernetesSettings)(nil), (*v1beta1.BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(a.(*BottlerocketKubernetesSettings), b.(*v1beta1.BottlerocketKubernetesSettings), scope)
 	}); err != nil {
@@ -775,6 +785,26 @@ func Convert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostConta
 	return autoConvert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostContainer(in, out, s)
 }
 
+func autoConvert_v1alpha4_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in *BottlerocketKernelSettings, out *v1beta1.BottlerocketKernelSettings, s conversion.Scope) error {
+	out.SysctlSettings = *(*map[string]string)(unsafe.Pointer(&in.SysctlSettings))
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in *BottlerocketKernelSettings, out *v1beta1.BottlerocketKernelSettings, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketKernelSettings_To_v1beta1_BottlerocketKernelSettings(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketKernelSettings_To_v1alpha4_BottlerocketKernelSettings(in *v1beta1.BottlerocketKernelSettings, out *BottlerocketKernelSettings, s conversion.Scope) error {
+	out.SysctlSettings = *(*map[string]string)(unsafe.Pointer(&in.SysctlSettings))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketKernelSettings_To_v1alpha4_BottlerocketKernelSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketKernelSettings_To_v1alpha4_BottlerocketKernelSettings(in *v1beta1.BottlerocketKernelSettings, out *BottlerocketKernelSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketKernelSettings_To_v1alpha4_BottlerocketKernelSettings(in, out, s)
+}
+
 func autoConvert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta1.BottlerocketKubernetesSettings, s conversion.Scope) error {
 	out.MaxPods = in.MaxPods
 	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
@@ -801,6 +831,7 @@ func Convert_v1beta1_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKube
 
 func autoConvert_v1alpha4_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *BottlerocketSettings, out *v1beta1.BottlerocketSettings, s conversion.Scope) error {
 	out.Kubernetes = (*v1beta1.BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	out.Kernel = (*v1beta1.BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
 	return nil
 }
 
@@ -811,6 +842,7 @@ func Convert_v1alpha4_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *B
 
 func autoConvert_v1beta1_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in *v1beta1.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
 	out.Kubernetes = (*BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	out.Kernel = (*BottlerocketKernelSettings)(unsafe.Pointer(in.Kernel))
 	return nil
 }
 
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index 9d54e9139..815f0e031 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -222,6 +222,28 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKernelSettings) DeepCopyInto(out *BottlerocketKernelSettings) {
+	*out = *in
+	if in.SysctlSettings != nil {
+		in, out := &in.SysctlSettings, &out.SysctlSettings
+		*out = make(map[string]string, len(*in))
+		for key, val := range *in {
+			(*out)[key] = val
+		}
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKernelSettings.
+func (in *BottlerocketKernelSettings) DeepCopy() *BottlerocketKernelSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKernelSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
 	*out = *in
@@ -255,6 +277,11 @@ func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
 		*out = new(BottlerocketKubernetesSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.Kernel != nil {
+		in, out := &in.Kernel, &out.Kernel
+		*out = new(BottlerocketKernelSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
-- 
2.47.0

