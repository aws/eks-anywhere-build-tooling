From b40f144ae4fa8d12de966cb02c72e75530a10775 Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Tue, 7 Feb 2023 14:26:36 -0800
Subject: [PATCH 19/34] set hostname for BR nodes

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 .../kubeadm/v1beta1/kubeadm_types.go          |  30 ++
 .../v1beta1/zz_generated.conversion.go        |  68 +++
 .../kubeadm/v1beta1/zz_generated.deepcopy.go  |  55 ++
 .../kubeadm/v1beta2/kubeadm_types.go          |  31 ++
 .../kubeadm/v1beta2/zz_generated.deepcopy.go  |  55 ++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 162 ++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 168 ++++++
 .../internal/bottlerocket/bootstrap.go        |  30 +-
 .../internal/bottlerocket/bootstrap_test.go   | 505 ++++++++++++++----
 .../internal/bottlerocket/bottlerocket.go     |  34 +-
 .../controllers/kubeadmconfig_controller.go   |  16 +
 .../zz_generated.conversion.go                |   2 +
 .../zz_generated.conversion.go                |   2 +
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 162 ++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 168 ++++++
 .../webhooks/kubeadm_control_plane.go         |   2 +
 .../v1alpha3/zz_generated.conversion.go       |   2 +
 .../kubeadm/v1alpha4/kubeadm_types.go         |  30 ++
 .../v1alpha4/zz_generated.conversion.go       |  68 +++
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go |  55 ++
 20 files changed, 1533 insertions(+), 112 deletions(-)

diff --git a/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go b/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
index 7d21f26d8..0ddcc0f40 100644
--- a/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
+++ b/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
@@ -107,6 +107,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketCustomBootstrapContainers []BottlerocketBootstrapContainer `json:"bottlerocketCustomBootstrapContainers,omitempty"`
 
+	// Bottlerocket holds configuration for certain bottlerocket settings.
+	// This is only for bottlerocket.
+	// +optional
+	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
@@ -267,6 +272,26 @@ type BottlerocketBootstrapContainer struct {
 	UserData string `json:"userData,omitempty"`
 }
 
+// BottlerocketSettings define bottlerocket settings that can be configured on bottlerocket nodes.
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketSettings struct {
+	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
+	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+}
+
+// BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketKubernetesSettings struct {
+	// MaxPods defines the maximum number of pods that can run on a node.
+	MaxPods int `json:"maxPods,omitempty"`
+
+	// AllowedUnsafeSysctls defines the list of unsafe sysctls that can be set on a node.
+	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`
+
+	// ClusterDNSIPs defines IP addresses of the DNS servers.
+	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
@@ -662,6 +687,11 @@ type JoinConfiguration struct {
 	// +optional
 	BottlerocketCustomBootstrapContainers []BottlerocketBootstrapContainer `json:"bottlerocketCustomBootstrapContainers,omitempty"`
 
+	// Bottlerocket holds configuration for certain bottlerocket settings.
+	// This is only for bottlerocket.
+	// +optional
+	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
diff --git a/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go b/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
index b630500c4..a7b66f3bc 100644
--- a/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
+++ b/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
@@ -70,6 +70,26 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketKubernetesSettings)(nil), (*v1beta2.BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(a.(*BottlerocketKubernetesSettings), b.(*v1beta2.BottlerocketKubernetesSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketKubernetesSettings)(nil), (*BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(a.(*v1beta2.BottlerocketKubernetesSettings), b.(*BottlerocketKubernetesSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketSettings)(nil), (*v1beta2.BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(a.(*BottlerocketSettings), b.(*v1beta2.BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketSettings)(nil), (*BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(a.(*v1beta2.BottlerocketSettings), b.(*BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*ContainerLinuxConfig)(nil), (*v1beta2.ContainerLinuxConfig)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ContainerLinuxConfig_To_v1beta2_ContainerLinuxConfig(a.(*ContainerLinuxConfig), b.(*v1beta2.ContainerLinuxConfig), scope)
 	}); err != nil {
@@ -791,6 +811,50 @@ func autoConvert_v1beta2_BottlerocketHostContainer_To_v1beta1_BottlerocketHostCo
 	return nil
 }
 
+func autoConvert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta2.BottlerocketKubernetesSettings, s conversion.Scope) error {
+	out.MaxPods = in.MaxPods
+	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
+	out.ClusterDNSIPs = *(*[]string)(unsafe.Pointer(&in.ClusterDNSIPs))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta2.BottlerocketKubernetesSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in *v1beta2.BottlerocketKubernetesSettings, out *BottlerocketKubernetesSettings, s conversion.Scope) error {
+	out.MaxPods = in.MaxPods
+	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
+	out.ClusterDNSIPs = *(*[]string)(unsafe.Pointer(&in.ClusterDNSIPs))
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in *v1beta2.BottlerocketKubernetesSettings, out *BottlerocketKubernetesSettings, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketKubernetesSettings_To_v1beta1_BottlerocketKubernetesSettings(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *BottlerocketSettings, out *v1beta2.BottlerocketSettings, s conversion.Scope) error {
+	out.Kubernetes = (*v1beta2.BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *BottlerocketSettings, out *v1beta2.BottlerocketSettings, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
+	out.Kubernetes = (*BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketSettings_To_v1beta1_BottlerocketSettings(in, out, s)
+}
+
 func autoConvert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in *ClusterConfiguration, out *v1beta2.ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta1_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
@@ -827,6 +891,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*v1beta2.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	if err := Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -899,6 +964,7 @@ func autoConvert_v1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	if err := Convert_v1beta2_Etcd_To_v1beta1_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -1329,6 +1395,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_v1beta2_JoinConfiguration(in *Join
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*v1beta2.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	if err := Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -1379,6 +1446,7 @@ func autoConvert_v1beta2_JoinConfiguration_To_v1beta1_JoinConfiguration(in *v1be
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1beta1_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go b/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
index 27e34912b..b3ac51469 100644
--- a/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
+++ b/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
@@ -222,6 +222,51 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
+	*out = *in
+	if in.AllowedUnsafeSysctls != nil {
+		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+	if in.ClusterDNSIPs != nil {
+		in, out := &in.ClusterDNSIPs, &out.ClusterDNSIPs
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKubernetesSettings.
+func (in *BottlerocketKubernetesSettings) DeepCopy() *BottlerocketKubernetesSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKubernetesSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
+	*out = *in
+	if in.Kubernetes != nil {
+		in, out := &in.Kubernetes, &out.Kubernetes
+		*out = new(BottlerocketKubernetesSettings)
+		(*in).DeepCopyInto(*out)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
+func (in *BottlerocketSettings) DeepCopy() *BottlerocketSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -240,6 +285,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 		*out = make([]BottlerocketBootstrapContainer, len(*in))
 		copy(*out, *in)
 	}
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		(*in).DeepCopyInto(*out)
+	}
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.Etcd.DeepCopyInto(&out.Etcd)
@@ -714,6 +764,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = make([]BottlerocketBootstrapContainer, len(*in))
 		copy(*out, *in)
 	}
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		(*in).DeepCopyInto(*out)
+	}
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
diff --git a/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go b/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
index 103c14dd8..585253199 100644
--- a/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
+++ b/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
@@ -177,6 +177,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketCustomBootstrapContainers []BottlerocketBootstrapContainer `json:"bottlerocketCustomBootstrapContainers,omitempty"`
 
+	// Bottlerocket holds configuration for certain bottlerocket settings.
+	// This is only for bottlerocket.
+	// +optional
+	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
 	// etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -379,6 +384,26 @@ type BottlerocketBootstrapContainer struct {
 	UserData string `json:"userData,omitempty"`
 }
 
+// BottlerocketSettings define bottlerocket settings that can be configured on bottlerocket nodes.
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketSettings struct {
+	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
+	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+}
+
+// BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketKubernetesSettings struct {
+	// MaxPods defines the maximum number of pods that can run on a node.
+	MaxPods int `json:"maxPods,omitempty"`
+
+	// AllowedUnsafeSysctls defines the list of unsafe sysctls that can be set on a node.
+	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`
+
+	// ClusterDNSIPs defines IP addresses of the DNS servers.
+	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
+}
+
 // BottlerocketAdmin holds the settings of admin container for bottlerocket nodes
 // This setting is ONLY for bottlerocket nodes.
 type BottlerocketAdmin struct {
@@ -827,6 +852,12 @@ type JoinConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	BottlerocketCustomBootstrapContainers []BottlerocketBootstrapContainer `json:"bottlerocketCustomBootstrapContainers,omitempty"`
+
+	// Bottlerocket holds configuration for certain bottlerocket settings.
+	// This is only for bottlerocket.
+	// +optional
+	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
 	// nodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go b/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
index 7b82b2610..f0e6f48fa 100644
--- a/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
+++ b/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
@@ -254,6 +254,51 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
+	*out = *in
+	if in.AllowedUnsafeSysctls != nil {
+		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+	if in.ClusterDNSIPs != nil {
+		in, out := &in.ClusterDNSIPs, &out.ClusterDNSIPs
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKubernetesSettings.
+func (in *BottlerocketKubernetesSettings) DeepCopy() *BottlerocketKubernetesSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKubernetesSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
+	*out = *in
+	if in.Kubernetes != nil {
+		in, out := &in.Kubernetes, &out.Kubernetes
+		*out = new(BottlerocketKubernetesSettings)
+		(*in).DeepCopyInto(*out)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
+func (in *BottlerocketSettings) DeepCopy() *BottlerocketSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -273,6 +318,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 		*out = make([]BottlerocketBootstrapContainer, len(*in))
 		copy(*out, *in)
 	}
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		(*in).DeepCopyInto(*out)
+	}
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	in.APIServer.DeepCopyInto(&out.APIServer)
 	in.ControllerManager.DeepCopyInto(&out.ControllerManager)
@@ -652,6 +702,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = make([]BottlerocketBootstrapContainer, len(*in))
 		copy(*out, *in)
 	}
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		(*in).DeepCopyInto(*out)
+	}
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index 56d935aaa..b49ae6361 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -1112,6 +1112,33 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocket:
+                    description: |-
+                      Bottlerocket holds configuration for certain bottlerocket settings.
+                      This is only for bottlerocket.
+                    properties:
+                      kubernetes:
+                        description: Kubernetes holds the kubernetes settings for
+                          bottlerocket nodes.
+                        properties:
+                          allowedUnsafeSysctls:
+                            description: AllowedUnsafeSysctls defines the list of
+                              unsafe sysctls that can be set on a node.
+                            items:
+                              type: string
+                            type: array
+                          clusterDNSIPs:
+                            description: ClusterDNSIPs defines IP addresses of the
+                              DNS servers.
+                            items:
+                              type: string
+                            type: array
+                          maxPods:
+                            description: MaxPods defines the maximum number of pods
+                              that can run on a node.
+                            type: integer
+                        type: object
+                    type: object
                   bottlerocketAdmin:
                     description: |-
                       BottlerocketAdmin holds the image source for admin container
@@ -1842,6 +1869,33 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocket:
+                    description: |-
+                      Bottlerocket holds configuration for certain bottlerocket settings.
+                      This is only for bottlerocket.
+                    properties:
+                      kubernetes:
+                        description: Kubernetes holds the kubernetes settings for
+                          bottlerocket nodes.
+                        properties:
+                          allowedUnsafeSysctls:
+                            description: AllowedUnsafeSysctls defines the list of
+                              unsafe sysctls that can be set on a node.
+                            items:
+                              type: string
+                            type: array
+                          clusterDNSIPs:
+                            description: ClusterDNSIPs defines IP addresses of the
+                              DNS servers.
+                            items:
+                              type: string
+                            type: array
+                          maxPods:
+                            description: MaxPods defines the maximum number of pods
+                              that can run on a node.
+                            type: integer
+                        type: object
+                    type: object
                   bottlerocketAdmin:
                     description: |-
                       BottlerocketAdmin holds the image source for admin container
@@ -2601,6 +2655,33 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocket:
+                    description: |-
+                      Bottlerocket holds configuration for certain bottlerocket settings.
+                      This is only for bottlerocket.
+                    properties:
+                      kubernetes:
+                        description: Kubernetes holds the kubernetes settings for
+                          bottlerocket nodes.
+                        properties:
+                          allowedUnsafeSysctls:
+                            description: AllowedUnsafeSysctls defines the list of
+                              unsafe sysctls that can be set on a node.
+                            items:
+                              type: string
+                            type: array
+                          clusterDNSIPs:
+                            description: ClusterDNSIPs defines IP addresses of the
+                              DNS servers.
+                            items:
+                              type: string
+                            type: array
+                          maxPods:
+                            description: MaxPods defines the maximum number of pods
+                              that can run on a node.
+                            type: integer
+                        type: object
+                    type: object
                   bottlerocketAdmin:
                     description: |-
                       BottlerocketAdmin holds the image source for admin container
@@ -3917,6 +3998,33 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocket:
+                    description: |-
+                      Bottlerocket holds configuration for certain bottlerocket settings.
+                      This is only for bottlerocket.
+                    properties:
+                      kubernetes:
+                        description: Kubernetes holds the kubernetes settings for
+                          bottlerocket nodes.
+                        properties:
+                          allowedUnsafeSysctls:
+                            description: AllowedUnsafeSysctls defines the list of
+                              unsafe sysctls that can be set on a node.
+                            items:
+                              type: string
+                            type: array
+                          clusterDNSIPs:
+                            description: ClusterDNSIPs defines IP addresses of the
+                              DNS servers.
+                            items:
+                              type: string
+                            type: array
+                          maxPods:
+                            description: MaxPods defines the maximum number of pods
+                              that can run on a node.
+                            type: integer
+                        type: object
+                    type: object
                   bottlerocketAdmin:
                     description: |-
                       BottlerocketAdmin holds the image source for admin container
@@ -5114,6 +5222,33 @@ spec:
                         type: array
                         x-kubernetes-list-type: atomic
                     type: object
+                  bottlerocket:
+                    description: |-
+                      Bottlerocket holds configuration for certain bottlerocket settings.
+                      This is only for bottlerocket.
+                    properties:
+                      kubernetes:
+                        description: Kubernetes holds the kubernetes settings for
+                          bottlerocket nodes.
+                        properties:
+                          allowedUnsafeSysctls:
+                            description: AllowedUnsafeSysctls defines the list of
+                              unsafe sysctls that can be set on a node.
+                            items:
+                              type: string
+                            type: array
+                          clusterDNSIPs:
+                            description: ClusterDNSIPs defines IP addresses of the
+                              DNS servers.
+                            items:
+                              type: string
+                            type: array
+                          maxPods:
+                            description: MaxPods defines the maximum number of pods
+                              that can run on a node.
+                            type: integer
+                        type: object
+                    type: object
                   bottlerocketAdmin:
                     description: |-
                       BottlerocketAdmin holds the image source for admin container
@@ -6583,6 +6718,33 @@ spec:
                   join command
                 minProperties: 1
                 properties:
+                  bottlerocket:
+                    description: |-
+                      Bottlerocket holds configuration for certain bottlerocket settings.
+                      This is only for bottlerocket.
+                    properties:
+                      kubernetes:
+                        description: Kubernetes holds the kubernetes settings for
+                          bottlerocket nodes.
+                        properties:
+                          allowedUnsafeSysctls:
+                            description: AllowedUnsafeSysctls defines the list of
+                              unsafe sysctls that can be set on a node.
+                            items:
+                              type: string
+                            type: array
+                          clusterDNSIPs:
+                            description: ClusterDNSIPs defines IP addresses of the
+                              DNS servers.
+                            items:
+                              type: string
+                            type: array
+                          maxPods:
+                            description: MaxPods defines the maximum number of pods
+                              that can run on a node.
+                            type: integer
+                        type: object
+                    type: object
                   bottlerocketAdmin:
                     description: |-
                       BottlerocketAdmin holds the image source for admin container
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 01427a610..f6ff3416c 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -1075,6 +1075,34 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocket:
+                            description: |-
+                              Bottlerocket holds configuration for certain bottlerocket settings.
+                              This is only for bottlerocket.
+                            properties:
+                              kubernetes:
+                                description: Kubernetes holds the kubernetes settings
+                                  for bottlerocket nodes.
+                                properties:
+                                  allowedUnsafeSysctls:
+                                    description: AllowedUnsafeSysctls defines the
+                                      list of unsafe sysctls that can be set on a
+                                      node.
+                                    items:
+                                      type: string
+                                    type: array
+                                  clusterDNSIPs:
+                                    description: ClusterDNSIPs defines IP addresses
+                                      of the DNS servers.
+                                    items:
+                                      type: string
+                                    type: array
+                                  maxPods:
+                                    description: MaxPods defines the maximum number
+                                      of pods that can run on a node.
+                                    type: integer
+                                type: object
+                            type: object
                           bottlerocketAdmin:
                             description: |-
                               BottlerocketAdmin holds the image source for admin container
@@ -1821,6 +1849,34 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocket:
+                            description: |-
+                              Bottlerocket holds configuration for certain bottlerocket settings.
+                              This is only for bottlerocket.
+                            properties:
+                              kubernetes:
+                                description: Kubernetes holds the kubernetes settings
+                                  for bottlerocket nodes.
+                                properties:
+                                  allowedUnsafeSysctls:
+                                    description: AllowedUnsafeSysctls defines the
+                                      list of unsafe sysctls that can be set on a
+                                      node.
+                                    items:
+                                      type: string
+                                    type: array
+                                  clusterDNSIPs:
+                                    description: ClusterDNSIPs defines IP addresses
+                                      of the DNS servers.
+                                    items:
+                                      type: string
+                                    type: array
+                                  maxPods:
+                                    description: MaxPods defines the maximum number
+                                      of pods that can run on a node.
+                                    type: integer
+                                type: object
+                            type: object
                           bottlerocketAdmin:
                             description: |-
                               BottlerocketAdmin holds the image source for admin container
@@ -2560,6 +2616,34 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocket:
+                            description: |-
+                              Bottlerocket holds configuration for certain bottlerocket settings.
+                              This is only for bottlerocket.
+                            properties:
+                              kubernetes:
+                                description: Kubernetes holds the kubernetes settings
+                                  for bottlerocket nodes.
+                                properties:
+                                  allowedUnsafeSysctls:
+                                    description: AllowedUnsafeSysctls defines the
+                                      list of unsafe sysctls that can be set on a
+                                      node.
+                                    items:
+                                      type: string
+                                    type: array
+                                  clusterDNSIPs:
+                                    description: ClusterDNSIPs defines IP addresses
+                                      of the DNS servers.
+                                    items:
+                                      type: string
+                                    type: array
+                                  maxPods:
+                                    description: MaxPods defines the maximum number
+                                      of pods that can run on a node.
+                                    type: integer
+                                type: object
+                            type: object
                           bottlerocketAdmin:
                             description: |-
                               BottlerocketAdmin holds the image source for admin container
@@ -3907,6 +3991,34 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocket:
+                            description: |-
+                              Bottlerocket holds configuration for certain bottlerocket settings.
+                              This is only for bottlerocket.
+                            properties:
+                              kubernetes:
+                                description: Kubernetes holds the kubernetes settings
+                                  for bottlerocket nodes.
+                                properties:
+                                  allowedUnsafeSysctls:
+                                    description: AllowedUnsafeSysctls defines the
+                                      list of unsafe sysctls that can be set on a
+                                      node.
+                                    items:
+                                      type: string
+                                    type: array
+                                  clusterDNSIPs:
+                                    description: ClusterDNSIPs defines IP addresses
+                                      of the DNS servers.
+                                    items:
+                                      type: string
+                                    type: array
+                                  maxPods:
+                                    description: MaxPods defines the maximum number
+                                      of pods that can run on a node.
+                                    type: integer
+                                type: object
+                            type: object
                           bottlerocketAdmin:
                             description: |-
                               BottlerocketAdmin holds the image source for admin container
@@ -5001,6 +5113,34 @@ spec:
                                 type: array
                                 x-kubernetes-list-type: atomic
                             type: object
+                          bottlerocket:
+                            description: |-
+                              Bottlerocket holds configuration for certain bottlerocket settings.
+                              This is only for bottlerocket.
+                            properties:
+                              kubernetes:
+                                description: Kubernetes holds the kubernetes settings
+                                  for bottlerocket nodes.
+                                properties:
+                                  allowedUnsafeSysctls:
+                                    description: AllowedUnsafeSysctls defines the
+                                      list of unsafe sysctls that can be set on a
+                                      node.
+                                    items:
+                                      type: string
+                                    type: array
+                                  clusterDNSIPs:
+                                    description: ClusterDNSIPs defines IP addresses
+                                      of the DNS servers.
+                                    items:
+                                      type: string
+                                    type: array
+                                  maxPods:
+                                    description: MaxPods defines the maximum number
+                                      of pods that can run on a node.
+                                    type: integer
+                                type: object
+                            type: object
                           bottlerocketAdmin:
                             description: |-
                               BottlerocketAdmin holds the image source for admin container
@@ -6500,6 +6640,34 @@ spec:
                           for the join command
                         minProperties: 1
                         properties:
+                          bottlerocket:
+                            description: |-
+                              Bottlerocket holds configuration for certain bottlerocket settings.
+                              This is only for bottlerocket.
+                            properties:
+                              kubernetes:
+                                description: Kubernetes holds the kubernetes settings
+                                  for bottlerocket nodes.
+                                properties:
+                                  allowedUnsafeSysctls:
+                                    description: AllowedUnsafeSysctls defines the
+                                      list of unsafe sysctls that can be set on a
+                                      node.
+                                    items:
+                                      type: string
+                                    type: array
+                                  clusterDNSIPs:
+                                    description: ClusterDNSIPs defines IP addresses
+                                      of the DNS servers.
+                                    items:
+                                      type: string
+                                    type: array
+                                  maxPods:
+                                    description: MaxPods defines the maximum number
+                                      of pods that can run on a node.
+                                    type: integer
+                                type: object
+                            type: object
                           bottlerocketAdmin:
                             description: |-
                               BottlerocketAdmin holds the image source for admin container
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index cd70d69a8..e5926de86 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -10,8 +10,17 @@ standalone-mode = true
 authentication-mode = "tls"
 server-tls-bootstrap = false
 pod-infra-container-image = "{{.PauseContainerSource}}"
-{{- if (ne .ProviderId "")}}
-provider-id = "{{.ProviderId}}"
+{{- if (ne .ProviderID "")}}
+provider-id = "{{.ProviderID}}"
+{{- end -}}
+{{- if .AllowedUnsafeSysctls }}
+allowed-unsafe-sysctls = [{{stringsJoin .AllowedUnsafeSysctls ", " }}]
+{{- end -}}
+{{- if .ClusterDNSIPs }}
+cluster-dns-ip = [{{stringsJoin .ClusterDNSIPs ", " }}]
+{{- end -}}
+{{- if .MaxPods }}
+max-pods = {{.MaxPods}}
 {{- end -}}
 {{- end -}}
 `
@@ -20,8 +29,8 @@ provider-id = "{{.ProviderId}}"
 [settings.host-containers.{{.Name}}]
 enabled = true
 superpowered = {{.Superpowered}}
-{{- if (ne (imageUrl .ImageMeta) "")}}
-source = "{{imageUrl .ImageMeta}}"
+{{- if (ne (imageURL .ImageMeta) "")}}
+source = "{{imageURL .ImageMeta}}"
 {{- end -}}
 {{- if (ne .UserData "")}}
 user-data = "{{.UserData}}"
@@ -40,8 +49,8 @@ user-data = "{{.UserData}}"
 [settings.bootstrap-containers.{{.Name}}]
 essential = {{.Essential}}
 mode = "{{.Mode}}"
-{{- if (ne (imageUrl .ImageMeta) "")}}
-source = "{{imageUrl .ImageMeta}}"
+{{- if (ne (imageURL .ImageMeta) "")}}
+source = "{{imageURL .ImageMeta}}"
 {{- end -}}
 {{- if (ne .UserData "")}}
 user-data = "{{.UserData}}"
@@ -55,12 +64,14 @@ user-data = "{{.UserData}}"
 {{- end -}}
 {{- end -}}
 `
-
 	networkInitTemplate = `{{ define "networkInitSettings" -}}
 [settings.network]
+hostname = "{{.Hostname}}"
+{{- if (ne .HTTPSProxyEndpoint "")}}
 https-proxy = "{{.HTTPSProxyEndpoint}}"
 no-proxy = [{{stringsJoin .NoProxyEndpoints "," }}]
 {{- end -}}
+{{- end -}}
 `
 	registryMirrorTemplate = `{{ define "registryMirrorSettings" -}}
 [settings.container-registry.mirrors]
@@ -108,13 +119,12 @@ time-servers = [{{stringsJoin .NTPServers ", " }}]
 
 {{template "kubernetesInitSettings" .}}
 
+{{template "networkInitSettings" .}}
+
 {{- if .BootstrapContainers}}
 {{template "bootstrapContainerSlice" .}}
 {{- end -}}
 
-{{- if (ne .HTTPSProxyEndpoint "")}}
-{{template "networkInitSettings" .}}
-{{- end -}}
 
 {{- if (ne .RegistryMirrorEndpoint "")}}
 {{template "registryMirrorSettings" .}}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
index d50b96761..ad4686c31 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
@@ -4,179 +4,498 @@ import (
 	"testing"
 
 	. "github.com/onsi/gomega"
+	corev1 "k8s.io/api/core/v1"
 
 	bootstrapv1 "sigs.k8s.io/cluster-api/api/bootstrap/kubeadm/v1beta2"
 )
 
-const userDataFullSetting = `
+const (
+	minimalUserData = `
 [settings.host-containers.admin]
 enabled = true
 superpowered = true
-source = "REPO:TAG"
-user-data = "B64USERDATA"
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
 [settings.host-containers.kubeadm-bootstrap]
 enabled = true
 superpowered = true
-source = "REPO:TAG"
-user-data = "B64USERDATA"
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
 
 [settings.kubernetes]
 cluster-domain = "cluster.local"
 standalone-mode = true
 authentication-mode = "tls"
 server-tls-bootstrap = false
-pod-infra-container-image = "PAUSE"
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"`
+
+	nodeLabelslUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
+[settings.kubernetes.node-labels]
+"KEY1" = "VAL1"
+"KEY2" = "VAL2"
+"KEY3" = "VAL3"
+`
+
+	taintsUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
+[settings.kubernetes.node-taints]
+"KEY1" = ["VAL1:NoSchedule"]
+`
+
+	proxyUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
 provider-id = "PROVIDERID"
 
-[settings.bootstrap-containers.BOOTSTRAP]
-essential = false
-mode = "MODE"
-user-data = "B64USERDATA"
 [settings.network]
-https-proxy = "PROXY"
-no-proxy = []
+hostname = "hostname"
+https-proxy = "HTTPS_PROXY"
+no-proxy = ["no_proxy1","no_proxy2","no_proxy3"]`
+
+	registryMirrorUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
 [settings.container-registry.mirrors]
-"public.ecr.aws" = ["https://REGISTRYENDPOINT"]
+"public.ecr.aws" = ["https://REGISTRY_ENDPOINT"]
 [settings.pki.registry-mirror-ca]
-data = "REGISTRYCA"
+data = "UkVHSVNUUllfQ0E="
+trusted=true`
+
+	registryMirrorAndAuthUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
+[settings.container-registry.mirrors]
+"public.ecr.aws" = ["https://REGISTRY_ENDPOINT"]
+[settings.pki.registry-mirror-ca]
+data = "UkVHSVNUUllfQ0E="
 trusted=true
 [[settings.container-registry.credentials]]
 registry = "public.ecr.aws"
 username = "admin"
 password = "pass"
 [[settings.container-registry.credentials]]
-registry = "REGISTRYENDPOINT"
+registry = "REGISTRY_ENDPOINT"
 username = "admin"
-password = "pass"
-[settings.kubernetes.node-labels]
-KEY=VAR
-[settings.kubernetes.node-taints]
-KEY=VAR
+password = "pass"`
+
+	ntpUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
 [settings.ntp]
 time-servers = ["1.2.3.4", "time-a.capi.com", "time-b.capi.com"]`
 
-const userDataNoAdminImage = `
+	kubernetesSettingsUserData = `
 [settings.host-containers.admin]
 enabled = true
 superpowered = true
-user-data = "B64USERDATA"
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
 [settings.host-containers.kubeadm-bootstrap]
 enabled = true
 superpowered = true
-source = "REPO:TAG"
-user-data = "B64USERDATA"
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
 
 [settings.kubernetes]
 cluster-domain = "cluster.local"
 standalone-mode = true
 authentication-mode = "tls"
 server-tls-bootstrap = false
-pod-infra-container-image = "PAUSE"
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
 provider-id = "PROVIDERID"
+allowed-unsafe-sysctls = ["net.core.somaxconn", "net.ipv4.ip_local_port_range"]
+cluster-dns-ip = ["1.2.3.4", "4.3.2.1"]
+max-pods = 100
+
+[settings.network]
+hostname = "hostname"`
 
+	customBootstrapUserData = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
 [settings.bootstrap-containers.BOOTSTRAP]
 essential = false
 mode = "MODE"
-user-data = "B64USERDATA"
-[settings.network]
-https-proxy = "PROXY"
-no-proxy = []
-[settings.container-registry.mirrors]
-"public.ecr.aws" = ["https://REGISTRYENDPOINT"]
-[settings.pki.registry-mirror-ca]
-data = "REGISTRYCA"
-trusted=true
-[settings.kubernetes.node-labels]
-KEY=VAR
-[settings.kubernetes.node-taints]
-KEY=VAR`
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "BOOTSTRAP_B64USERDATA"`
+)
+
+var (
+	brAdmin = bootstrapv1.BottlerocketAdmin{
+		ImageRepository: "ADMIN_REPO",
+		ImageTag:        "ADMIN_TAG",
+	}
+
+	brBootstrap = bootstrapv1.BottlerocketBootstrap{
+		ImageRepository: "BOOTSTRAP_REPO",
+		ImageTag:        "BOOTSTRAP_TAG",
+	}
+
+	users = []bootstrapv1.User{
+		{
+			Name:              "ec2-user",
+			SSHAuthorizedKeys: []string{"ssh-rsa AAA..."},
+		},
+	}
+
+	bootstrapContainers = []bootstrapv1.BottlerocketBootstrapContainer{
+		{
+			Name:            "BOOTSTRAP",
+			Mode:            "MODE",
+			ImageRepository: "BOOTSTRAP_REPO",
+			ImageTag:        "BOOTSTRAP_TAG",
+			UserData:        "BOOTSTRAP_B64USERDATA",
+		},
+	}
+
+	pause = bootstrapv1.Pause{
+		ImageRepository: "PAUSE_REPO",
+		ImageTag:        "PAUSE_TAG",
+	}
+)
 
-func TestGenerateUserData(t *testing.T) {
+func TestGetBottlerocketNodeUserData(t *testing.T) {
 	g := NewWithT(t)
+	hostname := "hostname"
+	brBootstrapUserdata := []byte("BOTTLEROCKET_BOOTSTRAP_USERDATA")
 
 	testcases := []struct {
 		name   string
-		input  *BottlerocketSettingsInput
+		config *BottlerocketConfig
 		output string
 	}{
 		{
-			name: "full settings",
-			input: &BottlerocketSettingsInput{
-				PauseContainerSource:   "PAUSE",
-				HTTPSProxyEndpoint:     "PROXY",
-				RegistryMirrorEndpoint: "REGISTRYENDPOINT",
-				RegistryMirrorCACert:   "REGISTRYCA",
-				NodeLabels:             "KEY=VAR",
-				Taints:                 "KEY=VAR",
-				ProviderId:             "PROVIDERID",
-				RegistryMirrorUsername: "admin",
-				RegistryMirrorPassword: "pass",
-				NTPServers: []string{
-					"\"1.2.3.4\"",
-					"\"time-a.capi.com\"",
-					"\"time-b.capi.com\"",
+			name: "minimal settings",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
+					{
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
+					},
+				},
+			},
+			output: minimalUserData,
+		},
+		{
+			name: "with node labels",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
+					{
+						Name:  "node-labels",
+						Value: stringPtr("KEY1=VAL1,KEY2=VAL2,KEY3=VAL3"),
+					},
+					{
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
+					},
+				},
+			},
+			output: nodeLabelslUserData,
+		},
+		{
+			name: "with taints",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
+					{
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
+					},
+				},
+				Taints: []corev1.Taint{
+					{
+						Key:    "KEY1",
+						Value:  "VAL1",
+						Effect: corev1.TaintEffectNoSchedule,
+					},
+				},
+			},
+			output: taintsUserData,
+		},
+		{
+			name: "with proxy",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
+					{
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
+					},
 				},
-				HostContainers: []bootstrapv1.BottlerocketHostContainer{
+				ProxyConfiguration: bootstrapv1.ProxyConfiguration{
+					HTTPSProxy: "HTTPS_PROXY",
+					NoProxy:    []string{"no_proxy1", "no_proxy2", "no_proxy3"},
+				},
+			},
+			output: proxyUserData,
+		},
+		{
+			name: "with registry mirror",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
 					{
-						Name:            "admin",
-						Superpowered:    true,
-						ImageRepository: "REPO",
-						ImageTag:        "TAG",
-						UserData:        "B64USERDATA",
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
 					},
+				},
+				RegistryMirrorConfiguration: bootstrapv1.RegistryMirrorConfiguration{
+					Endpoint: "REGISTRY_ENDPOINT",
+					CACert:   "REGISTRY_CA",
+				},
+			},
+			output: registryMirrorUserData,
+		},
+		{
+			name: "with registry mirror and auth",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
 					{
-						Name:            "kubeadm-bootstrap",
-						Superpowered:    true,
-						ImageRepository: "REPO",
-						ImageTag:        "TAG",
-						UserData:        "B64USERDATA",
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
 					},
 				},
-				BootstrapContainers: []bootstrapv1.BottlerocketBootstrapContainer{
+				RegistryMirrorConfiguration: bootstrapv1.RegistryMirrorConfiguration{
+					Endpoint: "REGISTRY_ENDPOINT",
+					CACert:   "REGISTRY_CA",
+				},
+				RegistryMirrorCredentials: RegistryMirrorCredentials{
+					Username: "admin",
+					Password: "pass",
+				},
+			},
+			output: registryMirrorAndAuthUserData,
+		},
+		{
+			name: "with ntp servers",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
 					{
-						Name:     "BOOTSTRAP",
-						Mode:     "MODE",
-						UserData: "B64USERDATA",
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
 					},
 				},
+				NTPServers: []string{
+					"1.2.3.4",
+					"time-a.capi.com",
+					"time-b.capi.com",
+				},
 			},
-			output: userDataFullSetting,
+			output: ntpUserData,
 		},
 		{
-			name: "no admin image meta",
-			input: &BottlerocketSettingsInput{
-				PauseContainerSource:   "PAUSE",
-				HTTPSProxyEndpoint:     "PROXY",
-				RegistryMirrorEndpoint: "REGISTRYENDPOINT",
-				RegistryMirrorCACert:   "REGISTRYCA",
-				NodeLabels:             "KEY=VAR",
-				Taints:                 "KEY=VAR",
-				ProviderId:             "PROVIDERID",
-				HostContainers: []bootstrapv1.BottlerocketHostContainer{
+			name: "with kubernetes settings",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
 					{
-						Name:            "admin",
-						Superpowered:    true,
-						ImageRepository: "REPO",
-						ImageTag:        "TAG",
-						UserData:        "B64USERDATA",
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
+					},
+				},
+				BottlerocketSettings: &bootstrapv1.BottlerocketSettings{
+					Kubernetes: &bootstrapv1.BottlerocketKubernetesSettings{
+						MaxPods: 100,
+						ClusterDNSIPs: []string{
+							"1.2.3.4",
+							"4.3.2.1",
+						},
+						AllowedUnsafeSysctls: []string{
+							"net.core.somaxconn",
+							"net.ipv4.ip_local_port_range",
+						},
 					},
+				},
+			},
+			output: kubernetesSettingsUserData,
+		},
+		{
+			name: "with custom bootstrap containers",
+			config: &BottlerocketConfig{
+				Pause: pause,
+				KubeletExtraArgs: []bootstrapv1.Arg{
 					{
-						Name:            "kubeadm-bootstrap",
-						Superpowered:    true,
-						ImageRepository: "REPO",
-						ImageTag:        "TAG",
-						UserData:        "B64USERDATA",
+						Name:  "provider-id",
+						Value: stringPtr("PROVIDERID"),
 					},
 				},
+				BottlerocketCustomBootstrapContainers: bootstrapContainers,
+				Hostname:                              hostname,
 			},
-			output: userDataNoAdminImage,
+			output: customBootstrapUserData,
 		},
 	}
 	for _, testcase := range testcases {
 		t.Run(testcase.name, func(t *testing.T) {
-			b, err := generateNodeUserData("TestBottlerocketInit", bottlerocketNodeInitSettingsTemplate, testcase.input)
+			b, err := getBottlerocketNodeUserData(brBootstrapUserdata, users, testcase.config)
 			g.Expect(err).NotTo(HaveOccurred())
 			g.Expect(string(b)).To(Equal(testcase.output))
 		})
 	}
 }
+
+func stringPtr(s string) *string {
+	return &s
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index 0674a1227..a22be1761 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -22,11 +22,13 @@ const (
 `
 )
 
+// BottlerocketConfig is the Bottlerocket configuration for a machine.
 type BottlerocketConfig struct {
 	Pause                                 bootstrapv1.Pause
 	BottlerocketBootstrap                 bootstrapv1.BottlerocketBootstrap
 	BottlerocketAdmin                     bootstrapv1.BottlerocketAdmin
 	BottlerocketControl                   bootstrapv1.BottlerocketControl
+	BottlerocketSettings                  *bootstrapv1.BottlerocketSettings
 	ProxyConfiguration                    bootstrapv1.ProxyConfiguration
 	RegistryMirrorConfiguration           bootstrapv1.RegistryMirrorConfiguration
 	KubeletExtraArgs                      []bootstrapv1.Arg
@@ -34,9 +36,11 @@ type BottlerocketConfig struct {
 	BottlerocketCustomHostContainers      []bootstrapv1.BottlerocketHostContainer
 	BottlerocketCustomBootstrapContainers []bootstrapv1.BottlerocketBootstrapContainer
 	NTPServers                            []string
+	Hostname                              string
 	RegistryMirrorCredentials
 }
 
+// BottlerocketSettingsInput is the input for the Bottlerocket settings template.
 type BottlerocketSettingsInput struct {
 	BootstrapContainerUserData string
 	AdminContainerUserData     string
@@ -52,16 +56,22 @@ type BottlerocketSettingsInput struct {
 	NodeLabels                 string
 	NTPServers                 []string
 	Taints                     string
-	ProviderId                 string
+	ProviderID                 string
+	Hostname                   string
+	AllowedUnsafeSysctls       []string
+	ClusterDNSIPs              []string
+	MaxPods                    int
 	HostContainers             []bootstrapv1.BottlerocketHostContainer
 	BootstrapContainers        []bootstrapv1.BottlerocketBootstrapContainer
 }
 
+// HostPath holds the path and type of a host path volume.
 type HostPath struct {
 	Path string
 	Type string
 }
 
+// RegistryMirrorCredentials holds registry mirror credentials to be configured on bottlerocket nodes.
 type RegistryMirrorCredentials struct {
 	Username string
 	Password string
@@ -102,7 +112,7 @@ func generateAdminContainerUserData(kind string, tpl string, data interface{}) (
 	return out.Bytes(), nil
 }
 
-func imageUrl(containerLocation bootstrapv1.BottlerocketHostContainer) string {
+func imageURL(containerLocation bootstrapv1.BottlerocketHostContainer) string {
 	if containerLocation.ImageRepository != "" && containerLocation.ImageTag != "" {
 		return fmt.Sprintf("%s:%s", containerLocation.ImageRepository, containerLocation.ImageTag)
 	}
@@ -112,7 +122,7 @@ func imageUrl(containerLocation bootstrapv1.BottlerocketHostContainer) string {
 func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, error) {
 	tm := template.New(kind).Funcs(template.FuncMap{
 		"stringsJoin": strings.Join,
-		"imageUrl":    imageUrl,
+		"imageURL":    imageURL,
 	})
 	if _, err := tm.Parse(hostContainerTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse hostContainerSettings %s template", kind)
@@ -214,7 +224,8 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 		RegistryMirrorEndpoint:   config.RegistryMirrorConfiguration.Endpoint,
 		NodeLabels:               parseNodeLabels(getArgValue(config.KubeletExtraArgs, "node-labels")), // empty string if it does not exist
 		Taints:                   parseTaints(config.Taints),                                           //empty string if it does not exist
-		ProviderId:               getArgValue(config.KubeletExtraArgs, "provider-id"),
+		ProviderID:               getArgValue(config.KubeletExtraArgs, "provider-id"),
+		Hostname:                 config.Hostname,
 		HostContainers:           hostContainers,
 		BootstrapContainers:      config.BottlerocketCustomBootstrapContainers,
 	}
@@ -236,12 +247,17 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 			bottlerocketInput.NTPServers = append(bottlerocketInput.NTPServers, strconv.Quote(ntp))
 		}
 	}
-
-	bottlerocketNodeUserData, err := generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
-	if err != nil {
-		return nil, err
+	if config.BottlerocketSettings != nil && config.BottlerocketSettings.Kubernetes != nil {
+		bottlerocketInput.MaxPods = config.BottlerocketSettings.Kubernetes.MaxPods
+		for _, sysctl := range config.BottlerocketSettings.Kubernetes.AllowedUnsafeSysctls {
+			bottlerocketInput.AllowedUnsafeSysctls = append(bottlerocketInput.AllowedUnsafeSysctls, strconv.Quote(sysctl))
+		}
+		for _, ip := range config.BottlerocketSettings.Kubernetes.ClusterDNSIPs {
+			bottlerocketInput.ClusterDNSIPs = append(bottlerocketInput.ClusterDNSIPs, strconv.Quote(ip))
+		}
 	}
-	return bottlerocketNodeUserData, nil
+
+	return generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
 }
 
 // getArgValue searches for an argument by name in the slice and returns its value.
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index 58b1bfe5f..0b45410c8 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -574,6 +574,8 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 			BottlerocketControl:                   scope.Config.Spec.ClusterConfiguration.BottlerocketControl,
 			BottlerocketCustomHostContainers:      scope.Config.Spec.ClusterConfiguration.BottlerocketHostContainers,
 			BottlerocketCustomBootstrapContainers: scope.Config.Spec.ClusterConfiguration.BottlerocketCustomBootstrapContainers,
+			BottlerocketSettings:                  scope.Config.Spec.ClusterConfiguration.Bottlerocket,
+			Hostname:                              machine.Name,
 		}
 		if scope.Config.Spec.ClusterConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.ClusterConfiguration.Proxy
@@ -778,6 +780,11 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 		return res, nil
 	}
 
+	machine := &clusterv1.Machine{}
+	if err := runtime.DefaultUnstructuredConverter.FromUnstructured(scope.ConfigOwner.Object, machine); err != nil {
+		return ctrl.Result{}, errors.Wrapf(err, "cannot convert %s to Machine", scope.ConfigOwner.GetKind())
+	}
+
 	kubernetesVersion := scope.ConfigOwner.KubernetesVersion()
 	parsedVersion, err := semver.ParseTolerant(kubernetesVersion)
 	if err != nil {
@@ -890,6 +897,8 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 			BottlerocketControl:                   scope.Config.Spec.JoinConfiguration.BottlerocketControl,
 			BottlerocketCustomHostContainers:      scope.Config.Spec.JoinConfiguration.BottlerocketCustomHostContainers,
 			BottlerocketCustomBootstrapContainers: scope.Config.Spec.JoinConfiguration.BottlerocketCustomBootstrapContainers,
+			BottlerocketSettings:                  scope.Config.Spec.JoinConfiguration.Bottlerocket,
+			Hostname:                              machine.Name,
 		}
 		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
@@ -947,6 +956,11 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 		scope.Config.Spec.JoinConfiguration.ControlPlane = &bootstrapv1.JoinControlPlane{}
 	}
 
+	machine := &clusterv1.Machine{}
+	if err := runtime.DefaultUnstructuredConverter.FromUnstructured(scope.ConfigOwner.Object, machine); err != nil {
+		return ctrl.Result{}, errors.Wrapf(err, "cannot convert %s to Machine", scope.ConfigOwner.GetKind())
+	}
+
 	certificates := secret.NewControlPlaneJoinCerts(&scope.Config.Spec.ClusterConfiguration)
 	err := certificates.LookupCached(
 		ctx,
@@ -1087,6 +1101,8 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 			BottlerocketControl:                   scope.Config.Spec.JoinConfiguration.BottlerocketControl,
 			BottlerocketCustomHostContainers:      scope.Config.Spec.JoinConfiguration.BottlerocketCustomHostContainers,
 			BottlerocketCustomBootstrapContainers: scope.Config.Spec.JoinConfiguration.BottlerocketCustomBootstrapContainers,
+			BottlerocketSettings:                  scope.Config.Spec.JoinConfiguration.Bottlerocket,
+			Hostname:                              machine.Name,
 		}
 		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
index 30ffe6677..dc6fba9d6 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
@@ -483,6 +483,7 @@ func autoConvert_v1beta2_ClusterConfiguration_To_upstreamv1beta3_ClusterConfigur
 	}
 	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_Etcd_To_upstreamv1beta3_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -725,6 +726,7 @@ func autoConvert_v1beta2_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(
 	}
 	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_upstreamv1beta3_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
index b64c4cbbe..8410860d4 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
@@ -511,6 +511,7 @@ func autoConvert_v1beta2_ClusterConfiguration_To_upstreamv1beta4_ClusterConfigur
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_Etcd_To_upstreamv1beta4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -770,6 +771,7 @@ func autoConvert_v1beta2_JoinConfiguration_To_upstreamv1beta4_JoinConfiguration(
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_upstreamv1beta4_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index 91d4fda84..46685ed35 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -1340,6 +1340,33 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocket:
+                        description: |-
+                          Bottlerocket holds configuration for certain bottlerocket settings.
+                          This is only for bottlerocket.
+                        properties:
+                          kubernetes:
+                            description: Kubernetes holds the kubernetes settings
+                              for bottlerocket nodes.
+                            properties:
+                              allowedUnsafeSysctls:
+                                description: AllowedUnsafeSysctls defines the list
+                                  of unsafe sysctls that can be set on a node.
+                                items:
+                                  type: string
+                                type: array
+                              clusterDNSIPs:
+                                description: ClusterDNSIPs defines IP addresses of
+                                  the DNS servers.
+                                items:
+                                  type: string
+                                type: array
+                              maxPods:
+                                description: MaxPods defines the maximum number of
+                                  pods that can run on a node.
+                                type: integer
+                            type: object
+                        type: object
                       bottlerocketAdmin:
                         description: |-
                           BottlerocketAdmin holds the image source for admin container
@@ -2081,6 +2108,33 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocket:
+                        description: |-
+                          Bottlerocket holds configuration for certain bottlerocket settings.
+                          This is only for bottlerocket.
+                        properties:
+                          kubernetes:
+                            description: Kubernetes holds the kubernetes settings
+                              for bottlerocket nodes.
+                            properties:
+                              allowedUnsafeSysctls:
+                                description: AllowedUnsafeSysctls defines the list
+                                  of unsafe sysctls that can be set on a node.
+                                items:
+                                  type: string
+                                type: array
+                              clusterDNSIPs:
+                                description: ClusterDNSIPs defines IP addresses of
+                                  the DNS servers.
+                                items:
+                                  type: string
+                                type: array
+                              maxPods:
+                                description: MaxPods defines the maximum number of
+                                  pods that can run on a node.
+                                type: integer
+                            type: object
+                        type: object
                       bottlerocketAdmin:
                         description: |-
                           BottlerocketAdmin holds the image source for admin container
@@ -3080,6 +3134,33 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocket:
+                        description: |-
+                          Bottlerocket holds configuration for certain bottlerocket settings.
+                          This is only for bottlerocket.
+                        properties:
+                          kubernetes:
+                            description: Kubernetes holds the kubernetes settings
+                              for bottlerocket nodes.
+                            properties:
+                              allowedUnsafeSysctls:
+                                description: AllowedUnsafeSysctls defines the list
+                                  of unsafe sysctls that can be set on a node.
+                                items:
+                                  type: string
+                                type: array
+                              clusterDNSIPs:
+                                description: ClusterDNSIPs defines IP addresses of
+                                  the DNS servers.
+                                items:
+                                  type: string
+                                type: array
+                              maxPods:
+                                description: MaxPods defines the maximum number of
+                                  pods that can run on a node.
+                                type: integer
+                            type: object
+                        type: object
                       bottlerocketAdmin:
                         description: |-
                           BottlerocketAdmin holds the image source for admin container
@@ -4412,6 +4493,33 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocket:
+                        description: |-
+                          Bottlerocket holds configuration for certain bottlerocket settings.
+                          This is only for bottlerocket.
+                        properties:
+                          kubernetes:
+                            description: Kubernetes holds the kubernetes settings
+                              for bottlerocket nodes.
+                            properties:
+                              allowedUnsafeSysctls:
+                                description: AllowedUnsafeSysctls defines the list
+                                  of unsafe sysctls that can be set on a node.
+                                items:
+                                  type: string
+                                type: array
+                              clusterDNSIPs:
+                                description: ClusterDNSIPs defines IP addresses of
+                                  the DNS servers.
+                                items:
+                                  type: string
+                                type: array
+                              maxPods:
+                                description: MaxPods defines the maximum number of
+                                  pods that can run on a node.
+                                type: integer
+                            type: object
+                        type: object
                       bottlerocketAdmin:
                         description: |-
                           BottlerocketAdmin holds the image source for admin container
@@ -6042,6 +6150,33 @@ spec:
                             type: array
                             x-kubernetes-list-type: atomic
                         type: object
+                      bottlerocket:
+                        description: |-
+                          Bottlerocket holds configuration for certain bottlerocket settings.
+                          This is only for bottlerocket.
+                        properties:
+                          kubernetes:
+                            description: Kubernetes holds the kubernetes settings
+                              for bottlerocket nodes.
+                            properties:
+                              allowedUnsafeSysctls:
+                                description: AllowedUnsafeSysctls defines the list
+                                  of unsafe sysctls that can be set on a node.
+                                items:
+                                  type: string
+                                type: array
+                              clusterDNSIPs:
+                                description: ClusterDNSIPs defines IP addresses of
+                                  the DNS servers.
+                                items:
+                                  type: string
+                                type: array
+                              maxPods:
+                                description: MaxPods defines the maximum number of
+                                  pods that can run on a node.
+                                type: integer
+                            type: object
+                        type: object
                       bottlerocketAdmin:
                         description: |-
                           BottlerocketAdmin holds the image source for admin container
@@ -7525,6 +7660,33 @@ spec:
                       the join command
                     minProperties: 1
                     properties:
+                      bottlerocket:
+                        description: |-
+                          Bottlerocket holds configuration for certain bottlerocket settings.
+                          This is only for bottlerocket.
+                        properties:
+                          kubernetes:
+                            description: Kubernetes holds the kubernetes settings
+                              for bottlerocket nodes.
+                            properties:
+                              allowedUnsafeSysctls:
+                                description: AllowedUnsafeSysctls defines the list
+                                  of unsafe sysctls that can be set on a node.
+                                items:
+                                  type: string
+                                type: array
+                              clusterDNSIPs:
+                                description: ClusterDNSIPs defines IP addresses of
+                                  the DNS servers.
+                                items:
+                                  type: string
+                                type: array
+                              maxPods:
+                                description: MaxPods defines the maximum number of
+                                  pods that can run on a node.
+                                type: integer
+                            type: object
+                        type: object
                       bottlerocketAdmin:
                         description: |-
                           BottlerocketAdmin holds the image source for admin container
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 9131c43a4..25aadbafe 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -128,6 +128,34 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocket:
+                                description: |-
+                                  Bottlerocket holds configuration for certain bottlerocket settings.
+                                  This is only for bottlerocket.
+                                properties:
+                                  kubernetes:
+                                    description: Kubernetes holds the kubernetes settings
+                                      for bottlerocket nodes.
+                                    properties:
+                                      allowedUnsafeSysctls:
+                                        description: AllowedUnsafeSysctls defines
+                                          the list of unsafe sysctls that can be set
+                                          on a node.
+                                        items:
+                                          type: string
+                                        type: array
+                                      clusterDNSIPs:
+                                        description: ClusterDNSIPs defines IP addresses
+                                          of the DNS servers.
+                                        items:
+                                          type: string
+                                        type: array
+                                      maxPods:
+                                        description: MaxPods defines the maximum number
+                                          of pods that can run on a node.
+                                        type: integer
+                                    type: object
+                                type: object
                               bottlerocketAdmin:
                                 description: |-
                                   BottlerocketAdmin holds the image source for admin container
@@ -883,6 +911,34 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocket:
+                                description: |-
+                                  Bottlerocket holds configuration for certain bottlerocket settings.
+                                  This is only for bottlerocket.
+                                properties:
+                                  kubernetes:
+                                    description: Kubernetes holds the kubernetes settings
+                                      for bottlerocket nodes.
+                                    properties:
+                                      allowedUnsafeSysctls:
+                                        description: AllowedUnsafeSysctls defines
+                                          the list of unsafe sysctls that can be set
+                                          on a node.
+                                        items:
+                                          type: string
+                                        type: array
+                                      clusterDNSIPs:
+                                        description: ClusterDNSIPs defines IP addresses
+                                          of the DNS servers.
+                                        items:
+                                          type: string
+                                        type: array
+                                      maxPods:
+                                        description: MaxPods defines the maximum number
+                                          of pods that can run on a node.
+                                        type: integer
+                                    type: object
+                                type: object
                               bottlerocketAdmin:
                                 description: |-
                                   BottlerocketAdmin holds the image source for admin container
@@ -1777,6 +1833,34 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocket:
+                                description: |-
+                                  Bottlerocket holds configuration for certain bottlerocket settings.
+                                  This is only for bottlerocket.
+                                properties:
+                                  kubernetes:
+                                    description: Kubernetes holds the kubernetes settings
+                                      for bottlerocket nodes.
+                                    properties:
+                                      allowedUnsafeSysctls:
+                                        description: AllowedUnsafeSysctls defines
+                                          the list of unsafe sysctls that can be set
+                                          on a node.
+                                        items:
+                                          type: string
+                                        type: array
+                                      clusterDNSIPs:
+                                        description: ClusterDNSIPs defines IP addresses
+                                          of the DNS servers.
+                                        items:
+                                          type: string
+                                        type: array
+                                      maxPods:
+                                        description: MaxPods defines the maximum number
+                                          of pods that can run on a node.
+                                        type: integer
+                                    type: object
+                                type: object
                               bottlerocketAdmin:
                                 description: |-
                                   BottlerocketAdmin holds the image source for admin container
@@ -3141,6 +3225,34 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocket:
+                                description: |-
+                                  Bottlerocket holds configuration for certain bottlerocket settings.
+                                  This is only for bottlerocket.
+                                properties:
+                                  kubernetes:
+                                    description: Kubernetes holds the kubernetes settings
+                                      for bottlerocket nodes.
+                                    properties:
+                                      allowedUnsafeSysctls:
+                                        description: AllowedUnsafeSysctls defines
+                                          the list of unsafe sysctls that can be set
+                                          on a node.
+                                        items:
+                                          type: string
+                                        type: array
+                                      clusterDNSIPs:
+                                        description: ClusterDNSIPs defines IP addresses
+                                          of the DNS servers.
+                                        items:
+                                          type: string
+                                        type: array
+                                      maxPods:
+                                        description: MaxPods defines the maximum number
+                                          of pods that can run on a node.
+                                        type: integer
+                                    type: object
+                                type: object
                               bottlerocketAdmin:
                                 description: |-
                                   BottlerocketAdmin holds the image source for admin container
@@ -4427,6 +4539,34 @@ spec:
                                     type: array
                                     x-kubernetes-list-type: atomic
                                 type: object
+                              bottlerocket:
+                                description: |-
+                                  Bottlerocket holds configuration for certain bottlerocket settings.
+                                  This is only for bottlerocket.
+                                properties:
+                                  kubernetes:
+                                    description: Kubernetes holds the kubernetes settings
+                                      for bottlerocket nodes.
+                                    properties:
+                                      allowedUnsafeSysctls:
+                                        description: AllowedUnsafeSysctls defines
+                                          the list of unsafe sysctls that can be set
+                                          on a node.
+                                        items:
+                                          type: string
+                                        type: array
+                                      clusterDNSIPs:
+                                        description: ClusterDNSIPs defines IP addresses
+                                          of the DNS servers.
+                                        items:
+                                          type: string
+                                        type: array
+                                      maxPods:
+                                        description: MaxPods defines the maximum number
+                                          of pods that can run on a node.
+                                        type: integer
+                                    type: object
+                                type: object
                               bottlerocketAdmin:
                                 description: |-
                                   BottlerocketAdmin holds the image source for admin container
@@ -5948,6 +6088,34 @@ spec:
                               for the join command
                             minProperties: 1
                             properties:
+                              bottlerocket:
+                                description: |-
+                                  Bottlerocket holds configuration for certain bottlerocket settings.
+                                  This is only for bottlerocket.
+                                properties:
+                                  kubernetes:
+                                    description: Kubernetes holds the kubernetes settings
+                                      for bottlerocket nodes.
+                                    properties:
+                                      allowedUnsafeSysctls:
+                                        description: AllowedUnsafeSysctls defines
+                                          the list of unsafe sysctls that can be set
+                                          on a node.
+                                        items:
+                                          type: string
+                                        type: array
+                                      clusterDNSIPs:
+                                        description: ClusterDNSIPs defines IP addresses
+                                          of the DNS servers.
+                                        items:
+                                          type: string
+                                        type: array
+                                      maxPods:
+                                        description: MaxPods defines the maximum number
+                                          of pods that can run on a node.
+                                        type: integer
+                                    type: object
+                                type: object
                               bottlerocketAdmin:
                                 description: |-
                                   BottlerocketAdmin holds the image source for admin container
diff --git a/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go b/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go
index 0f0b9e494..e6cb129d0 100644
--- a/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go
+++ b/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go
@@ -145,6 +145,7 @@ func (webhook *KubeadmControlPlane) ValidateUpdate(_ context.Context, oldObj, ne
 		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketAdmin", "*"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketControl", "*"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketCustomBootstrapContainers"},
+		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketSettings", "*"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "pause", "*"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "etcd"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "etcd", "*"},
@@ -179,6 +180,7 @@ func (webhook *KubeadmControlPlane) ValidateUpdate(_ context.Context, oldObj, ne
 		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketAdmin", "*"},
 		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketControl", "*"},
 		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketCustomBootstrapContainers"},
+		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketSettings", "*"},
 		{spec, kubeadmConfigSpec, joinConfiguration, "pause", "*"},
 		{spec, kubeadmConfigSpec, joinConfiguration, nodeRegistration},
 		{spec, kubeadmConfigSpec, joinConfiguration, nodeRegistration, "*"},
diff --git a/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go b/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go
index 7775f2c70..8778a335c 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go
@@ -548,6 +548,7 @@ func autoConvert_v1beta2_ClusterConfiguration_To_v1alpha3_ClusterConfiguration(i
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_Etcd_To_v1alpha3_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -900,6 +901,7 @@ func autoConvert_v1beta2_JoinConfiguration_To_v1alpha3_JoinConfiguration(in *v1b
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
+	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1alpha3_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index f8ab51ed5..b0bca362a 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -166,6 +166,31 @@ type ClusterConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	BottlerocketCustomBootstrapContainers []BottlerocketBootstrapContainer `json:"bottlerocketCustomBootstrapContainers,omitempty"`
+
+	// Bottlerocket holds configuration for certain bottlerocket settings.
+	// This is only for bottlerocket.
+	// +optional
+	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+}
+
+// BottlerocketSettings define bottlerocket settings that can be configured on bottlerocket nodes.
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketSettings struct {
+	// Kubernetes holds the kubernetes settings for bottlerocket nodes.
+	Kubernetes *BottlerocketKubernetesSettings `json:"kubernetes,omitempty"`
+}
+
+// BottlerocketKubernetesSettings holds the settings for kubernetes on bottlerocket nodes.
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketKubernetesSettings struct {
+	// MaxPods defines the maximum number of pods that can run on a node.
+	MaxPods int `json:"maxPods,omitempty"`
+
+	// AllowedUnsafeSysctls defines the list of unsafe sysctls that can be set on a node.
+	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls,omitempty"`
+
+	// ClusterDNSIPs defines IP addresses of the DNS servers.
+	ClusterDNSIPs []string `json:"clusterDNSIPs,omitempty"`
 }
 
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
@@ -470,6 +495,11 @@ type JoinConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	BottlerocketCustomBootstrapContainers []BottlerocketBootstrapContainer `json:"bottlerocketCustomBootstrapContainers,omitempty"`
+
+	// Bottlerocket holds configuration for certain bottlerocket settings.
+	// This is only for bottlerocket.
+	// +optional
+	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
 }
 
 // BottlerocketHostContainer describes a host image for Bottlerocket
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index 3cc0b060f..15b66cc1f 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -69,6 +69,26 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketKubernetesSettings)(nil), (*v1beta2.BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(a.(*BottlerocketKubernetesSettings), b.(*v1beta2.BottlerocketKubernetesSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketKubernetesSettings)(nil), (*BottlerocketKubernetesSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKubernetesSettings(a.(*v1beta2.BottlerocketKubernetesSettings), b.(*BottlerocketKubernetesSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketSettings)(nil), (*v1beta2.BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings(a.(*BottlerocketSettings), b.(*v1beta2.BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketSettings)(nil), (*BottlerocketSettings)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(a.(*v1beta2.BottlerocketSettings), b.(*BottlerocketSettings), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*DiskSetup)(nil), (*v1beta2.DiskSetup)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_DiskSetup_To_v1beta2_DiskSetup(a.(*DiskSetup), b.(*v1beta2.DiskSetup), scope)
 	}); err != nil {
@@ -660,6 +680,50 @@ func autoConvert_v1beta2_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostC
 	return nil
 }
 
+func autoConvert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta2.BottlerocketKubernetesSettings, s conversion.Scope) error {
+	out.MaxPods = in.MaxPods
+	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
+	out.ClusterDNSIPs = *(*[]string)(unsafe.Pointer(&in.ClusterDNSIPs))
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in *BottlerocketKubernetesSettings, out *v1beta2.BottlerocketKubernetesSettings, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketKubernetesSettings_To_v1beta2_BottlerocketKubernetesSettings(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKubernetesSettings(in *v1beta2.BottlerocketKubernetesSettings, out *BottlerocketKubernetesSettings, s conversion.Scope) error {
+	out.MaxPods = in.MaxPods
+	out.AllowedUnsafeSysctls = *(*[]string)(unsafe.Pointer(&in.AllowedUnsafeSysctls))
+	out.ClusterDNSIPs = *(*[]string)(unsafe.Pointer(&in.ClusterDNSIPs))
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKubernetesSettings is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKubernetesSettings(in *v1beta2.BottlerocketKubernetesSettings, out *BottlerocketKubernetesSettings, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketKubernetesSettings_To_v1alpha4_BottlerocketKubernetesSettings(in, out, s)
+}
+
+func autoConvert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *BottlerocketSettings, out *v1beta2.BottlerocketSettings, s conversion.Scope) error {
+	out.Kubernetes = (*v1beta2.BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in *BottlerocketSettings, out *v1beta2.BottlerocketSettings, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketSettings_To_v1beta2_BottlerocketSettings(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
+	out.Kubernetes = (*BottlerocketKubernetesSettings)(unsafe.Pointer(in.Kubernetes))
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketSettings_To_v1alpha4_BottlerocketSettings is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in *v1beta2.BottlerocketSettings, out *BottlerocketSettings, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in, out, s)
+}
+
 func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in *ClusterConfiguration, out *v1beta2.ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
 	if err := Convert_v1alpha4_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
@@ -724,6 +788,7 @@ func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta2_ClusterConfiguration(i
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*v1beta2.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	return nil
 }
 
@@ -768,6 +833,7 @@ func autoConvert_v1beta2_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(i
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	if err := Convert_v1beta2_Etcd_To_v1alpha4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -1147,6 +1213,7 @@ func autoConvert_v1alpha4_JoinConfiguration_To_v1beta2_JoinConfiguration(in *Joi
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*v1beta2.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	return nil
 }
 
@@ -1191,6 +1258,7 @@ func autoConvert_v1beta2_JoinConfiguration_To_v1alpha4_JoinConfiguration(in *v1b
 	} else {
 		out.BottlerocketCustomBootstrapContainers = nil
 	}
+	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1alpha4_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index 57a380c1b..d356049e4 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -222,6 +222,51 @@ func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketKubernetesSettings) DeepCopyInto(out *BottlerocketKubernetesSettings) {
+	*out = *in
+	if in.AllowedUnsafeSysctls != nil {
+		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+	if in.ClusterDNSIPs != nil {
+		in, out := &in.ClusterDNSIPs, &out.ClusterDNSIPs
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketKubernetesSettings.
+func (in *BottlerocketKubernetesSettings) DeepCopy() *BottlerocketKubernetesSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketKubernetesSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketSettings) DeepCopyInto(out *BottlerocketSettings) {
+	*out = *in
+	if in.Kubernetes != nil {
+		in, out := &in.Kubernetes, &out.Kubernetes
+		*out = new(BottlerocketKubernetesSettings)
+		(*in).DeepCopyInto(*out)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketSettings.
+func (in *BottlerocketSettings) DeepCopy() *BottlerocketSettings {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketSettings)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -255,6 +300,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 		*out = make([]BottlerocketBootstrapContainer, len(*in))
 		copy(*out, *in)
 	}
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -598,6 +648,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = make([]BottlerocketBootstrapContainer, len(*in))
 		copy(*out, *in)
 	}
+	if in.Bottlerocket != nil {
+		in, out := &in.Bottlerocket, &out.Bottlerocket
+		*out = new(BottlerocketSettings)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
-- 
2.47.1

