From 9d1f48423e37d3c9c2bf1c359b997918e4184615 Mon Sep 17 00:00:00 2001
From: Pankti <shah.pankti2609@gmail.com>
Date: Tue, 14 Oct 2025 12:11:10 -0700
Subject: [PATCH 36/36] Make ManagedExternalEtcdRef a pointer field in v1beta2
 API. Add ManagedExternalEtcdRef To and From conversion inside v1beta1.

---
 api/core/v1beta1/conversion.go                | 16 +++++++++++++++
 api/core/v1beta1/zz_generated.conversion.go   | 20 +++++++++++++++++--
 api/core/v1beta2/cluster_types.go             |  2 +-
 api/core/v1beta2/zz_generated.deepcopy.go     |  6 +++++-
 api/core/v1beta2/zz_generated.openapi.go      |  1 -
 .../internal/controllers/controller.go        |  4 ++--
 .../internal/controllers/controller_test.go   |  2 +-
 .../core/v1alpha3/zz_generated.conversion.go  | 20 +++++++++++++++++--
 .../core/v1alpha4/zz_generated.conversion.go  | 20 +++++++++++++++++--
 .../controllers/cluster/cluster_controller.go |  2 +-
 .../cluster/cluster_controller_phases.go      |  4 ++--
 .../cluster/cluster_controller_test.go        |  2 +-
 .../machine/machine_controller_phases.go      |  2 +-
 13 files changed, 84 insertions(+), 17 deletions(-)

diff --git a/api/core/v1beta1/conversion.go b/api/core/v1beta1/conversion.go
index 03d7a7a9a..23d2c112e 100644
--- a/api/core/v1beta1/conversion.go
+++ b/api/core/v1beta1/conversion.go
@@ -67,6 +67,14 @@ func (src *Cluster) ConvertTo(dstRaw conversion.Hub) error {
 		dst.Spec.ControlPlaneRef = controlPlaneRef
 	}
 
+	if src.Spec.ManagedExternalEtcdRef != nil {
+		etcdRef, err := convertToContractVersionedObjectReference(src.Spec.ManagedExternalEtcdRef)
+		if err != nil {
+			return err
+		}
+		dst.Spec.ManagedExternalEtcdRef = &etcdRef
+	}
+
 	restored := &clusterv1.Cluster{}
 	ok, err := utilconversion.UnmarshalData(src, restored)
 	if err != nil {
@@ -109,6 +117,14 @@ func (dst *Cluster) ConvertFrom(srcRaw conversion.Hub) error {
 		dst.Spec.ControlPlaneRef = controlPlaneRef
 	}
 
+	if src.Spec.ManagedExternalEtcdRef != nil && src.Spec.ManagedExternalEtcdRef.IsDefined() {
+		etcdRef, err := convertToObjectReference(*src.Spec.ManagedExternalEtcdRef, src.Namespace)
+		if err != nil {
+			return err
+		}
+		dst.Spec.ManagedExternalEtcdRef = etcdRef
+	}
+
 	if dst.Spec.ClusterNetwork != nil && dst.Spec.ClusterNetwork.APIServerPort != nil &&
 		*dst.Spec.ClusterNetwork.APIServerPort == 0 {
 		dst.Spec.ClusterNetwork.APIServerPort = nil
diff --git a/api/core/v1beta1/zz_generated.conversion.go b/api/core/v1beta1/zz_generated.conversion.go
index 749d480c5..398fb525e 100644
--- a/api/core/v1beta1/zz_generated.conversion.go
+++ b/api/core/v1beta1/zz_generated.conversion.go
@@ -1483,7 +1483,15 @@ func autoConvert_v1beta1_ClusterSpec_To_v1beta2_ClusterSpec(in *ClusterSpec, out
 		return err
 	}
 	// WARNING: in.ControlPlaneRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
-	// WARNING: in.ManagedExternalEtcdRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(v1beta2.ContractVersionedObjectReference)
+		if err := Convert_v1_ObjectReference_To_v1beta2_ContractVersionedObjectReference(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.ManagedExternalEtcdRef = nil
+	}
 	// WARNING: in.InfrastructureRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
 	// WARNING: in.Topology requires manual conversion: inconvertible types (*sigs.k8s.io/cluster-api/api/core/v1beta1.Topology vs sigs.k8s.io/cluster-api/api/core/v1beta2.Topology)
 	out.AvailabilityGates = *(*[]v1beta2.ClusterAvailabilityGate)(unsafe.Pointer(&in.AvailabilityGates))
@@ -1499,7 +1507,15 @@ func autoConvert_v1beta2_ClusterSpec_To_v1beta1_ClusterSpec(in *v1beta2.ClusterS
 		return err
 	}
 	// WARNING: in.ControlPlaneRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
-	// WARNING: in.ManagedExternalEtcdRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(corev1.ObjectReference)
+		if err := Convert_v1beta2_ContractVersionedObjectReference_To_v1_ObjectReference(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.ManagedExternalEtcdRef = nil
+	}
 	// WARNING: in.InfrastructureRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
 	// WARNING: in.Topology requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.Topology vs *sigs.k8s.io/cluster-api/api/core/v1beta1.Topology)
 	out.AvailabilityGates = *(*[]ClusterAvailabilityGate)(unsafe.Pointer(&in.AvailabilityGates))
diff --git a/api/core/v1beta2/cluster_types.go b/api/core/v1beta2/cluster_types.go
index 99ac9df03..c7429be00 100644
--- a/api/core/v1beta2/cluster_types.go
+++ b/api/core/v1beta2/cluster_types.go
@@ -480,7 +480,7 @@ type ClusterSpec struct {
 	// ManagedExternalEtcdRef is an optional reference to an etcd provider resource that holds details
 	// for provisioning an external etcd cluster
 	// +optional
-	ManagedExternalEtcdRef ContractVersionedObjectReference `json:"managedExternalEtcdRef,omitempty"`
+	ManagedExternalEtcdRef *ContractVersionedObjectReference `json:"managedExternalEtcdRef,omitempty"`
 
 	// infrastructureRef is a reference to a provider-specific resource that holds the details
 	// for provisioning infrastructure for a cluster in said provider.
diff --git a/api/core/v1beta2/zz_generated.deepcopy.go b/api/core/v1beta2/zz_generated.deepcopy.go
index a3c8c400d..1cf4d55a4 100644
--- a/api/core/v1beta2/zz_generated.deepcopy.go
+++ b/api/core/v1beta2/zz_generated.deepcopy.go
@@ -581,7 +581,11 @@ func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
 	in.ClusterNetwork.DeepCopyInto(&out.ClusterNetwork)
 	out.ControlPlaneEndpoint = in.ControlPlaneEndpoint
 	out.ControlPlaneRef = in.ControlPlaneRef
-	out.ManagedExternalEtcdRef = in.ManagedExternalEtcdRef
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(ContractVersionedObjectReference)
+		**out = **in
+	}
 	out.InfrastructureRef = in.InfrastructureRef
 	in.Topology.DeepCopyInto(&out.Topology)
 	if in.AvailabilityGates != nil {
diff --git a/api/core/v1beta2/zz_generated.openapi.go b/api/core/v1beta2/zz_generated.openapi.go
index 4e584960a..8b3096dcb 100644
--- a/api/core/v1beta2/zz_generated.openapi.go
+++ b/api/core/v1beta2/zz_generated.openapi.go
@@ -1169,7 +1169,6 @@ func schema_cluster_api_api_core_v1beta2_ClusterSpec(ref common.ReferenceCallbac
 					"managedExternalEtcdRef": {
 						SchemaProps: spec.SchemaProps{
 							Description: "ManagedExternalEtcdRef is an optional reference to an etcd provider resource that holds details for provisioning an external etcd cluster",
-							Default:     map[string]interface{}{},
 							Ref:         ref("sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference"),
 						},
 					},
diff --git a/controlplane/kubeadm/internal/controllers/controller.go b/controlplane/kubeadm/internal/controllers/controller.go
index bb729ee40..8e07423c0 100644
--- a/controlplane/kubeadm/internal/controllers/controller.go
+++ b/controlplane/kubeadm/internal/controllers/controller.go
@@ -501,7 +501,7 @@ func (r *KubeadmControlPlaneReconciler) reconcile(ctx context.Context, controlPl
 				*/
 				if controlPlane.Cluster.Spec.ManagedExternalEtcdRef.IsDefined() {
 					etcdRef := controlPlane.Cluster.Spec.ManagedExternalEtcdRef
-					externalEtcd, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, etcdRef, controlPlane.Cluster.Namespace)
+					externalEtcd, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, *etcdRef, controlPlane.Cluster.Namespace)
 					if err != nil {
 						return ctrl.Result{}, err
 					}
@@ -1497,7 +1497,7 @@ func (r *KubeadmControlPlaneReconciler) updateManagedExternalEtcdEndpoints(
 	}
 
 	etcdRef := cluster.Spec.ManagedExternalEtcdRef
-	externalEtcd, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, etcdRef, cluster.Namespace)
+	externalEtcd, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, *etcdRef, cluster.Namespace)
 	if err != nil {
 		return ctrl.Result{}, err
 	}
diff --git a/controlplane/kubeadm/internal/controllers/controller_test.go b/controlplane/kubeadm/internal/controllers/controller_test.go
index ea598f3c7..d000e87d6 100644
--- a/controlplane/kubeadm/internal/controllers/controller_test.go
+++ b/controlplane/kubeadm/internal/controllers/controller_test.go
@@ -3882,7 +3882,7 @@ func TestKubeadmControlPlaneReconciler_updateManagedExternalEtcdEndpoints(t *tes
 		unstructured.SetNestedField(managedEtcd.Object, true, "status", "ready")
 		unstructured.SetNestedField(managedEtcd.Object, strings.Join(endpoints, ","), "status", "endpoints")
 		cluster, kcp, _ := createClusterWithControlPlane(ns)
-		cluster.Spec.ManagedExternalEtcdRef = clusterv1.ContractVersionedObjectReference{
+		cluster.Spec.ManagedExternalEtcdRef = &clusterv1.ContractVersionedObjectReference{
 			APIGroup: managedEtcd.GroupVersionKind().Group,
 			Kind:     managedEtcd.GetKind(),
 			Name:     managedEtcd.GetName(),
diff --git a/internal/api/core/v1alpha3/zz_generated.conversion.go b/internal/api/core/v1alpha3/zz_generated.conversion.go
index 6a47e2cb2..ee2d31d60 100644
--- a/internal/api/core/v1alpha3/zz_generated.conversion.go
+++ b/internal/api/core/v1alpha3/zz_generated.conversion.go
@@ -520,7 +520,15 @@ func autoConvert_v1alpha3_ClusterSpec_To_v1beta2_ClusterSpec(in *ClusterSpec, ou
 		return err
 	}
 	// WARNING: in.ControlPlaneRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
-	// WARNING: in.ManagedExternalEtcdRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(v1beta2.ContractVersionedObjectReference)
+		if err := v1beta1.Convert_v1_ObjectReference_To_v1beta2_ContractVersionedObjectReference(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.ManagedExternalEtcdRef = nil
+	}
 	// WARNING: in.InfrastructureRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
 	return nil
 }
@@ -534,7 +542,15 @@ func autoConvert_v1beta2_ClusterSpec_To_v1alpha3_ClusterSpec(in *v1beta2.Cluster
 		return err
 	}
 	// WARNING: in.ControlPlaneRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
-	// WARNING: in.ManagedExternalEtcdRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(corev1.ObjectReference)
+		if err := v1beta1.Convert_v1beta2_ContractVersionedObjectReference_To_v1_ObjectReference(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.ManagedExternalEtcdRef = nil
+	}
 	// WARNING: in.InfrastructureRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
 	// WARNING: in.Topology requires manual conversion: does not exist in peer-type
 	// WARNING: in.AvailabilityGates requires manual conversion: does not exist in peer-type
diff --git a/internal/api/core/v1alpha4/zz_generated.conversion.go b/internal/api/core/v1alpha4/zz_generated.conversion.go
index d34a5f8d4..f75e57ce9 100644
--- a/internal/api/core/v1alpha4/zz_generated.conversion.go
+++ b/internal/api/core/v1alpha4/zz_generated.conversion.go
@@ -757,7 +757,15 @@ func autoConvert_v1alpha4_ClusterSpec_To_v1beta2_ClusterSpec(in *ClusterSpec, ou
 		return err
 	}
 	// WARNING: in.ControlPlaneRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
-	// WARNING: in.ManagedExternalEtcdRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(v1beta2.ContractVersionedObjectReference)
+		if err := v1beta1.Convert_v1_ObjectReference_To_v1beta2_ContractVersionedObjectReference(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.ManagedExternalEtcdRef = nil
+	}
 	// WARNING: in.InfrastructureRef requires manual conversion: inconvertible types (*k8s.io/api/core/v1.ObjectReference vs sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference)
 	// WARNING: in.Topology requires manual conversion: inconvertible types (*sigs.k8s.io/cluster-api/internal/api/core/v1alpha4.Topology vs sigs.k8s.io/cluster-api/api/core/v1beta2.Topology)
 	return nil
@@ -772,7 +780,15 @@ func autoConvert_v1beta2_ClusterSpec_To_v1alpha4_ClusterSpec(in *v1beta2.Cluster
 		return err
 	}
 	// WARNING: in.ControlPlaneRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
-	// WARNING: in.ManagedExternalEtcdRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
+	if in.ManagedExternalEtcdRef != nil {
+		in, out := &in.ManagedExternalEtcdRef, &out.ManagedExternalEtcdRef
+		*out = new(corev1.ObjectReference)
+		if err := v1beta1.Convert_v1beta2_ContractVersionedObjectReference_To_v1_ObjectReference(*in, *out, s); err != nil {
+			return err
+		}
+	} else {
+		out.ManagedExternalEtcdRef = nil
+	}
 	// WARNING: in.InfrastructureRef requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.ContractVersionedObjectReference vs *k8s.io/api/core/v1.ObjectReference)
 	// WARNING: in.Topology requires manual conversion: inconvertible types (sigs.k8s.io/cluster-api/api/core/v1beta2.Topology vs *sigs.k8s.io/cluster-api/internal/api/core/v1alpha4.Topology)
 	// WARNING: in.AvailabilityGates requires manual conversion: does not exist in peer-type
diff --git a/internal/controllers/cluster/cluster_controller.go b/internal/controllers/cluster/cluster_controller.go
index c66857819..19eef85f6 100644
--- a/internal/controllers/cluster/cluster_controller.go
+++ b/internal/controllers/cluster/cluster_controller.go
@@ -461,7 +461,7 @@ func (r *Reconciler) reconcileDelete(ctx context.Context, s *scope) (reconcile.R
 	}
 
 	if cluster.Spec.ManagedExternalEtcdRef.IsDefined() {
-		obj, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, cluster.Spec.ManagedExternalEtcdRef, cluster.Namespace)
+		obj, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, *cluster.Spec.ManagedExternalEtcdRef, cluster.Namespace)
 		switch {
 		case apierrors.IsNotFound(errors.Cause(err)):
 			// Etcd cluster has been deleted
diff --git a/internal/controllers/cluster/cluster_controller_phases.go b/internal/controllers/cluster/cluster_controller_phases.go
index 280c33303..fe9ca7ead 100644
--- a/internal/controllers/cluster/cluster_controller_phases.go
+++ b/internal/controllers/cluster/cluster_controller_phases.go
@@ -375,7 +375,7 @@ func (r *Reconciler) handlePauseControlPlaneWithExternalManagedEtcd(ctx context.
 	}
 
 	etcdRef := cluster.Spec.ManagedExternalEtcdRef
-	externalEtcd, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, etcdRef, cluster.Namespace)
+	externalEtcd, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, *etcdRef, cluster.Namespace)
 	if err != nil {
 		if apierrors.IsNotFound(errors.Cause(err)) {
 			log.Info("Could not find external object for cluster, requeuing", "refGroupVersionKind", etcdRef.GroupKind(), "refName", etcdRef.Name)
@@ -412,7 +412,7 @@ func (r *Reconciler) reconcileEtcdCluster(ctx context.Context, s *scope) (ctrl.R
 		return ctrl.Result{}, nil
 	}
 	// Call generic external reconciler.
-	obj, err := r.reconcileExternal(ctx, cluster, cluster.Spec.ManagedExternalEtcdRef)
+	obj, err := r.reconcileExternal(ctx, cluster, *cluster.Spec.ManagedExternalEtcdRef)
 	etcdPlaneReconcileResult := external.ReconcileOutput{Result: obj}
 	if err != nil {
 		return ctrl.Result{}, err
diff --git a/internal/controllers/cluster/cluster_controller_test.go b/internal/controllers/cluster/cluster_controller_test.go
index a627b9f97..ffe701f7f 100644
--- a/internal/controllers/cluster/cluster_controller_test.go
+++ b/internal/controllers/cluster/cluster_controller_test.go
@@ -931,7 +931,7 @@ func TestFilterOwnedDescendants(t *testing.T) {
 			Name: "c",
 		},
 		Spec: clusterv1.ClusterSpec{
-			ManagedExternalEtcdRef: clusterv1.ContractVersionedObjectReference{},
+			ManagedExternalEtcdRef: &clusterv1.ContractVersionedObjectReference{},
 		},
 	}
 
diff --git a/internal/controllers/machine/machine_controller_phases.go b/internal/controllers/machine/machine_controller_phases.go
index a3789efa9..7a77dabbf 100644
--- a/internal/controllers/machine/machine_controller_phases.go
+++ b/internal/controllers/machine/machine_controller_phases.go
@@ -343,7 +343,7 @@ func (r *Reconciler) reconcileInfrastructure(ctx context.Context, s *scope) (ctr
 		// set first node's IP address on EtcdCluster
 		// get etcd cluster
 		ref := cluster.Spec.ManagedExternalEtcdRef
-		obj, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, ref, cluster.Namespace)
+		obj, err := external.GetObjectFromContractVersionedRef(ctx, r.Client, *ref, cluster.Namespace)
 		if err != nil {
 			if apierrors.IsNotFound(errors.Cause(err)) {
 				return ctrl.Result{}, err
-- 
2.51.0

