From 923c76131f06de4a2cb789cd9ecd5afa3afc97ee Mon Sep 17 00:00:00 2001
From: Vignesh Goutham Ganesh <vgg@amazon.com>
Date: Tue, 16 May 2023 11:03:09 -0500
Subject: [PATCH 32/41] CAPI Move Cluster Filter

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>
---
 cmd/clusterctl/client/cluster/mover.go        |  31 ++--
 cmd/clusterctl/client/cluster/mover_test.go   |  20 +--
 cmd/clusterctl/client/cluster/objectgraph.go  |  40 +++++-
 .../client/cluster/objectgraph_test.go        | 134 +++++++++++++++++-
 cmd/clusterctl/client/move.go                 |  10 +-
 cmd/clusterctl/client/move_test.go            |   8 +-
 cmd/clusterctl/cmd/move.go                    |   4 +
 7 files changed, 214 insertions(+), 33 deletions(-)

diff --git a/cmd/clusterctl/client/cluster/mover.go b/cmd/clusterctl/client/cluster/mover.go
index 61270d3a7..ca2757e7f 100644
--- a/cmd/clusterctl/client/cluster/mover.go
+++ b/cmd/clusterctl/client/cluster/mover.go
@@ -51,13 +51,16 @@ type ResourceMutatorFunc func(u *unstructured.Unstructured) error
 // ObjectMover defines methods for moving Cluster API objects to another management cluster.
 type ObjectMover interface {
 	// Move moves all the Cluster API objects existing in a namespace (or from all the namespaces if empty) to a target management cluster.
-	Move(ctx context.Context, namespace string, toCluster Client, dryRun bool, mutators ...ResourceMutatorFunc) error
+	// If `clusterName` is specified (not empty string), only objects belonging to the cluster will be moved.
+	Move(ctx context.Context, namespace string, toCluster Client, clusterName string, dryRun bool, mutators ...ResourceMutatorFunc) error
 
 	// ToDirectory writes all the Cluster API objects existing in a namespace (or from all the namespaces if empty) to a target directory.
-	ToDirectory(ctx context.Context, namespace string, directory string) error
+	// If `clusterName` is specified (not empty string), only objects belonging to the cluster will be moved.
+	ToDirectory(ctx context.Context, namespace string, directory, clusterName string) error
 
 	// FromDirectory reads all the Cluster API objects existing in a configured directory to a target management cluster.
-	FromDirectory(ctx context.Context, toCluster Client, directory string) error
+	// If `clusterName` is specified (not empty string), only objects belonging to the cluster will be moved.
+	FromDirectory(ctx context.Context, toCluster Client, directory, clusterName string) error
 }
 
 // objectMover implements the ObjectMover interface.
@@ -70,7 +73,7 @@ type objectMover struct {
 // ensure objectMover implements the ObjectMover interface.
 var _ ObjectMover = &objectMover{}
 
-func (o *objectMover) Move(ctx context.Context, namespace string, toCluster Client, dryRun bool, mutators ...ResourceMutatorFunc) error {
+func (o *objectMover) Move(ctx context.Context, namespace string, toCluster Client, clusterName string, dryRun bool, mutators ...ResourceMutatorFunc) error {
 	log := logf.Log
 	log.Info("Performing move...")
 	o.dryRun = dryRun
@@ -87,7 +90,7 @@ func (o *objectMover) Move(ctx context.Context, namespace string, toCluster Clie
 		}
 	}
 
-	objectGraph, err := o.getObjectGraph(ctx, namespace)
+	objectGraph, err := o.getObjectGraph(ctx, namespace, clusterName)
 	if err != nil {
 		return errors.Wrap(err, "failed to get object graph")
 	}
@@ -101,11 +104,11 @@ func (o *objectMover) Move(ctx context.Context, namespace string, toCluster Clie
 	return o.move(ctx, objectGraph, proxy, mutators...)
 }
 
-func (o *objectMover) ToDirectory(ctx context.Context, namespace string, directory string) error {
+func (o *objectMover) ToDirectory(ctx context.Context, namespace string, directory, clusterName string) error {
 	log := logf.Log
 	log.Info("Moving to directory...")
 
-	objectGraph, err := o.getObjectGraph(ctx, namespace)
+	objectGraph, err := o.getObjectGraph(ctx, namespace, clusterName)
 	if err != nil {
 		return errors.Wrap(err, "failed to get object graph")
 	}
@@ -113,7 +116,7 @@ func (o *objectMover) ToDirectory(ctx context.Context, namespace string, directo
 	return o.toDirectory(ctx, objectGraph, directory)
 }
 
-func (o *objectMover) FromDirectory(ctx context.Context, toCluster Client, directory string) error {
+func (o *objectMover) FromDirectory(ctx context.Context, toCluster Client, directory, clusterName string) error {
 	log := logf.Log
 	log.Info("Moving from directory...")
 
@@ -147,6 +150,14 @@ func (o *objectMover) FromDirectory(ctx context.Context, toCluster Client, direc
 	// Check whether nodes are not included in GVK considered for fromDirectory.
 	objectGraph.checkVirtualNode()
 
+	// Filter and remove nodes in the graph that do not belong to cluster
+	if clusterName != "" {
+		err = objectGraph.filterCluster(clusterName)
+		if err != nil {
+			return errors.Wrap(err, "failed to filter for cluster")
+		}
+	}
+
 	// Restore the objects to the target cluster.
 	proxy := toCluster.Proxy()
 
@@ -184,7 +195,7 @@ func (o *objectMover) filesToObjs(dir string) ([]unstructured.Unstructured, erro
 	return objs, nil
 }
 
-func (o *objectMover) getObjectGraph(ctx context.Context, namespace string) (*objectGraph, error) {
+func (o *objectMover) getObjectGraph(ctx context.Context, namespace, clusterName string) (*objectGraph, error) {
 	objectGraph := newObjectGraph(o.fromProxy, o.fromProviderInventory)
 
 	// Gets all the types defined by the CRDs installed by clusterctl plus the ConfigMap/Secret core types.
@@ -196,7 +207,7 @@ func (o *objectMover) getObjectGraph(ctx context.Context, namespace string) (*ob
 	// Discovery the object graph for the selected types:
 	// - Nodes are defined the Kubernetes objects (Clusters, Machines etc.) identified during the discovery process.
 	// - Edges are derived by the OwnerReferences between nodes.
-	if err := objectGraph.Discovery(ctx, namespace); err != nil {
+	if err := objectGraph.Discovery(ctx, namespace, clusterName); err != nil {
 		return nil, errors.Wrap(err, "failed to discover the object graph")
 	}
 
diff --git a/cmd/clusterctl/client/cluster/mover_test.go b/cmd/clusterctl/client/cluster/mover_test.go
index dee567918..78776c5b4 100644
--- a/cmd/clusterctl/client/cluster/mover_test.go
+++ b/cmd/clusterctl/client/cluster/mover_test.go
@@ -738,7 +738,7 @@ func Test_objectMover_backupTargetObject(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			// Run backupTargetObject on nodes in graph
 			mover := objectMover{
@@ -829,7 +829,7 @@ func Test_objectMover_restoreTargetObject(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			// gets a fakeProxy to an empty cluster with all the required CRDs
 			toProxy := getFakeProxyWithCRDs()
@@ -937,7 +937,7 @@ func Test_objectMover_toDirectory(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			// Run toDirectory
 			mover := objectMover{
@@ -1158,7 +1158,7 @@ func Test_getMoveSequence(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			moveSequence := getMoveSequence(graph)
 			g.Expect(moveSequence.groups).To(HaveLen(len(tt.wantMoveGroups)))
@@ -1191,7 +1191,7 @@ func Test_objectMover_move_dryRun(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			// gets a fakeProxy to an empty cluster with all the required CRDs
 			toProxy := getFakeProxyWithCRDs()
@@ -1266,7 +1266,7 @@ func Test_objectMover_move(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			// gets a fakeProxy to an empty cluster with all the required CRDs
 			toProxy := getFakeProxyWithCRDs()
@@ -1378,7 +1378,7 @@ func Test_objectMover_move_with_Mutator(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			// gets a fakeProxy to an empty cluster with all the required CRDs
 			toProxy := getFakeProxyWithCRDs()
@@ -1663,7 +1663,7 @@ func Test_objectMover_checkProvisioningCompleted(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			o := &objectMover{
 				fromProxy: graph.proxy,
@@ -1909,7 +1909,7 @@ func Test_objectMoverService_ensureNamespaces(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// Trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			mover := objectMover{
 				fromProxy: graph.proxy,
@@ -2388,7 +2388,7 @@ func TestWaitReadyForMove(t *testing.T) {
 			g.Expect(graph.getDiscoveryTypes(ctx)).To(Succeed())
 
 			// trigger discovery the content of the source cluster
-			g.Expect(graph.Discovery(ctx, "")).To(Succeed())
+			g.Expect(graph.Discovery(ctx, "", "")).To(Succeed())
 
 			backoff := wait.Backoff{
 				Steps: 1,
diff --git a/cmd/clusterctl/client/cluster/objectgraph.go b/cmd/clusterctl/client/cluster/objectgraph.go
index 454ec27a8..42e1e2ef1 100644
--- a/cmd/clusterctl/client/cluster/objectgraph.go
+++ b/cmd/clusterctl/client/cluster/objectgraph.go
@@ -417,8 +417,8 @@ func getCRDList(ctx context.Context, proxy Proxy, crdList *apiextensionsv1.Custo
 }
 
 // Discovery reads all the Kubernetes objects existing in a namespace (or in all namespaces if empty) for the types received in input, and then adds
-// everything to the objects graph.
-func (o *objectGraph) Discovery(ctx context.Context, namespace string) error {
+// everything to the objects graph. Filters for objects only belonging to specific cluster if provided.
+func (o *objectGraph) Discovery(ctx context.Context, namespace, clusterName string) error {
 	log := logf.Log
 	log.Info("Discovering Cluster API objects")
 
@@ -480,6 +480,42 @@ func (o *objectGraph) Discovery(ctx context.Context, namespace string) error {
 	// Completes the graph by setting for each node the list of tenants the node belongs to.
 	o.setTenants()
 
+	// Filter and remove nodes in the graph that do not belong to cluster
+	if clusterName != "" {
+		return o.filterCluster(clusterName)
+	}
+
+	return nil
+}
+
+// filterCluster removes all objects but provided cluster and its dependents and soft-dependents
+func (o *objectGraph) filterCluster(clusterName string) error {
+	for _, object := range o.getNodes() {
+
+		hasFilterCluster := false
+		var clusterTenants []string
+		for tenant, _ := range object.tenant {
+			if tenant.identity.GroupVersionKind().GroupKind() == clusterv1.GroupVersion.WithKind("Cluster").GroupKind() {
+				clusterTenants = append(clusterTenants, tenant.identity.Name)
+				if tenant.identity.Name == clusterName {
+					hasFilterCluster = true
+				}
+			}
+		}
+
+		// Return error only when node has more than 1 cluster tenant and one of those cluster tenant is the clusterName
+		// being filtered for. This is to prevent moving an object that more than one cluster is dependent on.
+		if hasFilterCluster && len(clusterTenants) > 1 {
+			return fmt.Errorf("resource %s is a dependent of clusters %s. Only one cluster dependent allowed",
+				object.identity.Name, strings.Join(clusterTenants, ","))
+		}
+
+		if !hasFilterCluster {
+			if _, ok := o.uidToNode[object.identity.UID]; ok {
+				delete(o.uidToNode, object.identity.UID)
+			}
+		}
+	}
 	return nil
 }
 
diff --git a/cmd/clusterctl/client/cluster/objectgraph_test.go b/cmd/clusterctl/client/cluster/objectgraph_test.go
index 258acda9d..8586ef19c 100644
--- a/cmd/clusterctl/client/cluster/objectgraph_test.go
+++ b/cmd/clusterctl/client/cluster/objectgraph_test.go
@@ -1043,7 +1043,6 @@ var objectGraphsTests = []struct {
 		},
 		want: wantGraph{
 			nodes: map[string]wantGraphItem{
-
 				"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureMachineTemplate, ns1/shared": {
 					owners: []string{
 						"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1",
@@ -1790,7 +1789,7 @@ func TestObjectGraph_Discovery(t *testing.T) {
 			g.Expect(err).ToNot(HaveOccurred())
 
 			// finally test discovery
-			err = graph.Discovery(ctx, "")
+			err = graph.Discovery(ctx, "", "")
 			if tt.wantErr {
 				g.Expect(err).To(HaveOccurred())
 				return
@@ -1807,7 +1806,7 @@ func TestObjectGraph_DiscoveryByNamespace(t *testing.T) {
 		namespace string
 		objs      []client.Object
 	}
-	var tests = []struct {
+	tests := []struct {
 		name    string
 		args    args
 		want    wantGraph
@@ -1948,7 +1947,134 @@ func TestObjectGraph_DiscoveryByNamespace(t *testing.T) {
 			g.Expect(err).ToNot(HaveOccurred())
 
 			// finally test discovery
-			err = graph.Discovery(ctx, tt.args.namespace)
+			err = graph.Discovery(ctx, tt.args.namespace, "")
+			if tt.wantErr {
+				g.Expect(err).To(HaveOccurred())
+				return
+			}
+
+			g.Expect(err).ToNot(HaveOccurred())
+			assertGraph(t, graph, tt.want)
+		})
+	}
+}
+
+func TestObjectGraph_DiscoveryByCluster(t *testing.T) {
+	type args struct {
+		cluster string
+		objs    []client.Object
+	}
+	tests := []struct {
+		name    string
+		args    args
+		want    wantGraph
+		wantErr bool
+	}{
+		{
+			name: "two clusters, read both",
+			args: args{
+				cluster: "", // read all the namespaces
+				objs: func() []client.Object {
+					objs := []client.Object{}
+					objs = append(objs, test.NewFakeCluster("ns1", "cluster1").Objs()...)
+					objs = append(objs, test.NewFakeCluster("ns2", "cluster2").Objs()...)
+					return objs
+				}(),
+			},
+			want: wantGraph{
+				nodes: map[string]wantGraphItem{
+					"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1": {
+						forceMove:          true,
+						forceMoveHierarchy: true,
+					},
+					"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureCluster, ns1/cluster1": {
+						owners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1",
+						},
+					},
+					"/v1, Kind=Secret, ns1/cluster1-ca": {
+						softOwners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1", // NB. this secret is not linked to the cluster through owner ref
+						},
+					},
+					"/v1, Kind=Secret, ns1/cluster1-kubeconfig": {
+						owners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1",
+						},
+					},
+					"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/cluster2": {
+						forceMove:          true,
+						forceMoveHierarchy: true,
+					},
+					"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureCluster, ns2/cluster2": {
+						owners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/cluster2",
+						},
+					},
+					"/v1, Kind=Secret, ns2/cluster2-ca": {
+						softOwners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/cluster2", // NB. this secret is not linked to the cluster through owner ref
+						},
+					},
+					"/v1, Kind=Secret, ns2/cluster2-kubeconfig": {
+						owners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/cluster2",
+						},
+					},
+				},
+			},
+		},
+		{
+			name: "two clusters, read only 1",
+			args: args{
+				cluster: "cluster1", // read only from ns1
+				objs: func() []client.Object {
+					objs := []client.Object{}
+					objs = append(objs, test.NewFakeCluster("ns1", "cluster1").Objs()...)
+					objs = append(objs, test.NewFakeCluster("ns1", "cluster2").Objs()...)
+					return objs
+				}(),
+			},
+			want: wantGraph{
+				nodes: map[string]wantGraphItem{
+					"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1": {
+						forceMove:          true,
+						forceMoveHierarchy: true,
+					},
+					"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureCluster, ns1/cluster1": {
+						owners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1",
+						},
+					},
+					"/v1, Kind=Secret, ns1/cluster1-ca": {
+						softOwners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1", // NB. this secret is not linked to the cluster through owner ref
+						},
+					},
+					"/v1, Kind=Secret, ns1/cluster1-kubeconfig": {
+						owners: []string{
+							"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/cluster1",
+						},
+					},
+				},
+			},
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			g := NewWithT(t)
+			ctx := context.Background()
+
+			// Create an objectGraph bound to a source cluster with all the CRDs for the types involved in the test.
+			graph := getObjectGraphWithObjs(tt.args.objs)
+
+			// Get all the types to be considered for discovery
+			err := graph.getDiscoveryTypes(ctx)
+			g.Expect(err).ToNot(HaveOccurred())
+
+			// finally test discovery
+			err = graph.Discovery(ctx, "", tt.args.cluster)
 			if tt.wantErr {
 				g.Expect(err).To(HaveOccurred())
 				return
diff --git a/cmd/clusterctl/client/move.go b/cmd/clusterctl/client/move.go
index 6d5299cc9..977f8b881 100644
--- a/cmd/clusterctl/client/move.go
+++ b/cmd/clusterctl/client/move.go
@@ -39,6 +39,10 @@ type MoveOptions struct {
 	// namespace will be used.
 	Namespace string
 
+	// ClusterName defines the name of the workload cluster and its dependent objects to be moved. If unspecified,
+	// all the clusters will be moved.
+	ClusterName string
+
 	// ExperimentalResourceMutatorFn accepts any number of resource mutator functions that are applied on all resources being moved.
 	// This is an experimental feature and is exposed only from the library and not (yet) through the CLI.
 	ExperimentalResourceMutators []cluster.ResourceMutatorFunc
@@ -99,7 +103,7 @@ func (c *clusterctlClient) move(ctx context.Context, options MoveOptions) error
 		}
 	}
 
-	return fromCluster.ObjectMover().Move(ctx, options.Namespace, toCluster, options.DryRun, options.ExperimentalResourceMutators...)
+	return fromCluster.ObjectMover().Move(ctx, options.Namespace, toCluster, options.ClusterName, options.DryRun, options.ExperimentalResourceMutators...)
 }
 
 func (c *clusterctlClient) fromDirectory(ctx context.Context, options MoveOptions) error {
@@ -112,7 +116,7 @@ func (c *clusterctlClient) fromDirectory(ctx context.Context, options MoveOption
 		return err
 	}
 
-	return toCluster.ObjectMover().FromDirectory(ctx, toCluster, options.FromDirectory)
+	return toCluster.ObjectMover().FromDirectory(ctx, toCluster, options.FromDirectory, options.ClusterName)
 }
 
 func (c *clusterctlClient) toDirectory(ctx context.Context, options MoveOptions) error {
@@ -134,7 +138,7 @@ func (c *clusterctlClient) toDirectory(ctx context.Context, options MoveOptions)
 		return err
 	}
 
-	return fromCluster.ObjectMover().ToDirectory(ctx, options.Namespace, options.ToDirectory)
+	return fromCluster.ObjectMover().ToDirectory(ctx, options.Namespace, options.ToDirectory, options.ClusterName)
 }
 
 func (c *clusterctlClient) getClusterClient(ctx context.Context, kubeconfig Kubeconfig) (cluster.Client, error) {
diff --git a/cmd/clusterctl/client/move_test.go b/cmd/clusterctl/client/move_test.go
index 83ad30d67..f5c516859 100644
--- a/cmd/clusterctl/client/move_test.go
+++ b/cmd/clusterctl/client/move_test.go
@@ -307,11 +307,11 @@ type fakeObjectMover struct {
 	fromDirectoryErr error
 }
 
-func (f *fakeObjectMover) Move(_ context.Context, _ string, _ cluster.Client, _ bool, _ ...cluster.ResourceMutatorFunc) error {
+func (f *fakeObjectMover) Move(_ context.Context, _ string, _ cluster.Client, _ string, _ bool, _ ...cluster.ResourceMutatorFunc) error {
 	return f.moveErr
 }
 
-func (f *fakeObjectMover) ToDirectory(_ context.Context, _ string, _ string) error {
+func (f *fakeObjectMover) ToDirectory(_ context.Context, _ string, _, _ string) error {
 	return f.toDirectoryErr
 }
 
@@ -319,10 +319,10 @@ func (f *fakeObjectMover) Backup(_ context.Context, _ string, _ string) error {
 	return f.toDirectoryErr
 }
 
-func (f *fakeObjectMover) FromDirectory(_ context.Context, _ cluster.Client, _ string) error {
+func (f *fakeObjectMover) FromDirectory(_ context.Context, _ cluster.Client, _, _ string) error {
 	return f.fromDirectoryErr
 }
 
-func (f *fakeObjectMover) Restore(_ context.Context, _ cluster.Client, _ string) error {
+func (f *fakeObjectMover) Restore(_ context.Context, _ cluster.Client, _, _ string) error {
 	return f.fromDirectoryErr
 }
diff --git a/cmd/clusterctl/cmd/move.go b/cmd/clusterctl/cmd/move.go
index c8316b376..7ba98b264 100644
--- a/cmd/clusterctl/cmd/move.go
+++ b/cmd/clusterctl/cmd/move.go
@@ -31,6 +31,7 @@ type moveOptions struct {
 	toKubeconfig          string
 	toKubeconfigContext   string
 	namespace             string
+	filterCluster         string
 	fromDirectory         string
 	toDirectory           string
 	dryRun                bool
@@ -80,6 +81,8 @@ func init() {
 		"Write Cluster API objects and all dependencies from a management cluster to directory.")
 	moveCmd.Flags().StringVar(&mo.fromDirectory, "from-directory", "",
 		"Read Cluster API objects and all dependencies from a directory into a management cluster.")
+	moveCmd.Flags().StringVar(&mo.filterCluster, "filter-cluster", "",
+		"Name of the cluster to be moved. All the dependent objects will also be moved. If empty, all clusters will be moved")
 
 	moveCmd.MarkFlagsMutuallyExclusive("to-directory", "to-kubeconfig")
 	moveCmd.MarkFlagsMutuallyExclusive("from-directory", "to-directory")
@@ -109,6 +112,7 @@ func runMove() error {
 		FromDirectory:  mo.fromDirectory,
 		ToDirectory:    mo.toDirectory,
 		Namespace:      mo.namespace,
+		ClusterName:    mo.filterCluster,
 		DryRun:         mo.dryRun,
 	})
 }
-- 
2.46.0

