From 9971a50c08e4560422dd5f22a45a455badd05167 Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Wed, 14 Dec 2022 12:47:42 -0800
Subject: [PATCH 17/34] add support for registry credentials

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 .../internal/bottlerocket/bootstrap.go        | 18 +++++++
 .../internal/bottlerocket/bottlerocket.go     | 25 ++++++++--
 .../controllers/kubeadmconfig_controller.go   | 47 +++++++++++++++++++
 util/secret/consts.go                         |  3 ++
 4 files changed, 89 insertions(+), 4 deletions(-)

diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index fe280e091..58f38ca34 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -72,6 +72,20 @@ no-proxy = [{{stringsJoin .NoProxyEndpoints "," }}]
 data = "{{.RegistryMirrorCACert}}"
 trusted=true
 {{- end -}}
+`
+	// We need to assign creds for "public.ecr.aws" because host-ctr expects credentials to be assigned
+	// to "public.ecr.aws" rather than the mirror's endpoint
+	// TODO: Once the bottlerocket fixes are in we need to remove the "public.ecr.aws" creds
+	registryMirrorCredentialsTemplate = `{{define "registryMirrorCredentialsSettings" -}}
+[[settings.container-registry.credentials]]
+registry = "public.ecr.aws"
+username = "{{.RegistryMirrorUsername}}"
+password = "{{.RegistryMirrorPassword}}"
+[[settings.container-registry.credentials]]
+registry = "{{.RegistryMirrorEndpoint}}"
+username = "{{.RegistryMirrorUsername}}"
+password = "{{.RegistryMirrorPassword}}"
+{{- end -}}
 `
 	nodeLabelsTemplate = `{{ define "nodeLabelSettings" -}}
 [settings.kubernetes.node-labels]
@@ -104,6 +118,10 @@ trusted=true
 {{template "registryMirrorCACertSettings" .}}
 {{- end -}}
 
+{{- if and (ne .RegistryMirrorUsername "") (ne .RegistryMirrorPassword "")}}
+{{template "registryMirrorCredentialsSettings" .}}
+{{- end -}}
+
 {{- if (ne .NodeLabels "")}}
 {{template "nodeLabelSettings" .}}
 {{- end -}}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index a7469b680..81e7fa655 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -33,6 +33,7 @@ type BottlerocketConfig struct {
 	Taints                                []corev1.Taint
 	BottlerocketCustomHostContainers      []bootstrapv1.BottlerocketHostContainer
 	BottlerocketCustomBootstrapContainers []bootstrapv1.BottlerocketBootstrapContainer
+	RegistryMirrorCredentials
 }
 
 type BottlerocketSettingsInput struct {
@@ -45,6 +46,8 @@ type BottlerocketSettingsInput struct {
 	NoProxyEndpoints           []string
 	RegistryMirrorEndpoint     string
 	RegistryMirrorCACert       string
+	RegistryMirrorUsername     string
+	RegistryMirrorPassword     string
 	NodeLabels                 string
 	Taints                     string
 	ProviderId                 string
@@ -57,6 +60,11 @@ type HostPath struct {
 	Type string
 }
 
+type RegistryMirrorCredentials struct {
+	Username string
+	Password string
+}
+
 func generateBootstrapContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
 	tm := template.New(kind).Funcs(defaultTemplateFuncMap)
 	if _, err := tm.Parse(filesTemplate); err != nil {
@@ -128,6 +136,9 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 	if _, err := tm.Parse(registryMirrorCACertTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse registry mirror ca cert %s template", kind)
 	}
+	if _, err := tm.Parse(registryMirrorCredentialsTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse registry mirror credentials %s template", kind)
+	}
 	if _, err := tm.Parse(nodeLabelsTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse node labels %s template", kind)
 	}
@@ -163,10 +174,11 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 
 	hostContainers := []bootstrapv1.BottlerocketHostContainer{
 		{
-			Name:         "admin",
-			Superpowered: true,
-			ImageMeta:    config.BottlerocketAdmin.ImageMeta,
-			UserData:     b64AdminContainerUserData,
+			Name:            "admin",
+			Superpowered:    true,
+			ImageRepository: config.BottlerocketAdmin.ImageRepository,
+			ImageTag:        config.BottlerocketBootstrap.ImageTag,
+			UserData:        b64AdminContainerUserData,
 		},
 		{
 			Name:            "kubeadm-bootstrap",
@@ -211,6 +223,11 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 		bottlerocketInput.RegistryMirrorCACert = base64.StdEncoding.EncodeToString([]byte(config.RegistryMirrorConfiguration.CACert))
 	}
 
+	if config.RegistryMirrorCredentials.Username != "" && config.RegistryMirrorCredentials.Password != "" {
+		bottlerocketInput.RegistryMirrorUsername = config.RegistryMirrorCredentials.Username
+		bottlerocketInput.RegistryMirrorPassword = config.RegistryMirrorCredentials.Password
+	}
+
 	bottlerocketNodeUserData, err := generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
 	if err != nil {
 		return nil, err
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index ef04798a4..07028e019 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -70,6 +70,11 @@ const (
 	DefaultTokenTTL = 15 * time.Minute
 )
 
+const (
+	RegistryUsername = "username"
+	RegistryPassword = "password"
+)
+
 // InitLocker is a lock that is used around kubeadm init.
 type InitLocker interface {
 	Lock(ctx context.Context, cluster *clusterv1.Cluster, machine *clusterv1.Machine) bool
@@ -575,6 +580,13 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 		}
 		if scope.Config.Spec.ClusterConfiguration.RegistryMirror.Endpoint != "" {
 			bottlerocketConfig.RegistryMirrorConfiguration = scope.Config.Spec.ClusterConfiguration.RegistryMirror
+			registryUsername, registryPassword, err := r.resolveRegistryCredentials(ctx, scope.Config)
+			if err != nil {
+				scope.Info("Cannot find secret for registry credentials, proceeding without registry credentials")
+			} else {
+				bottlerocketConfig.RegistryMirrorCredentials.Username = string(registryUsername)
+				bottlerocketConfig.RegistryMirrorCredentials.Password = string(registryPassword)
+			}
 		}
 		if scope.Config.Spec.InitConfiguration.NodeRegistration.KubeletExtraArgs != nil {
 			bottlerocketConfig.KubeletExtraArgs = scope.Config.Spec.InitConfiguration.NodeRegistration.KubeletExtraArgs
@@ -881,6 +893,13 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 		}
 		if scope.Config.Spec.JoinConfiguration.RegistryMirror.Endpoint != "" {
 			bottlerocketConfig.RegistryMirrorConfiguration = scope.Config.Spec.JoinConfiguration.RegistryMirror
+			registryUsername, registryPassword, err := r.resolveRegistryCredentials(ctx, scope.Config)
+			if err != nil {
+				scope.Info("Cannot find secret for registry credentials, proceeding without registry credentials”")
+			} else {
+				bottlerocketConfig.RegistryMirrorCredentials.Username = string(registryUsername)
+				bottlerocketConfig.RegistryMirrorCredentials.Password = string(registryPassword)
+			}
 		}
 		if scope.Config.Spec.JoinConfiguration.NodeRegistration.KubeletExtraArgs != nil {
 			bottlerocketConfig.KubeletExtraArgs = scope.Config.Spec.JoinConfiguration.NodeRegistration.KubeletExtraArgs
@@ -1068,6 +1087,13 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 		}
 		if scope.Config.Spec.ClusterConfiguration.RegistryMirror.Endpoint != "" {
 			bottlerocketConfig.RegistryMirrorConfiguration = scope.Config.Spec.ClusterConfiguration.RegistryMirror
+			registryUsername, registryPassword, err := r.resolveRegistryCredentials(ctx, scope.Config)
+			if err != nil {
+				scope.Info("Cannot find secret for registry credentials, proceeding without registry credentials”")
+			} else {
+				bottlerocketConfig.RegistryMirrorCredentials.Username = string(registryUsername)
+				bottlerocketConfig.RegistryMirrorCredentials.Password = string(registryPassword)
+			}
 		}
 		if scope.Config.Spec.JoinConfiguration.NodeRegistration.KubeletExtraArgs != nil {
 			bottlerocketConfig.KubeletExtraArgs = scope.Config.Spec.JoinConfiguration.NodeRegistration.KubeletExtraArgs
@@ -1254,6 +1280,27 @@ func (r *KubeadmConfigReconciler) tokenCheckRefreshOrRotationInterval() time.Dur
 	return r.TokenTTL / 3
 }
 
+// resolveRegistryCredentials returns username and password fetched from a secret object.
+func (r *KubeadmConfigReconciler) resolveRegistryCredentials(ctx context.Context, source *bootstrapv1.KubeadmConfig) ([]byte, []byte, error) {
+	key := types.NamespacedName{Namespace: source.Namespace, Name: secret.RegistryCredentials}
+	secret := &corev1.Secret{}
+	if err := r.Client.Get(ctx, key, secret); err != nil {
+		if apierrors.IsNotFound(err) {
+			return nil, nil, errors.Wrapf(err, "secret not found: %s", key)
+		}
+		return nil, nil, errors.Wrapf(err, "failed to retrieve Secret %q", key)
+	}
+	username, ok := secret.Data[RegistryUsername]
+	if !ok {
+		return nil, nil, errors.Errorf("secret references non-existent secret key: %q", "username")
+	}
+	password, ok := secret.Data[RegistryPassword]
+	if !ok {
+		return nil, nil, errors.Errorf("secret references non-existent secret key: %q", "password")
+	}
+	return username, password, nil
+}
+
 // ClusterToKubeadmConfigs is a handler.ToRequestsFunc to be used to enqueue
 // requests for reconciliation of KubeadmConfigs.
 func (r *KubeadmConfigReconciler) ClusterToKubeadmConfigs(ctx context.Context, o client.Object) []ctrl.Request {
diff --git a/util/secret/consts.go b/util/secret/consts.go
index 043764325..17abd5d70 100644
--- a/util/secret/consts.go
+++ b/util/secret/consts.go
@@ -25,6 +25,9 @@ const (
 
 	// TLSCrtDataName is the key used to store a TLS certificate in the secret's data field.
 	TLSCrtDataName = "tls.crt"
+
+	// RegistryCredentials is the secret name of secret containing registryMirror credentials.
+	RegistryCredentials = "registry-credentials"
 )
 
 // Purpose is the name to append to the secret generated for a cluster.
-- 
2.47.1

