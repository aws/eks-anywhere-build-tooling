From 435d1cdea291333021f6db0f3a74a06da6178ebb Mon Sep 17 00:00:00 2001
From: ahreehong <46465244+ahreehong@users.noreply.github.com>
Date: Fri, 19 May 2023 16:29:08 -0400
Subject: [PATCH 28/40] Add support for custom cert bundles in BR (#21)

* add support for custom cert bundles br

* take in non base-64 encoded data for cert

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 .../kubeadm/api/v1beta1/kubeadm_types.go      | 17 ++++
 .../api/v1beta1/zz_generated.deepcopy.go      | 25 ++++++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 80 +++++++++++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 85 +++++++++++++++++++
 .../internal/bottlerocket/bootstrap.go        | 16 ++++
 .../internal/bottlerocket/bootstrap_test.go   | 53 ++++++++++++
 .../internal/bottlerocket/bottlerocket.go     | 14 +++
 .../controllers/kubeadmconfig_controller.go   |  9 ++
 .../kubeadm/types/upstreamv1beta1/types.go    | 17 ++++
 .../zz_generated.conversion.go                | 36 ++++++++
 .../upstreamv1beta1/zz_generated.deepcopy.go  | 25 ++++++
 .../zz_generated.conversion.go                |  2 +
 .../zz_generated.conversion.go                |  2 +
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 80 +++++++++++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 51 +++++++++++
 .../kubeadm/v1alpha4/kubeadm_types.go         | 17 ++++
 .../v1alpha4/zz_generated.conversion.go       | 36 ++++++++
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go | 25 ++++++
 18 files changed, 590 insertions(+)

diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
index eb8e30688..1f343bab3 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
@@ -204,6 +204,10 @@ type ClusterConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
+	// CertBundles holds additional trusted cert bundles.
+	// +optional
+	CertBundles []CertBundle `json:"certBundles,omitempty"`
 }
 
 // BottlerocketSettings define bottlerocket settings that can be configured on bottlerocket nodes.
@@ -719,6 +723,10 @@ type JoinConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
+	// CertBundles holds additional trusted cert bundles.
+	// +optional
+	CertBundles []CertBundle `json:"certBundles,omitempty"`
 }
 
 // BottlerocketHostContainer describes a host image for Bottlerocket
@@ -759,6 +767,15 @@ type BottlerocketBootstrapContainer struct {
 	UserData string `json:"userData,omitempty"`
 }
 
+// CertBundle holds the cert data.
+type CertBundle struct {
+	// Name is the name of the cert bundle.
+	Name string `json:"name"`
+
+	// Data is the actual cert.
+	Data string `json:"data"`
+}
+
 // JoinControlPlane contains elements describing an additional control plane instance to be deployed on the joining node.
 type JoinControlPlane struct {
 	// localAPIEndpoint represents the endpoint of the API server instance to be deployed on this node.
diff --git a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
index 8888ce7f7..3a5cc9b92 100644
--- a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
@@ -330,6 +330,21 @@ func (in *BottlerocketSettings) DeepCopy() *BottlerocketSettings {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *CertBundle) DeepCopyInto(out *CertBundle) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertBundle.
+func (in *CertBundle) DeepCopy() *CertBundle {
+	if in == nil {
+		return nil
+	}
+	out := new(CertBundle)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -368,6 +383,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 		*out = new(BottlerocketSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.CertBundles != nil {
+		in, out := &in.CertBundles, &out.CertBundles
+		*out = make([]CertBundle, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -851,6 +871,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = new(BottlerocketSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.CertBundles != nil {
+		in, out := &in.CertBundles, &out.CertBundles
+		*out = make([]CertBundle, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index 42884def1..b194d49da 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -290,6 +290,22 @@ spec:
                       - superpowered
                       type: object
                     type: array
+                  certBundles:
+                    description: CertBundles holds additional trusted cert bundles.
+                    items:
+                      description: CertBundle holds the cert data.
+                      properties:
+                        data:
+                          description: Data is the actual cert.
+                          type: string
+                        name:
+                          description: Name is the name of the cert bundle.
+                          type: string
+                      required:
+                      - data
+                      - name
+                      type: object
+                    type: array
                   certificatesDir:
                     description: |-
                       CertificatesDir specifies where to store or look for all required certificates.
@@ -1079,6 +1095,22 @@ spec:
                       secure comunications between node and control-plane.
                       Defaults to "/etc/kubernetes/pki/ca.crt".
                     type: string
+                  certBundles:
+                    description: CertBundles holds additional trusted cert bundles.
+                    items:
+                      description: CertBundle holds the cert data.
+                      properties:
+                        data:
+                          description: Data is the actual cert.
+                          type: string
+                        name:
+                          description: Name is the name of the cert bundle.
+                          type: string
+                      required:
+                      - data
+                      - name
+                      type: object
+                    type: array
                   controlPlane:
                     description: |-
                       ControlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -1740,6 +1772,22 @@ spec:
                       - superpowered
                       type: object
                     type: array
+                  certBundles:
+                    description: CertBundles holds additional trusted cert bundles.
+                    items:
+                      description: CertBundle holds the cert data.
+                      properties:
+                        data:
+                          description: Data is the actual cert.
+                          type: string
+                        name:
+                          description: Name is the name of the cert bundle.
+                          type: string
+                      required:
+                      - data
+                      - name
+                      type: object
+                    type: array
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
@@ -2525,6 +2573,22 @@ spec:
                       secure comunications between node and control-plane.
                       Defaults to "/etc/kubernetes/pki/ca.crt".
                     type: string
+                  certBundles:
+                    description: CertBundles holds additional trusted cert bundles.
+                    items:
+                      description: CertBundle holds the cert data.
+                      properties:
+                        data:
+                          description: Data is the actual cert.
+                          type: string
+                        name:
+                          description: Name is the name of the cert bundle.
+                          type: string
+                      required:
+                      - data
+                      - name
+                      type: object
+                    type: array
                   controlPlane:
                     description: |-
                       controlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -3326,6 +3390,22 @@ spec:
                       - superpowered
                       type: object
                     type: array
+                  certBundles:
+                    description: CertBundles holds additional trusted cert bundles.
+                    items:
+                      description: CertBundle holds the cert data.
+                      properties:
+                        data:
+                          description: Data is the actual cert.
+                          type: string
+                        name:
+                          description: Name is the name of the cert bundle.
+                          type: string
+                      required:
+                      - data
+                      - name
+                      type: object
+                    type: array
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 07d64cfa1..08c69a5a6 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -300,6 +300,23 @@ spec:
                               - superpowered
                               type: object
                             type: array
+                          certBundles:
+                            description: CertBundles holds additional trusted cert
+                              bundles.
+                            items:
+                              description: CertBundle holds the cert data.
+                              properties:
+                                data:
+                                  description: Data is the actual cert.
+                                  type: string
+                                name:
+                                  description: Name is the name of the cert bundle.
+                                  type: string
+                              required:
+                              - data
+                              - name
+                              type: object
+                            type: array
                           certificatesDir:
                             description: |-
                               CertificatesDir specifies where to store or look for all required certificates.
@@ -1105,6 +1122,23 @@ spec:
                               secure comunications between node and control-plane.
                               Defaults to "/etc/kubernetes/pki/ca.crt".
                             type: string
+                          certBundles:
+                            description: CertBundles holds additional trusted cert
+                              bundles.
+                            items:
+                              description: CertBundle holds the cert data.
+                              properties:
+                                data:
+                                  description: Data is the actual cert.
+                                  type: string
+                                name:
+                                  description: Name is the name of the cert bundle.
+                                  type: string
+                              required:
+                              - data
+                              - name
+                              type: object
+                            type: array
                           controlPlane:
                             description: |-
                               ControlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -1713,6 +1747,23 @@ spec:
                               - superpowered
                               type: object
                             type: array
+                          certBundles:
+                            description: CertBundles holds additional trusted cert
+                              bundles.
+                            items:
+                              description: CertBundle holds the cert data.
+                              properties:
+                                data:
+                                  description: Data is the actual cert.
+                                  type: string
+                                name:
+                                  description: Name is the name of the cert bundle.
+                                  type: string
+                              required:
+                              - data
+                              - name
+                              type: object
+                            type: array
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
@@ -2515,6 +2566,23 @@ spec:
                               secure comunications between node and control-plane.
                               Defaults to "/etc/kubernetes/pki/ca.crt".
                             type: string
+                          certBundles:
+                            description: CertBundles holds additional trusted cert
+                              bundles.
+                            items:
+                              description: CertBundle holds the cert data.
+                              properties:
+                                data:
+                                  description: Data is the actual cert.
+                                  type: string
+                                name:
+                                  description: Name is the name of the cert bundle.
+                                  type: string
+                              required:
+                              - data
+                              - name
+                              type: object
+                            type: array
                           controlPlane:
                             description: |-
                               controlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -3297,6 +3365,23 @@ spec:
                               - superpowered
                               type: object
                             type: array
+                          certBundles:
+                            description: CertBundles holds additional trusted cert
+                              bundles.
+                            items:
+                              description: CertBundle holds the cert data.
+                              properties:
+                                data:
+                                  description: Data is the actual cert.
+                                  type: string
+                                name:
+                                  description: Name is the name of the cert bundle.
+                                  type: string
+                              required:
+                              - data
+                              - name
+                              type: object
+                            type: array
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index 901db1cb7..df222b943 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -128,6 +128,18 @@ reboot-to-reconcile = true
 [settings.boot.kernel-parameters]
 {{.BootKernel}}
 {{- end -}}
+`
+	certsTemplate = `{{ define "certsSettings" -}}
+[settings.pki.{{.Name}}]
+data = "{{.Data}}"
+trusted = true
+{{- end -}}
+`
+	certBundlesSliceTemplate = `{{ define "certBundlesSlice" -}}
+{{- range $cBundle := .CertBundles }}
+{{template "certsSettings" $cBundle }}
+{{- end -}}
+{{- end -}}
 `
 
 	bottlerocketNodeInitSettingsTemplate = `{{template "hostContainerSlice" .}}
@@ -172,5 +184,9 @@ reboot-to-reconcile = true
 {{- if .BootKernel}}
 {{template "bootSettings" .}}
 {{- end -}}
+
+{{- if .CertBundles}}
+{{template "certBundlesSlice" .}}
+{{- end -}}
 `
 )
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
index 5846524be..2ee2d942b 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
@@ -310,6 +310,36 @@ reboot-to-reconcile = true
 "abc" = ["def","123"]
 "foo" = ["bar"]
 `
+
+	userDataWithCertBundle = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "ADMIN_REPO:ADMIN_TAG"
+user-data = "CnsKCSJzc2giOiB7CgkJImF1dGhvcml6ZWQta2V5cyI6IFsic3NoLXJzYSBBQUEuLi4iXQoJfQp9"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "BOOTSTRAP_REPO:BOOTSTRAP_TAG"
+user-data = "Qk9UVExFUk9DS0VUX0JPT1RTVFJBUF9VU0VSREFUQQ=="
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE_REPO:PAUSE_TAG"
+provider-id = "PROVIDERID"
+
+[settings.network]
+hostname = "hostname"
+
+[settings.pki.bundle1]
+data = "QUJDREVG"
+trusted = true
+[settings.pki.bundle2]
+data = "MTIzNDU2"
+trusted = true`
 )
 
 var (
@@ -569,6 +599,29 @@ func TestGetBottlerocketNodeUserData(t *testing.T) {
 			},
 			output: BootSettingsUserData,
 		},
+		{
+			name: "with custom cert bundle settings",
+			config: &BottlerocketConfig{
+				BottlerocketAdmin:     brAdmin,
+				BottlerocketBootstrap: brBootstrap,
+				Hostname:              hostname,
+				Pause:                 pause,
+				KubeletExtraArgs: map[string]string{
+					"provider-id": "PROVIDERID",
+				},
+				CertBundle: []bootstrapv1.CertBundle{
+					{
+						Name: "bundle1",
+						Data: "ABCDEF",
+					},
+					{
+						Name: "bundle2",
+						Data: "123456",
+					},
+				},
+			},
+			output: userDataWithCertBundle,
+		},
 	}
 	for _, testcase := range testcases {
 		t.Run(testcase.name, func(t *testing.T) {
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index 7b7131829..ce796f206 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -37,6 +37,7 @@ type BottlerocketConfig struct {
 	BottlerocketCustomBootstrapContainers []bootstrapv1.BottlerocketBootstrapContainer
 	NTPServers                            []string
 	Hostname                              string
+	CertBundle                            []bootstrapv1.CertBundle
 	RegistryMirrorCredentials
 }
 
@@ -61,6 +62,7 @@ type BottlerocketSettingsInput struct {
 	HostContainers         []bootstrapv1.BottlerocketHostContainer
 	BootstrapContainers    []bootstrapv1.BottlerocketBootstrapContainer
 	SysctlSettings         string
+	CertBundles            []bootstrapv1.CertBundle
 }
 
 // HostPath holds the path and type of a host path volume.
@@ -164,6 +166,12 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 	if _, err := tm.Parse(bootSettingsTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse boot settings %s template", kind)
 	}
+	if _, err := tm.Parse(certsTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse certs %s template", kind)
+	}
+	if _, err := tm.Parse(certBundlesSliceTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse cert bundles %s template", kind)
+	}
 	t, err := tm.Parse(tpl)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
@@ -266,6 +274,12 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 		}
 
 	}
+	if config.CertBundle != nil {
+		for _, cert := range config.CertBundle {
+			cert.Data = base64.StdEncoding.EncodeToString([]byte(cert.Data))
+			bottlerocketInput.CertBundles = append(bottlerocketInput.CertBundles, cert)
+		}
+	}
 
 	return generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
 }
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index 1e88c2d7c..a3a34e287 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -616,6 +616,9 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 		if scope.Config.Spec.NTP != nil && scope.Config.Spec.NTP.Enabled != nil && *scope.Config.Spec.NTP.Enabled {
 			bottlerocketConfig.NTPServers = scope.Config.Spec.NTP.Servers
 		}
+		if scope.Config.Spec.ClusterConfiguration.CertBundles != nil {
+			bottlerocketConfig.CertBundle = scope.Config.Spec.ClusterConfiguration.CertBundles
+		}
 	}
 
 	clusterdata, err := kubeadmtypes.MarshalClusterConfigurationForVersion(scope.Config.Spec.ClusterConfiguration, parsedVersion)
@@ -931,6 +934,9 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 		if scope.Config.Spec.NTP != nil && scope.Config.Spec.NTP.Enabled != nil && *scope.Config.Spec.NTP.Enabled {
 			bottlerocketConfig.NTPServers = scope.Config.Spec.NTP.Servers
 		}
+		if scope.Config.Spec.JoinConfiguration.CertBundles != nil {
+			bottlerocketConfig.CertBundle = scope.Config.Spec.JoinConfiguration.CertBundles
+		}
 		bootstrapJoinData, err = bottlerocket.NewNode(nodeInput, bottlerocketConfig)
 		if err != nil {
 			scope.Error(err, "Failed to create a worker bottlerocket join configuration")
@@ -1128,6 +1134,9 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 		if scope.Config.Spec.NTP != nil && scope.Config.Spec.NTP.Enabled != nil && *scope.Config.Spec.NTP.Enabled {
 			bottlerocketConfig.NTPServers = scope.Config.Spec.NTP.Servers
 		}
+		if scope.Config.Spec.JoinConfiguration.CertBundles != nil {
+			bottlerocketConfig.CertBundle = scope.Config.Spec.JoinConfiguration.CertBundles
+		}
 		bootstrapJoinData, err = bottlerocket.NewJoinControlPlane(controlPlaneJoinInput, bottlerocketConfig)
 		if err != nil {
 			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/types.go b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
index c98a4cced..f4308a811 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
@@ -169,6 +169,10 @@ type ClusterConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
+	// CertBundles holds additional trusted cert bundles.
+	// +optional
+	CertBundles []CertBundle `json:"certBundles,omitempty"`
 }
 
 // BottlerocketSettings define bottlerocket settings that can be configured on bottlerocket nodes.
@@ -522,6 +526,10 @@ type JoinConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
+	// CertBundles holds additional trusted cert bundles.
+	// +optional
+	CertBundles []CertBundle `json:"certBundles,omitempty"`
 }
 
 // BottlerocketHostContainer describes a host image for Bottlerocket
@@ -562,6 +570,15 @@ type BottlerocketBootstrapContainer struct {
 	UserData string `json:"userData,omitempty"`
 }
 
+// CertBundle holds the cert data.
+type CertBundle struct {
+	// Name is the name of the cert bundle.
+	Name string `json:"name"`
+
+	// Data is the actual cert.
+	Data string `json:"data"`
+}
+
 // JoinControlPlane contains elements describing an additional control plane instance to be deployed on the joining node.
 type JoinControlPlane struct {
 	// LocalAPIEndpoint represents the endpoint of the API server instance to be deployed on this node.
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
index e0bea589d..1b05fccf6 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
@@ -178,6 +178,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*CertBundle)(nil), (*v1beta1.CertBundle)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_CertBundle_To_v1beta1_CertBundle(a.(*CertBundle), b.(*v1beta1.CertBundle), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.CertBundle)(nil), (*CertBundle)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_CertBundle_To_upstreamv1beta1_CertBundle(a.(*v1beta1.CertBundle), b.(*CertBundle), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -721,6 +731,28 @@ func Convert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSetting
 	return autoConvert_v1beta1_BottlerocketSettings_To_upstreamv1beta1_BottlerocketSettings(in, out, s)
 }
 
+func autoConvert_upstreamv1beta1_CertBundle_To_v1beta1_CertBundle(in *CertBundle, out *v1beta1.CertBundle, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Data = in.Data
+	return nil
+}
+
+// Convert_upstreamv1beta1_CertBundle_To_v1beta1_CertBundle is an autogenerated conversion function.
+func Convert_upstreamv1beta1_CertBundle_To_v1beta1_CertBundle(in *CertBundle, out *v1beta1.CertBundle, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_CertBundle_To_v1beta1_CertBundle(in, out, s)
+}
+
+func autoConvert_v1beta1_CertBundle_To_upstreamv1beta1_CertBundle(in *v1beta1.CertBundle, out *CertBundle, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Data = in.Data
+	return nil
+}
+
+// Convert_v1beta1_CertBundle_To_upstreamv1beta1_CertBundle is an autogenerated conversion function.
+func Convert_v1beta1_CertBundle_To_upstreamv1beta1_CertBundle(in *v1beta1.CertBundle, out *CertBundle, s conversion.Scope) error {
+	return autoConvert_v1beta1_CertBundle_To_upstreamv1beta1_CertBundle(in, out, s)
+}
+
 func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -768,6 +800,7 @@ func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	out.BottlerocketHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]v1beta1.BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*v1beta1.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]v1beta1.CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
@@ -817,6 +850,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfigur
 	out.BottlerocketHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
@@ -1114,6 +1148,7 @@ func autoConvert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(
 	out.BottlerocketCustomHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]v1beta1.BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*v1beta1.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]v1beta1.CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
@@ -1154,6 +1189,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta1_JoinConfiguration(
 	out.BottlerocketCustomHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
index 934b8e5c2..eac2208d9 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
@@ -329,6 +329,21 @@ func (in *BottlerocketSettings) DeepCopy() *BottlerocketSettings {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *CertBundle) DeepCopyInto(out *CertBundle) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertBundle.
+func (in *CertBundle) DeepCopy() *CertBundle {
+	if in == nil {
+		return nil
+	}
+	out := new(CertBundle)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -367,6 +382,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 		*out = new(BottlerocketSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.CertBundles != nil {
+		in, out := &in.CertBundles, &out.CertBundles
+		*out = make([]CertBundle, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -646,6 +666,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = new(BottlerocketSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.CertBundles != nil {
+		in, out := &in.CertBundles, &out.CertBundles
+		*out = make([]CertBundle, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
index b34a12f3c..b9a169530 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
@@ -565,6 +565,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta2_ClusterConfigur
 	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
+	// WARNING: in.CertBundles requires manual conversion: does not exist in peer-type
 	return nil
 }
 
@@ -906,6 +907,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta2_JoinConfiguration(
 	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
+	// WARNING: in.CertBundles requires manual conversion: does not exist in peer-type
 	return nil
 }
 
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
index 9a5349623..b470e049d 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
@@ -569,6 +569,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta3_ClusterConfigur
 	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
+	// WARNING: in.CertBundles requires manual conversion: does not exist in peer-type
 	return nil
 }
 
@@ -903,6 +904,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(
 	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketCustomBootstrapContainers requires manual conversion: does not exist in peer-type
 	// WARNING: in.Bottlerocket requires manual conversion: does not exist in peer-type
+	// WARNING: in.CertBundles requires manual conversion: does not exist in peer-type
 	return nil
 }
 
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index 6418842db..aef0cb8f7 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -376,6 +376,22 @@ spec:
                           - superpowered
                           type: object
                         type: array
+                      certBundles:
+                        description: CertBundles holds additional trusted cert bundles.
+                        items:
+                          description: CertBundle holds the cert data.
+                          properties:
+                            data:
+                              description: Data is the actual cert.
+                              type: string
+                            name:
+                              description: Name is the name of the cert bundle.
+                              type: string
+                          required:
+                          - data
+                          - name
+                          type: object
+                        type: array
                       certificatesDir:
                         description: |-
                           CertificatesDir specifies where to store or look for all required certificates.
@@ -1175,6 +1191,22 @@ spec:
                           secure comunications between node and control-plane.
                           Defaults to "/etc/kubernetes/pki/ca.crt".
                         type: string
+                      certBundles:
+                        description: CertBundles holds additional trusted cert bundles.
+                        items:
+                          description: CertBundle holds the cert data.
+                          properties:
+                            data:
+                              description: Data is the actual cert.
+                              type: string
+                            name:
+                              description: Name is the name of the cert bundle.
+                              type: string
+                          required:
+                          - data
+                          - name
+                          type: object
+                        type: array
                       controlPlane:
                         description: |-
                           ControlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -1975,6 +2007,22 @@ spec:
                           - superpowered
                           type: object
                         type: array
+                      certBundles:
+                        description: CertBundles holds additional trusted cert bundles.
+                        items:
+                          description: CertBundle holds the cert data.
+                          properties:
+                            data:
+                              description: Data is the actual cert.
+                              type: string
+                            name:
+                              description: Name is the name of the cert bundle.
+                              type: string
+                          required:
+                          - data
+                          - name
+                          type: object
+                        type: array
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
@@ -2771,6 +2819,22 @@ spec:
                           secure comunications between node and control-plane.
                           Defaults to "/etc/kubernetes/pki/ca.crt".
                         type: string
+                      certBundles:
+                        description: CertBundles holds additional trusted cert bundles.
+                        items:
+                          description: CertBundle holds the cert data.
+                          properties:
+                            data:
+                              description: Data is the actual cert.
+                              type: string
+                            name:
+                              description: Name is the name of the cert bundle.
+                              type: string
+                          required:
+                          - data
+                          - name
+                          type: object
+                        type: array
                       controlPlane:
                         description: |-
                           controlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -3812,6 +3876,22 @@ spec:
                           - superpowered
                           type: object
                         type: array
+                      certBundles:
+                        description: CertBundles holds additional trusted cert bundles.
+                        items:
+                          description: CertBundle holds the cert data.
+                          properties:
+                            data:
+                              description: Data is the actual cert.
+                              type: string
+                            name:
+                              description: Name is the name of the cert bundle.
+                              type: string
+                          required:
+                          - data
+                          - name
+                          type: object
+                        type: array
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 5253779ad..571d8c02a 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -315,6 +315,23 @@ spec:
                                   - superpowered
                                   type: object
                                 type: array
+                              certBundles:
+                                description: CertBundles holds additional trusted
+                                  cert bundles.
+                                items:
+                                  description: CertBundle holds the cert data.
+                                  properties:
+                                    data:
+                                      description: Data is the actual cert.
+                                      type: string
+                                    name:
+                                      description: Name is the name of the cert bundle.
+                                      type: string
+                                  required:
+                                  - data
+                                  - name
+                                  type: object
+                                type: array
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
@@ -1127,6 +1144,23 @@ spec:
                                   secure comunications between node and control-plane.
                                   Defaults to "/etc/kubernetes/pki/ca.crt".
                                 type: string
+                              certBundles:
+                                description: CertBundles holds additional trusted
+                                  cert bundles.
+                                items:
+                                  description: CertBundle holds the cert data.
+                                  properties:
+                                    data:
+                                      description: Data is the actual cert.
+                                      type: string
+                                    name:
+                                      description: Name is the name of the cert bundle.
+                                      type: string
+                                  required:
+                                  - data
+                                  - name
+                                  type: object
+                                type: array
                               controlPlane:
                                 description: |-
                                   controlPlane defines the additional control plane instance to be deployed on the joining node.
@@ -2065,6 +2099,23 @@ spec:
                                   - superpowered
                                   type: object
                                 type: array
+                              certBundles:
+                                description: CertBundles holds additional trusted
+                                  cert bundles.
+                                items:
+                                  description: CertBundle holds the cert data.
+                                  properties:
+                                    data:
+                                      description: Data is the actual cert.
+                                      type: string
+                                    name:
+                                      description: Name is the name of the cert bundle.
+                                      type: string
+                                  required:
+                                  - data
+                                  - name
+                                  type: object
+                                type: array
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index 9664315b9..ba8c3b404 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -171,6 +171,10 @@ type ClusterConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
+	// CertBundles holds additional trusted cert bundles.
+	// +optional
+	CertBundles []CertBundle `json:"certBundles,omitempty"`
 }
 
 // BottlerocketSettings define bottlerocket settings that can be configured on bottlerocket nodes.
@@ -533,6 +537,10 @@ type JoinConfiguration struct {
 	// This is only for bottlerocket.
 	// +optional
 	Bottlerocket *BottlerocketSettings `json:"bottlerocket,omitempty"`
+
+	// CertBundles holds additional trusted cert bundles.
+	// +optional
+	CertBundles []CertBundle `json:"certBundles,omitempty"`
 }
 
 // BottlerocketHostContainer describes a host image for Bottlerocket
@@ -573,6 +581,15 @@ type BottlerocketBootstrapContainer struct {
 	UserData string `json:"userData,omitempty"`
 }
 
+// CertBundle holds the cert data.
+type CertBundle struct {
+	// Name is the name of the cert bundle.
+	Name string `json:"name"`
+
+	// Data is the actual cert.
+	Data string `json:"data"`
+}
+
 // JoinControlPlane contains elements describing an additional control plane instance to be deployed on the joining node.
 type JoinControlPlane struct {
 	// localAPIEndpoint represents the endpoint of the API server instance to be deployed on this node.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index 02862960b..d79fa9961 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -180,6 +180,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*CertBundle)(nil), (*v1beta1.CertBundle)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_CertBundle_To_v1beta1_CertBundle(a.(*CertBundle), b.(*v1beta1.CertBundle), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.CertBundle)(nil), (*CertBundle)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_CertBundle_To_v1alpha4_CertBundle(a.(*v1beta1.CertBundle), b.(*CertBundle), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -883,6 +893,28 @@ func Convert_v1beta1_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in *v
 	return autoConvert_v1beta1_BottlerocketSettings_To_v1alpha4_BottlerocketSettings(in, out, s)
 }
 
+func autoConvert_v1alpha4_CertBundle_To_v1beta1_CertBundle(in *CertBundle, out *v1beta1.CertBundle, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Data = in.Data
+	return nil
+}
+
+// Convert_v1alpha4_CertBundle_To_v1beta1_CertBundle is an autogenerated conversion function.
+func Convert_v1alpha4_CertBundle_To_v1beta1_CertBundle(in *CertBundle, out *v1beta1.CertBundle, s conversion.Scope) error {
+	return autoConvert_v1alpha4_CertBundle_To_v1beta1_CertBundle(in, out, s)
+}
+
+func autoConvert_v1beta1_CertBundle_To_v1alpha4_CertBundle(in *v1beta1.CertBundle, out *CertBundle, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Data = in.Data
+	return nil
+}
+
+// Convert_v1beta1_CertBundle_To_v1alpha4_CertBundle is an autogenerated conversion function.
+func Convert_v1beta1_CertBundle_To_v1alpha4_CertBundle(in *v1beta1.CertBundle, out *CertBundle, s conversion.Scope) error {
+	return autoConvert_v1beta1_CertBundle_To_v1alpha4_CertBundle(in, out, s)
+}
+
 func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_v1alpha4_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -929,6 +961,7 @@ func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(i
 	out.BottlerocketHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]v1beta1.BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*v1beta1.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]v1beta1.CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
@@ -983,6 +1016,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(i
 	out.BottlerocketHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
@@ -1383,6 +1417,7 @@ func autoConvert_v1alpha4_JoinConfiguration_To_v1beta1_JoinConfiguration(in *Joi
 	out.BottlerocketCustomHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]v1beta1.BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*v1beta1.BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]v1beta1.CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
@@ -1423,6 +1458,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_v1alpha4_JoinConfiguration(in *v1b
 	out.BottlerocketCustomHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	out.BottlerocketCustomBootstrapContainers = *(*[]BottlerocketBootstrapContainer)(unsafe.Pointer(&in.BottlerocketCustomBootstrapContainers))
 	out.Bottlerocket = (*BottlerocketSettings)(unsafe.Pointer(in.Bottlerocket))
+	out.CertBundles = *(*[]CertBundle)(unsafe.Pointer(&in.CertBundles))
 	return nil
 }
 
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index e3e959285..7331e32eb 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -330,6 +330,21 @@ func (in *BottlerocketSettings) DeepCopy() *BottlerocketSettings {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *CertBundle) DeepCopyInto(out *CertBundle) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertBundle.
+func (in *CertBundle) DeepCopy() *CertBundle {
+	if in == nil {
+		return nil
+	}
+	out := new(CertBundle)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -368,6 +383,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 		*out = new(BottlerocketSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.CertBundles != nil {
+		in, out := &in.CertBundles, &out.CertBundles
+		*out = make([]CertBundle, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -747,6 +767,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = new(BottlerocketSettings)
 		(*in).DeepCopyInto(*out)
 	}
+	if in.CertBundles != nil {
+		in, out := &in.CertBundles, &out.CertBundles
+		*out = make([]CertBundle, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
-- 
2.49.0

