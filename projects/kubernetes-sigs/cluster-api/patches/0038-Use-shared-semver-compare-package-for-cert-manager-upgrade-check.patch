From bcbbc3857f8ce24efde2f8c8cda8ec5f6dcc9056 Mon Sep 17 00:00:00 2001
From: Guillermo Gaston <gaslor@amazon.com>
Date: Tue, 2 Nov 2021 20:44:20 +0000
Subject: [PATCH 2/2] Use shared semver compare package for cert-manager
 upgrade check

---
 cmd/clusterctl/client/cluster/cert_manager.go |  25 ++--
 .../client/cluster/cert_manager_test.go       | 108 +++++++++++++++++-
 2 files changed, 120 insertions(+), 13 deletions(-)

diff --git a/cmd/clusterctl/client/cluster/cert_manager.go b/cmd/clusterctl/client/cluster/cert_manager.go
index 9eb0d5516..a3a0e3c98 100644
--- a/cmd/clusterctl/client/cluster/cert_manager.go
+++ b/cmd/clusterctl/client/cluster/cert_manager.go
@@ -21,11 +21,11 @@ import (
 	_ "embed"
 	"time"
 
+	"github.com/blang/semver"
 	"github.com/pkg/errors"
 	corev1 "k8s.io/api/core/v1"
 	apierrors "k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
-	"k8s.io/apimachinery/pkg/util/version"
 	"sigs.k8s.io/cluster-api/cmd/clusterctl/client/repository"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 
@@ -34,6 +34,7 @@ import (
 	"sigs.k8s.io/cluster-api/cmd/clusterctl/internal/util"
 	logf "sigs.k8s.io/cluster-api/cmd/clusterctl/log"
 	utilresource "sigs.k8s.io/cluster-api/util/resource"
+	"sigs.k8s.io/cluster-api/util/version"
 	utilyaml "sigs.k8s.io/cluster-api/util/yaml"
 )
 
@@ -48,10 +49,8 @@ const (
 	certManagerVersionAnnotation = "certmanager.clusterctl.cluster.x-k8s.io/version"
 )
 
-var (
-	//go:embed assets/cert-manager-test-resources.yaml
-	certManagerTestManifest []byte
-)
+//go:embed assets/cert-manager-test-resources.yaml
+var certManagerTestManifest []byte
 
 // CertManagerUpgradePlan defines the upgrade plan if cert-manager needs to be
 // upgraded to a different version.
@@ -300,6 +299,12 @@ func (cm *certManagerClient) shouldUpgrade(objs []unstructured.Unstructured) (st
 		return "", "", false, err
 	}
 
+	desiredVersion := config.Version()
+	desiredSemVersion, err := semver.ParseTolerant(desiredVersion)
+	if err != nil {
+		return "", "", false, errors.Wrapf(err, "failed to parse config version [%s] for cert-manager component", desiredVersion)
+	}
+
 	needUpgrade := false
 	currentVersion := ""
 	for i := range objs {
@@ -322,16 +327,12 @@ func (cm *certManagerClient) shouldUpgrade(objs []unstructured.Unstructured) (st
 			}
 		}
 
-		objSemVersion, err := version.ParseSemantic(objVersion)
+		objSemVersion, err := semver.ParseTolerant(objVersion)
 		if err != nil {
 			return "", "", false, errors.Wrapf(err, "failed to parse version for cert-manager component %s/%s", obj.GetKind(), obj.GetName())
 		}
 
-		c, err := objSemVersion.Compare(config.Version())
-		if err != nil {
-			return "", "", false, errors.Wrapf(err, "failed to compare target version for cert-manager component %s/%s", obj.GetKind(), obj.GetName())
-		}
-
+		c := version.Compare(objSemVersion, desiredSemVersion, version.WithBuildTags())
 		switch {
 		case c < 0:
 			// if version < current, then upgrade
@@ -346,7 +347,7 @@ func (cm *certManagerClient) shouldUpgrade(objs []unstructured.Unstructured) (st
 			break
 		}
 	}
-	return currentVersion, config.Version(), needUpgrade, nil
+	return currentVersion, desiredVersion, needUpgrade, nil
 }
 
 func (cm *certManagerClient) getWaitTimeout() time.Duration {
diff --git a/cmd/clusterctl/client/cluster/cert_manager_test.go b/cmd/clusterctl/client/cluster/cert_manager_test.go
index d3b5d2658..f94660162 100644
--- a/cmd/clusterctl/client/cluster/cert_manager_test.go
+++ b/cmd/clusterctl/client/cluster/cert_manager_test.go
@@ -207,6 +207,7 @@ func Test_shouldUpgrade(t *testing.T) {
 	}
 	tests := []struct {
 		name            string
+		configVersion   string
 		args            args
 		wantFromVersion string
 		wantToVersion   string
@@ -247,6 +248,111 @@ func Test_shouldUpgrade(t *testing.T) {
 			want:            false,
 			wantErr:         false,
 		},
+		{
+			name:          "Version is equal but current version has no build metadata, should upgrade",
+			configVersion: "v1.5.3+h4fd4",
+			args: args{
+				objs: []unstructured.Unstructured{
+					{
+						Object: map[string]interface{}{
+							"metadata": map[string]interface{}{
+								"annotations": map[string]interface{}{
+									clusterctlv1.CertManagerVersionAnnotation: "v1.5.3",
+								},
+							},
+						},
+					},
+				},
+			},
+			wantFromVersion: "v1.5.3",
+			wantToVersion:   "v1.5.3+h4fd4",
+			want:            true,
+			wantErr:         false,
+		},
+		{
+			name:          "Version is equal but different build metadata with hash, should upgrade",
+			configVersion: "v1.5.3+h4fd4",
+			args: args{
+				objs: []unstructured.Unstructured{
+					{
+						Object: map[string]interface{}{
+							"metadata": map[string]interface{}{
+								"annotations": map[string]interface{}{
+									clusterctlv1.CertManagerVersionAnnotation: "v1.5.3+h4fd5",
+								},
+							},
+						},
+					},
+				},
+			},
+			wantFromVersion: "v1.5.3+h4fd5",
+			wantToVersion:   "v1.5.3+h4fd4",
+			want:            true,
+			wantErr:         false,
+		},
+		{
+			name:          "Version is equal and same build metadata with hash, should not upgrade",
+			configVersion: "v1.5.3+h4fd5",
+			args: args{
+				objs: []unstructured.Unstructured{
+					{
+						Object: map[string]interface{}{
+							"metadata": map[string]interface{}{
+								"annotations": map[string]interface{}{
+									clusterctlv1.CertManagerVersionAnnotation: "v1.5.3+h4fd5",
+								},
+							},
+						},
+					},
+				},
+			},
+			wantFromVersion: "v1.5.3+h4fd5",
+			wantToVersion:   "v1.5.3+h4fd5",
+			want:            false,
+			wantErr:         false,
+		},
+		{
+			name:          "Version is equal but older numbered build metadata, should not upgrade",
+			configVersion: "v1.5.3+build.1",
+			args: args{
+				objs: []unstructured.Unstructured{
+					{
+						Object: map[string]interface{}{
+							"metadata": map[string]interface{}{
+								"annotations": map[string]interface{}{
+									clusterctlv1.CertManagerVersionAnnotation: "v1.5.3+build.2",
+								},
+							},
+						},
+					},
+				},
+			},
+			wantFromVersion: "v1.5.3+build.2",
+			wantToVersion:   "v1.5.3+build.1",
+			want:            false,
+			wantErr:         false,
+		},
+		{
+			name:          "Version is equal but newer numbered build metadata, should upgrade",
+			configVersion: "v1.5.3+build.3",
+			args: args{
+				objs: []unstructured.Unstructured{
+					{
+						Object: map[string]interface{}{
+							"metadata": map[string]interface{}{
+								"annotations": map[string]interface{}{
+									clusterctlv1.CertManagerVersionAnnotation: "v1.5.3+build.2",
+								},
+							},
+						},
+					},
+				},
+			},
+			wantFromVersion: "v1.5.3+build.2",
+			wantToVersion:   "v1.5.3+build.3",
+			want:            true,
+			wantErr:         false,
+		},
 		{
 			name: "Version is older, should upgrade",
 			args: args{
@@ -313,7 +419,7 @@ func Test_shouldUpgrade(t *testing.T) {
 		t.Run(tt.name, func(t *testing.T) {
 			g := NewWithT(t)
 			proxy := test.NewFakeProxy()
-			fakeConfigClient := newFakeConfig()
+			fakeConfigClient := newFakeConfig().WithCertManager("", tt.configVersion, "")
 			pollImmediateWaiter := func(interval, timeout time.Duration, condition wait.ConditionFunc) error {
 				return nil
 			}
-- 
2.30.1

