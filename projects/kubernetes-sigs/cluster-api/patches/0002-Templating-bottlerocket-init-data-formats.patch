From fa3ae59d3e3dec88c05c93cc009ce483fd9e22bc Mon Sep 17 00:00:00 2001
From: Vignesh Goutham Ganesh <vgg@amazon.com>
Date: Thu, 24 Jun 2021 10:04:31 -0700
Subject: [PATCH 02/36] Templating bottlerocket init data formats

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>
---
 .../controllers/kubeadmconfig_controller.go   |  55 ++++----
 .../internal/bottlerocket/bootstrap.go        |  34 +++++
 .../internal/bottlerocket/bottlerocket.go     | 125 ++++++++++++++++++
 .../bottlerocket/controlplane_init.go         |  64 ++++-----
 .../bottlerocket/controlplane_join.go         |  31 +++++
 .../kubeadm/internal/bottlerocket/files.go    |  19 +++
 .../kubeadm/internal/bottlerocket/node.go     |  33 ++++-
 .../kubeadm/internal/bottlerocket/users.go    |  12 ++
 .../kubeadm/internal/bottlerocket/utils.go    |  18 +++
 .../kubeadm/internal/cloudinit/cloudinit.go   |   2 +-
 10 files changed, 319 insertions(+), 74 deletions(-)
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/files.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/users.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/utils.go

diff --git a/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
index cd10c1b60..80250dcaa 100644
--- a/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/controllers/kubeadmconfig_controller.go
@@ -18,7 +18,6 @@ package controllers
 
 import (
 	"context"
-	"encoding/base64"
 	"fmt"
 	"strconv"
 	"time"
@@ -451,22 +450,18 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 	}
 
 	var bootstrapInitData []byte
-	bootstrapInitData, err = cloudinit.NewInitControlPlane(controlPlaneInput)
-	if err != nil {
-		scope.Error(err, "Failed to generate cloud init for bootstrap control plane")
-		return ctrl.Result{}, err
-	}
-
-	// Consume the created cloudinit controlplane data and create the bottlerocket cloudinit data
 	if scope.Config.Spec.Format == bootstrapv1.Bottlerocket {
-		// Convert the cloudinit to base64 encoding before using it
-		b64BootStrapCloudInit := base64.StdEncoding.EncodeToString(bootstrapInitData)
-
-		bootstrapInitData, err = bottlerocket.NewInitControlPlane(b64BootStrapCloudInit, scope.Config.Spec.Users)
+		bootstrapInitData, err = bottlerocket.NewInitControlPlane(controlPlaneInput)
 		if err != nil {
 			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
 			return ctrl.Result{}, err
 		}
+	} else {
+		bootstrapInitData, err = cloudinit.NewInitControlPlane(controlPlaneInput)
+		if err != nil {
+			scope.Error(err, "Failed to generate cloud init for bootstrap control plane")
+			return ctrl.Result{}, err
+		}
 	}
 
 	if err := r.storeBootstrapData(ctx, scope, bootstrapInitData); err != nil {
@@ -530,7 +525,7 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 		return ctrl.Result{}, err
 	}
 
-	cloudJoinData, err := cloudinit.NewNode(&cloudinit.NodeInput{
+	cloudJoinInput := &cloudinit.NodeInput{
 		BaseUserData: cloudinit.BaseUserData{
 			AdditionalFiles:      files,
 			NTP:                  scope.Config.Spec.NTP,
@@ -543,21 +538,21 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 			UseExperimentalRetry: scope.Config.Spec.UseExperimentalRetryJoin,
 		},
 		JoinConfiguration: joinData,
-	})
-	if err != nil {
-		scope.Error(err, "Failed to create a worker join configuration")
-		return ctrl.Result{}, err
 	}
 
-	// Consume the join cloudinit to generate Bottlerocket cloudinit for worker
+	var cloudJoinData []byte
 	if scope.Config.Spec.Format == bootstrapv1.Bottlerocket {
-		// Convert the cloudinit to base64 encoding before using it
-		b64BootStrapCloudInit := base64.StdEncoding.EncodeToString(cloudJoinData)
-		cloudJoinData, err = bottlerocket.NewNode(b64BootStrapCloudInit, scope.Config.Spec.Users)
+		cloudJoinData, err = bottlerocket.NewNode(cloudJoinInput)
 		if err != nil {
 			scope.Error(err, "Failed to create a worker bottlerocket join configuration")
 			return ctrl.Result{}, err
 		}
+	} else {
+		cloudJoinData, err = cloudinit.NewNode(cloudJoinInput)
+		if err != nil {
+			scope.Error(err, "Failed to create a worker join configuration")
+			return ctrl.Result{}, err
+		}
 	}
 
 	if err := r.storeBootstrapData(ctx, scope, cloudJoinData); err != nil {
@@ -624,7 +619,7 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 		return ctrl.Result{}, err
 	}
 
-	cloudJoinData, err := cloudinit.NewJoinControlPlane(&cloudinit.ControlPlaneJoinInput{
+	cloudJoinInput := &cloudinit.ControlPlaneJoinInput{
 		JoinConfiguration: joinData,
 		Certificates:      certificates,
 		BaseUserData: cloudinit.BaseUserData{
@@ -638,21 +633,21 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 			KubeadmVerbosity:     verbosityFlag,
 			UseExperimentalRetry: scope.Config.Spec.UseExperimentalRetryJoin,
 		},
-	})
-	if err != nil {
-		scope.Error(err, "Failed to create a control plane join configuration")
-		return ctrl.Result{}, err
 	}
 
-	// Consume the created cloudinit controlplane data and create the bottlerocket cloudinit data
+	var cloudJoinData []byte
 	if scope.Config.Spec.Format == bootstrapv1.Bottlerocket {
-		// Convert the cloudinit to base64 encoding before using it
-		b64BootStrapCloudInit := base64.StdEncoding.EncodeToString(cloudJoinData)
-		cloudJoinData, err = bottlerocket.NewInitControlPlane(b64BootStrapCloudInit, scope.Config.Spec.Users)
+		cloudJoinData, err = bottlerocket.NewJoinControlPlane(cloudJoinInput)
 		if err != nil {
 			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
 			return ctrl.Result{}, err
 		}
+	} else {
+		cloudJoinData, err = cloudinit.NewJoinControlPlane(cloudJoinInput)
+		if err != nil {
+			scope.Error(err, "Failed to create a control plane join configuration")
+			return ctrl.Result{}, err
+		}
 	}
 
 	if err := r.storeBootstrapData(ctx, scope, cloudJoinData); err != nil {
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
new file mode 100644
index 000000000..dff148855
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -0,0 +1,34 @@
+// This file defines the core bootstrap templates required
+// to bootstrap Bottlerocket
+package bottlerocket
+
+const (
+	adminContainerInitTemplate = `{{ define "adminContainerInitSettings" -}}
+[settings.host-containers.admin]
+enabled = true
+user-data = "{{.AdminContainerUserData}}"
+{{- end -}}
+`
+	kubernetesInitTemplate = `{{ define "kubernetesInitSettings" -}}
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+{{- end -}}
+`
+	bootstrapHostContainerTemplate = `{{define "bootstrapHostContainerSettings" -}}
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "public.ecr.aws/w4k1d8o8/kubeadm-the-hard-way:latest"
+user-data = "{{.BootstrapContainerUserData}}"
+{{- end -}}
+`
+	bottlerocketNodeInitSettingsTemplate = `{{template "bootstrapHostContainerSettings" .}}
+
+{{template "adminContainerInitSettings" .}}
+
+{{template "kubernetesInitSettings" }}
+`
+)
\ No newline at end of file
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
new file mode 100644
index 000000000..2f0e99789
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -0,0 +1,125 @@
+package bottlerocket
+
+import (
+	"bytes"
+	"encoding/base64"
+	"fmt"
+	"github.com/pkg/errors"
+	"strings"
+	"text/template"
+
+	bootstrapv1 "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+)
+
+const (
+	standardJoinCommand = "kubeadm join --config /tmp/kubeadm-join-config.yaml %s"
+	cloudConfigHeader   = `## template: jinja
+#cloud-config
+`
+)
+
+type BottlerocketSettingsInput struct {
+	BootstrapContainerUserData string
+	AdminContainerUserData     string
+}
+
+func generateBootstrapContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind).Funcs(defaultTemplateFuncMap)
+	if _, err := tm.Parse(filesTemplate); err != nil {
+		return nil, errors.Wrap(err, "failed to parse files template")
+	}
+
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+
+	return out.Bytes(), nil
+}
+
+func generateAdminContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind)
+	if _, err := tm.Parse(usersTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse users - %s template", kind)
+	}
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+	return out.Bytes(), nil
+}
+
+func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind)
+	if _, err := tm.Parse(bootstrapHostContainerTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse hostContainer %s template", kind)
+	}
+	if _, err := tm.Parse(adminContainerInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse adminContainer %s template", kind)
+	}
+	if _, err := tm.Parse(kubernetesInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse kubernetes %s template", kind)
+	}
+
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+	return out.Bytes(), nil
+}
+
+// getBottlerocketNodeUserData returns the userdata for the host bottlerocket in toml format
+func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []bootstrapv1.User) ([]byte, error) {
+	// base64 encode the bootstrapContainer's user data
+	b64BootstrapContainerUserData := base64.StdEncoding.EncodeToString(bootstrapContainerUserData)
+
+	// Parse out all the ssh authorized keys
+	sshAuthorizedKeys := getAllAuthorizedKeys(users)
+
+	// generate the userdata for the admin container
+	adminContainerUserData, err := generateAdminContainerUserData("InitAdminContainer", usersTemplate, sshAuthorizedKeys)
+	if err != nil {
+		return nil, err
+	}
+	b64AdminContainerUserData := base64.StdEncoding.EncodeToString(adminContainerUserData)
+
+	bottlerocketInput := &BottlerocketSettingsInput{
+		BootstrapContainerUserData: b64BootstrapContainerUserData,
+		AdminContainerUserData:     b64AdminContainerUserData,
+	}
+
+	bottlerocketNodeUserData, err := generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
+	if err != nil {
+		return nil, err
+	}
+	fmt.Println(string(bottlerocketNodeUserData))
+	return bottlerocketNodeUserData, nil
+}
+
+// Parses through all the users and return list of all user's authorized ssh keys
+func getAllAuthorizedKeys(users []bootstrapv1.User) string {
+	var sshAuthorizedKeys []string
+	for _, user := range users {
+		if len(user.SSHAuthorizedKeys) != 0 {
+			for _, key := range user.SSHAuthorizedKeys {
+				quotedKey := "\"" + key + "\""
+				sshAuthorizedKeys = append(sshAuthorizedKeys, quotedKey)
+			}
+		}
+	}
+	return strings.Join(sshAuthorizedKeys, ",")
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
index 3143fa50e..f384e3616 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
@@ -6,49 +6,37 @@
 package bottlerocket
 
 import (
-	"encoding/base64"
 	"fmt"
-	"strings"
 
-	capbk "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
 )
 
-type ControlPlaneInput struct {
-	BootstrapSettings     string
-	KubernetesSettings    string
-	HostContainerSettings string
-}
+const (
+	controlPlaneBootstrapContainerTemplate = `{{.Header}}
+{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+      ---
+{{.ClusterConfiguration | Indent 6}}
+      ---
+{{.InitConfiguration | Indent 6}}
+`
+)
 
-func NewInitControlPlane(cloudinitInput string, sshAuthUsers []capbk.User) ([]byte, error) {
-	// Parse ssh auth keys
-	keys := ""
-	for _, user := range sshAuthUsers {
-		for _, key := range user.SSHAuthorizedKeys {
-			keys += "\"" + key + "\","
-		}
+// NewInitControlPlane will take the cloudinit's controlplane input as an argument
+// and generate the bottlerocket toml formatted userdata for the host node, which
+// has the settings for bootstrap container which has its own embedded base64 encoded userdata.
+func NewInitControlPlane(input *cloudinit.ControlPlaneInput) ([]byte, error) {
+	input.Header = cloudConfigHeader
+	input.WriteFiles = input.Certificates.AsFiles()
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("InitBootstrapContainer", controlPlaneBootstrapContainerTemplate, input)
+	if err != nil {
+		return nil, err
 	}
-	authInitData := fmt.Sprintf("{\"ssh\":{\"authorized-keys\":[%s]}}\n", strings.TrimRight(keys, ","))
-	b64AuthInitString := base64.StdEncoding.EncodeToString([]byte(authInitData))
-
-	cpInput := new(ControlPlaneInput)
-	cpInput.BootstrapSettings = fmt.Sprintf(`[settings.host-containers.kubeadm-the-hard-way]
-enabled = true
-superpowered = true
-source = "public.ecr.aws/k1e6s8o8/kubeadm-the-hard-way:0.0.1"
-user-data = "%s"
-`, cloudinitInput)
-
-	cpInput.KubernetesSettings = `[settings.kubernetes]
-cluster-domain = "cluster.local"
-standalone-mode = true
-authentication-mode = "tls"
-server-tls-bootstrap = false`
-
-	// TODO: replace user data??
-	cpInput.HostContainerSettings = fmt.Sprintf(`[settings.host-containers.admin]
-enabled = true
-user-data = "%s"`, b64AuthInitString)
+	fmt.Println(string(bootstrapContainerUserData))
 
-	userData := fmt.Sprintf("%s%s\n%s", cpInput.BootstrapSettings, cpInput.KubernetesSettings, cpInput.HostContainerSettings)
-	return []byte(userData), nil
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users)
 }
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
new file mode 100644
index 000000000..487a16b45
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
@@ -0,0 +1,31 @@
+package bottlerocket
+
+import (
+	"github.com/pkg/errors"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	controlPlaneJoinBottlerocketInit = `{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm-join-config.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+{{.JoinConfiguration | Indent 6}}
+runcmd:
+  - {{ .KubeadmCommand }}
+`
+)
+
+// NewJoinControlPlane returns the user data string to be used on a new control plane instance.
+func NewJoinControlPlane(input *cloudinit.ControlPlaneJoinInput) ([]byte, error) {
+	input.WriteFiles = input.Certificates.AsFiles()
+	input.ControlPlane = true
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("JoinControlplane", controlPlaneJoinBottlerocketInit, input)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to generate user data for machine joining control plane")
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users)
+}
\ No newline at end of file
diff --git a/bootstrap/kubeadm/internal/bottlerocket/files.go b/bootstrap/kubeadm/internal/bottlerocket/files.go
new file mode 100644
index 000000000..d21630e81
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/files.go
@@ -0,0 +1,19 @@
+package bottlerocket
+
+const (
+	filesTemplate = `{{ define "files" -}}
+write_files:{{ range . }}
+-   path: {{.Path}}
+    {{ if ne .Owner "" -}}
+    owner: {{.Owner}}
+    {{ end -}}
+    {{ if ne .Permissions "" -}}
+    permissions: '{{.Permissions}}'
+    {{ end -}}
+    content: |
+{{.Content | Indent 6}}
+{{- end -}}
+{{- end -}}
+`
+)
+
diff --git a/bootstrap/kubeadm/internal/bottlerocket/node.go b/bootstrap/kubeadm/internal/bottlerocket/node.go
index 6a699c060..78fe4407a 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/node.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/node.go
@@ -1,9 +1,32 @@
 package bottlerocket
 
-import capbk "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+import (
+	"fmt"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
 
-// Worker node configuration for bottlerocket is as same as for controlplane
-// Only the cloudinit userdata is different, which cloudinit package handles
-func NewNode(cloudinitInput string, sshAuthKeys []capbk.User) ([]byte, error) {
-	return NewInitControlPlane(cloudinitInput, sshAuthKeys)
+const (
+	nodeBottleRocketInit = `{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm-join-config.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+      ---
+{{.JoinConfiguration | Indent 6}}
+runcmd:
+  - {{ .KubeadmCommand }}
+`
+)
+
+// NewNode creates a toml formatted userdata including bootstrap host container settings that has
+// a base64 encoded user data for the bootstrap container
+func NewNode(input *cloudinit.NodeInput) ([]byte, error) {
+	input.KubeadmCommand = fmt.Sprintf(standardJoinCommand, input.KubeadmVerbosity)
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("Node", nodeBottleRocketInit, input)
+	if err != nil {
+		return nil, err
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users)
 }
diff --git a/bootstrap/kubeadm/internal/bottlerocket/users.go b/bootstrap/kubeadm/internal/bottlerocket/users.go
new file mode 100644
index 000000000..e5eedcb9f
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/users.go
@@ -0,0 +1,12 @@
+package bottlerocket
+
+const (
+	usersTemplate = `{{- if . }}
+{
+	"ssh": {
+		"authorized-keys": [{{.}}]
+	}
+}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/utils.go b/bootstrap/kubeadm/internal/bottlerocket/utils.go
new file mode 100644
index 000000000..9118e28c4
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/utils.go
@@ -0,0 +1,18 @@
+package bottlerocket
+
+import (
+	"strings"
+	"text/template"
+)
+
+var (
+	defaultTemplateFuncMap = template.FuncMap{
+		"Indent": templateYAMLIndent,
+	}
+)
+
+func templateYAMLIndent(i int, input string) string {
+	split := strings.Split(input, "\n")
+	ident := "\n" + strings.Repeat(" ", i)
+	return strings.Repeat(" ", i) + strings.Join(split, ident)
+}
diff --git a/bootstrap/kubeadm/internal/cloudinit/cloudinit.go b/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
index 027df98b5..51a59a4b8 100644
--- a/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
+++ b/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
@@ -58,8 +58,8 @@ type BaseUserData struct {
 }
 
 func (input *BaseUserData) prepare() error {
-	input.Header = cloudConfigHeader
 	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	input.Header = cloudConfigHeader
 	input.KubeadmCommand = fmt.Sprintf(standardJoinCommand, input.KubeadmVerbosity)
 	if input.UseExperimentalRetry {
 		input.KubeadmCommand = retriableJoinScriptName
-- 
2.30.1

