From 83e25faae69303703dbdacc6b508ff360abb211f Mon Sep 17 00:00:00 2001
From: Jiayi Wang <jiayiwang7@yahoo.com>
Date: Thu, 5 Jan 2023 14:56:09 -0500
Subject: [PATCH 15/36] Make bottlerocket admin, control, custom bootstrap
 container images updatable in webhook

---
 .../internal/bottlerocket/bootstrap_test.go   | 169 ++++++++++++++++++
 .../webhooks/kubeadm_control_plane.go         |   6 +
 .../webhooks/kubeadm_control_plane_test.go    |  54 ++++++
 3 files changed, 229 insertions(+)
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go

diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
new file mode 100644
index 000000000..49c294436
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap_test.go
@@ -0,0 +1,169 @@
+package bottlerocket
+
+import (
+	"testing"
+
+	. "github.com/onsi/gomega"
+
+	bootstrapv1 "sigs.k8s.io/cluster-api/api/bootstrap/kubeadm/v1beta2"
+)
+
+const userDataFullSetting = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+source = "REPO:TAG"
+user-data = "B64USERDATA"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "REPO:TAG"
+user-data = "B64USERDATA"
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE"
+provider-id = "PROVIDERID"
+
+[settings.bootstrap-containers.BOOTSTRAP]
+essential = false
+mode = "MODE"
+user-data = "B64USERDATA"
+[settings.network]
+https-proxy = "PROXY"
+no-proxy = []
+[settings.container-registry.mirrors]
+"public.ecr.aws" = ["https://REGISTRYENDPOINT"]
+[settings.pki.registry-mirror-ca]
+data = "REGISTRYCA"
+trusted=true
+[settings.kubernetes.node-labels]
+KEY=VAR
+[settings.kubernetes.node-taints]
+KEY=VAR`
+
+const userDataNoAdminImage = `
+[settings.host-containers.admin]
+enabled = true
+superpowered = true
+user-data = "B64USERDATA"
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "REPO:TAG"
+user-data = "B64USERDATA"
+
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "PAUSE"
+provider-id = "PROVIDERID"
+
+[settings.bootstrap-containers.BOOTSTRAP]
+essential = false
+mode = "MODE"
+user-data = "B64USERDATA"
+[settings.network]
+https-proxy = "PROXY"
+no-proxy = []
+[settings.container-registry.mirrors]
+"public.ecr.aws" = ["https://REGISTRYENDPOINT"]
+[settings.pki.registry-mirror-ca]
+data = "REGISTRYCA"
+trusted=true
+[settings.kubernetes.node-labels]
+KEY=VAR
+[settings.kubernetes.node-taints]
+KEY=VAR`
+
+func TestGenerateUserData(t *testing.T) {
+	g := NewWithT(t)
+
+	testcases := []struct {
+		name   string
+		input  *BottlerocketSettingsInput
+		output string
+	}{
+		{
+			name: "full settings",
+			input: &BottlerocketSettingsInput{
+				PauseContainerSource:   "PAUSE",
+				HTTPSProxyEndpoint:     "PROXY",
+				RegistryMirrorEndpoint: "REGISTRYENDPOINT",
+				RegistryMirrorCACert:   "REGISTRYCA",
+				NodeLabels:             "KEY=VAR",
+				Taints:                 "KEY=VAR",
+				ProviderId:             "PROVIDERID",
+				HostContainers: []bootstrapv1.BottlerocketHostContainer{
+					{
+						Name:         "admin",
+						Superpowered: true,
+						ImageMeta: bootstrapv1.ImageMeta{
+							ImageRepository: "REPO",
+							ImageTag:        "TAG",
+						},
+						UserData: "B64USERDATA",
+					},
+					{
+						Name:         "kubeadm-bootstrap",
+						Superpowered: true,
+						ImageMeta: bootstrapv1.ImageMeta{
+							ImageRepository: "REPO",
+							ImageTag:        "TAG",
+						},
+						UserData: "B64USERDATA",
+					},
+				},
+				BootstrapContainers: []bootstrapv1.BottlerocketBootstrapContainer{
+					{
+						Name:     "BOOTSTRAP",
+						Mode:     "MODE",
+						UserData: "B64USERDATA",
+					},
+				},
+			},
+			output: userDataFullSetting,
+		},
+		{
+			name: "no admin image meta",
+			input: &BottlerocketSettingsInput{
+				PauseContainerSource:   "PAUSE",
+				HTTPSProxyEndpoint:     "PROXY",
+				RegistryMirrorEndpoint: "REGISTRYENDPOINT",
+				RegistryMirrorCACert:   "REGISTRYCA",
+				NodeLabels:             "KEY=VAR",
+				Taints:                 "KEY=VAR",
+				ProviderId:             "PROVIDERID",
+				HostContainers: []bootstrapv1.BottlerocketHostContainer{
+					{
+						Name:            "admin",
+						Superpowered:    true,
+						ImageRepository: "REPO",
+						ImageTag:        "TAG",
+						UserData:        "B64USERDATA",
+					},
+					{
+						Name:            "kubeadm-bootstrap",
+						Superpowered:    true,
+						ImageRepository: "REPO",
+						ImageTag:        "TAG",
+						UserData:        "B64USERDATA",
+					},
+				},
+			},
+			output: userDataNoAdminImage,
+		},
+	}
+	for _, testcase := range testcases {
+		t.Run(testcase.name, func(t *testing.T) {
+			b, err := generateNodeUserData("TestBottlerocketInit", bottlerocketNodeInitSettingsTemplate, testcase.input)
+			g.Expect(err).NotTo(HaveOccurred())
+			g.Expect(string(b)).To(Equal(testcase.output))
+		})
+	}
+}
diff --git a/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go b/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go
index 16816f2e4..0f0b9e494 100644
--- a/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go
+++ b/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane.go
@@ -142,6 +142,9 @@ func (webhook *KubeadmControlPlane) ValidateUpdate(_ context.Context, oldObj, ne
 		{"metadata", "*"},
 		// spec.kubeadmConfigSpec.clusterConfiguration
 		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketBootstrap", "*"},
+		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketAdmin", "*"},
+		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketControl", "*"},
+		{spec, kubeadmConfigSpec, clusterConfiguration, "bottlerocketCustomBootstrapContainers"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "pause", "*"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "etcd"},
 		{spec, kubeadmConfigSpec, clusterConfiguration, "etcd", "*"},
@@ -173,6 +176,9 @@ func (webhook *KubeadmControlPlane) ValidateUpdate(_ context.Context, oldObj, ne
 		{spec, kubeadmConfigSpec, initConfiguration, timeouts, "*"},
 		// spec.kubeadmConfigSpec.joinConfiguration
 		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketBootstrap", "*"},
+		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketAdmin", "*"},
+		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketControl", "*"},
+		{spec, kubeadmConfigSpec, joinConfiguration, "bottlerocketCustomBootstrapContainers"},
 		{spec, kubeadmConfigSpec, joinConfiguration, "pause", "*"},
 		{spec, kubeadmConfigSpec, joinConfiguration, nodeRegistration},
 		{spec, kubeadmConfigSpec, joinConfiguration, nodeRegistration, "*"},
diff --git a/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane_test.go b/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane_test.go
index 19d487668..67312c38b 100644
--- a/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane_test.go
+++ b/controlplane/kubeadm/internal/webhooks/kubeadm_control_plane_test.go
@@ -767,6 +767,24 @@ func TestKubeadmControlPlaneValidateUpdate(t *testing.T) {
 	validUpdateJoinConfBRBootstrapImage := before.DeepCopy()
 	validUpdateJoinConfBRBootstrapImage.Spec.KubeadmConfigSpec.JoinConfiguration.BottlerocketBootstrap = bootstrapv1.BottlerocketBootstrap{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}
 
+	validUpdateClusterConfBRAdminImage := before.DeepCopy()
+	validUpdateClusterConfBRAdminImage.Spec.KubeadmConfigSpec.ClusterConfiguration.BottlerocketAdmin = bootstrapv1.BottlerocketAdmin{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}
+
+	validUpdateClusterConfBRControlImage := before.DeepCopy()
+	validUpdateClusterConfBRControlImage.Spec.KubeadmConfigSpec.ClusterConfiguration.BottlerocketControl = bootstrapv1.BottlerocketControl{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}
+
+	validUpdateClusterConfBRCustomBootstrapContainers := before.DeepCopy()
+	validUpdateClusterConfBRCustomBootstrapContainers.Spec.KubeadmConfigSpec.ClusterConfiguration.BottlerocketCustomBootstrapContainers = []bootstrapv1.BottlerocketBootstrapContainer{{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}}
+
+	validUpdateJoinConfBRAdminImage := before.DeepCopy()
+	validUpdateJoinConfBRAdminImage.Spec.KubeadmConfigSpec.JoinConfiguration.BottlerocketAdmin = bootstrapv1.BottlerocketAdmin{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}
+
+	validUpdateJoinConfBRControlImage := before.DeepCopy()
+	validUpdateJoinConfBRControlImage.Spec.KubeadmConfigSpec.JoinConfiguration.BottlerocketControl = bootstrapv1.BottlerocketControl{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}
+
+	validUpdateJoinConfBRCustomBootstrapContainers := before.DeepCopy()
+	validUpdateJoinConfBRCustomBootstrapContainers.Spec.KubeadmConfigSpec.JoinConfiguration.BottlerocketCustomBootstrapContainers = []bootstrapv1.BottlerocketBootstrapContainer{{ImageRepository: "registry.k8s.io/bottlerocketbootstrap", ImageTag: "v1.1.0+new"}}
+
 	tests := []struct {
 		name                  string
 		enableIgnitionFeature bool
@@ -1142,6 +1160,24 @@ func TestKubeadmControlPlaneValidateUpdate(t *testing.T) {
 			before:    before,
 			kcp:       validUpdateClusterConfBRBootstrapImage,
 		},
+		{
+			name:      "should allow changes to cluster configuration bottlerocket admin image",
+			expectErr: false,
+			before:    before,
+			kcp:       validUpdateClusterConfBRAdminImage,
+		},
+		{
+			name:      "should allow changes to cluster configuration bottlerocket control image",
+			expectErr: false,
+			before:    before,
+			kcp:       validUpdateClusterConfBRControlImage,
+		},
+		{
+			name:      "should allow changes to cluster configuration bottlerocket custom bootstrap containers",
+			expectErr: false,
+			before:    before,
+			kcp:       validUpdateClusterConfBRCustomBootstrapContainers,
+		},
 		{
 			name:      "should allow changes to join configuration pause image",
 			expectErr: false,
@@ -1154,6 +1190,24 @@ func TestKubeadmControlPlaneValidateUpdate(t *testing.T) {
 			before:    before,
 			kcp:       validUpdateJoinConfBRBootstrapImage,
 		},
+		{
+			name:      "should allow changes to join configuration bottlerocket admin image",
+			expectErr: false,
+			before:    before,
+			kcp:       validUpdateJoinConfBRAdminImage,
+		},
+		{
+			name:      "should allow changes to join configuration bottlerocket control image",
+			expectErr: false,
+			before:    before,
+			kcp:       validUpdateJoinConfBRControlImage,
+		},
+		{
+			name:      "should allow changes to join configuration bottlerocket custom bootstrap containers",
+			expectErr: false,
+			before:    before,
+			kcp:       validUpdateJoinConfBRCustomBootstrapContainers,
+		},
 	}
 
 	for _, tt := range tests {
-- 
2.49.0

