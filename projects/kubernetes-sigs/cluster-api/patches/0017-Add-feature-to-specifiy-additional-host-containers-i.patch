From 3f72ef3a407b208af6a4b9a179f034e58be6cafe Mon Sep 17 00:00:00 2001
From: Victor Pineda <vgonzla@amazon.com>
Date: Tue, 21 Jun 2022 07:50:19 -0700
Subject: [PATCH 17/40] Add feature to specifiy additional host containers in
 BR

Host containers are a feature within BR that allows us to pull images
without the need of having to bootstrap kuberentes. Such containers can
be superpowered and user-data can be attached to each one of them. As
such, this commit creates the `BottlerocketHostContainer` struct to allow
the user to customize the those fields. Users can specify an arbitrary
number of host containers in the `AdditionalHostContainers` field.

This commit also does some refactoring around the templating system BR
has to generate the TOML files. It generifies the host-container
template to be reused as much as a user wants to.

SIM: https://i.amazon.com/P66557529
cr: https://code.amazon.com/reviews/CR-71408825
---
 .../kubeadm/api/v1beta1/kubeadm_types.go      |  25 ++
 .../api/v1beta1/zz_generated.deepcopy.go      |  26 ++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 246 ++++++++++++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 246 ++++++++++++++++++
 .../internal/bottlerocket/bootstrap.go        |  44 ++--
 .../internal/bottlerocket/bottlerocket.go     | 105 +++++---
 .../controllers/kubeadmconfig_controller.go   |  21 +-
 .../kubeadm/types/upstreamv1beta1/types.go    |  25 ++
 .../zz_generated.conversion.go                |  90 +++++++
 .../upstreamv1beta1/zz_generated.deepcopy.go  |  26 ++
 .../zz_generated.conversion.go                |   2 +
 .../zz_generated.conversion.go                |   2 +
 .../zz_generated.conversion.go                |   4 +
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 246 ++++++++++++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 168 ++++++++++++
 .../bootstrap/kubeadm/v1alpha4/conversion.go  |   5 +
 .../kubeadm/v1alpha4/kubeadm_types.go         |  25 ++
 .../v1alpha4/zz_generated.conversion.go       |  57 +++-
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go |  26 ++
 19 files changed, 1306 insertions(+), 83 deletions(-)

diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
index 05196a51d..b02319da4 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
@@ -170,6 +170,11 @@ type ClusterConfiguration struct {
 	// The cluster name
 	// +optional
 	ClusterName string `json:"clusterName,omitempty"`
+
+	// BottlerocketHostContainers contains the information of any additional images
+	// that we will deploy as host containers in the CPIs
+	// +optional
+	BottlerocketHostContainers []BottlerocketHostContainer `json:"bottlerocketCustomHostContainers,omitempty"`
 }
 
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
@@ -559,6 +564,26 @@ type JoinConfiguration struct {
 	// "kubeadm join". The minimum kubernetes version needed to support Patches is v1.22
 	// +optional
 	Patches *Patches `json:"patches,omitempty"`
+
+	// BottlerocketCustomHostContainers contains the information of any additional images
+	// that we will deploy as host containers in the CPIs
+	// +optional
+	BottlerocketCustomHostContainers []BottlerocketHostContainer `json:"bottlerocketCustomHostContainers,omitempty"`
+}
+
+// BottlerocketHostContainer describes a host image for Bottlerocket
+type BottlerocketHostContainer struct {
+	// Name is the host container name that will be given to the container in BR's `apiserver`
+	// +kubebuilder:validation:Required
+	Name string `json:"name"`
+	// Superpowered indicates if the container will be superpowered
+	// +kubebuilder:validation:Required
+	Superpowered bool `json:"superpowered"`
+	// ImageMeta is the actual location of the container image
+	ImageMeta `json:"source"`
+	// UserData is the userdata that will be attached to the image.
+	// +optional
+	UserData string `json:"userData,omitempty"`
 }
 
 // JoinControlPlane contains elements describing an additional control plane instance to be deployed on the joining node.
diff --git a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
index 78bd2b447..dfdb5e535 100644
--- a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
@@ -174,6 +174,22 @@ func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketHostContainer) DeepCopyInto(out *BottlerocketHostContainer) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketHostContainer.
+func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketHostContainer)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -196,6 +212,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 			(*out)[key] = val
 		}
 	}
+	if in.BottlerocketHostContainers != nil {
+		in, out := &in.BottlerocketHostContainers, &out.BottlerocketHostContainers
+		*out = make([]BottlerocketHostContainer, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -663,6 +684,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = new(Patches)
 		**out = **in
 	}
+	if in.BottlerocketCustomHostContainers != nil {
+		in, out := &in.BottlerocketCustomHostContainers, &out.BottlerocketCustomHostContainers
+		*out = make([]BottlerocketHostContainer, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index bca7cae6b..68618bb3a 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -146,6 +146,47 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketCustomHostContainers:
+                    description: |-
+                      BottlerocketHostContainers contains the information of any additional images
+                      that we will deploy as host containers in the CPIs
+                    items:
+                      description: BottlerocketHostContainer describes a host image
+                        for Bottlerocket
+                      properties:
+                        name:
+                          description: Name is the host container name that will be
+                            given to the container in BR's `apiserver`
+                          type: string
+                        source:
+                          description: ImageMeta is the actual location of the container
+                            image
+                          properties:
+                            imageRepository:
+                              description: |-
+                                ImageRepository sets the container registry to pull images from.
+                                if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                              type: string
+                            imageTag:
+                              description: |-
+                                ImageTag allows to specify a tag for the image.
+                                In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                              type: string
+                          type: object
+                        superpowered:
+                          description: Superpowered indicates if the container will
+                            be superpowered
+                          type: boolean
+                        userData:
+                          description: UserData is the userdata that will be attached
+                            to the image.
+                          type: string
+                      required:
+                      - name
+                      - source
+                      - superpowered
+                      type: object
+                    type: array
                   certificatesDir:
                     description: |-
                       CertificatesDir specifies where to store or look for all required certificates.
@@ -784,6 +825,47 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketCustomHostContainers:
+                    description: |-
+                      BottlerocketCustomHostContainers contains the information of any additional images
+                      that we will deploy as host containers in the CPIs
+                    items:
+                      description: BottlerocketHostContainer describes a host image
+                        for Bottlerocket
+                      properties:
+                        name:
+                          description: Name is the host container name that will be
+                            given to the container in BR's `apiserver`
+                          type: string
+                        source:
+                          description: ImageMeta is the actual location of the container
+                            image
+                          properties:
+                            imageRepository:
+                              description: |-
+                                ImageRepository sets the container registry to pull images from.
+                                if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                              type: string
+                            imageTag:
+                              description: |-
+                                ImageTag allows to specify a tag for the image.
+                                In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                              type: string
+                          type: object
+                        superpowered:
+                          description: Superpowered indicates if the container will
+                            be superpowered
+                          type: boolean
+                        userData:
+                          description: UserData is the userdata that will be attached
+                            to the image.
+                          type: string
+                      required:
+                      - name
+                      - source
+                      - superpowered
+                      type: object
+                    type: array
                   caCertPath:
                     description: |-
                       CACertPath is the path to the SSL certificate authority used to
@@ -1314,6 +1396,47 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketCustomHostContainers:
+                    description: |-
+                      BottlerocketHostContainers contains the information of any additional images
+                      that we will deploy as host containers in the CPIs
+                    items:
+                      description: BottlerocketHostContainer describes a host image
+                        for Bottlerocket
+                      properties:
+                        name:
+                          description: Name is the host container name that will be
+                            given to the container in BR's `apiserver`
+                          type: string
+                        source:
+                          description: ImageMeta is the actual location of the container
+                            image
+                          properties:
+                            imageRepository:
+                              description: |-
+                                ImageRepository sets the container registry to pull images from.
+                                if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                              type: string
+                            imageTag:
+                              description: |-
+                                ImageTag allows to specify a tag for the image.
+                                In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                              type: string
+                          type: object
+                        superpowered:
+                          description: Superpowered indicates if the container will
+                            be superpowered
+                          type: boolean
+                        userData:
+                          description: UserData is the userdata that will be attached
+                            to the image.
+                          type: string
+                      required:
+                      - name
+                      - source
+                      - superpowered
+                      type: object
+                    type: array
                   certificatesDir:
                     description: |-
                       CertificatesDir specifies where to store or look for all required certificates.
@@ -1948,6 +2071,47 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketCustomHostContainers:
+                    description: |-
+                      BottlerocketCustomHostContainers contains the information of any additional images
+                      that we will deploy as host containers in the CPIs
+                    items:
+                      description: BottlerocketHostContainer describes a host image
+                        for Bottlerocket
+                      properties:
+                        name:
+                          description: Name is the host container name that will be
+                            given to the container in BR's `apiserver`
+                          type: string
+                        source:
+                          description: ImageMeta is the actual location of the container
+                            image
+                          properties:
+                            imageRepository:
+                              description: |-
+                                ImageRepository sets the container registry to pull images from.
+                                if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                              type: string
+                            imageTag:
+                              description: |-
+                                ImageTag allows to specify a tag for the image.
+                                In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                              type: string
+                          type: object
+                        superpowered:
+                          description: Superpowered indicates if the container will
+                            be superpowered
+                          type: boolean
+                        userData:
+                          description: UserData is the userdata that will be attached
+                            to the image.
+                          type: string
+                      required:
+                      - name
+                      - source
+                      - superpowered
+                      type: object
+                    type: array
                   caCertPath:
                     description: |-
                       CACertPath is the path to the SSL certificate authority used to
@@ -2597,6 +2761,47 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketCustomHostContainers:
+                    description: |-
+                      BottlerocketHostContainers contains the information of any additional images
+                      that we will deploy as host containers in the CPIs
+                    items:
+                      description: BottlerocketHostContainer describes a host image
+                        for Bottlerocket
+                      properties:
+                        name:
+                          description: Name is the host container name that will be
+                            given to the container in BR's `apiserver`
+                          type: string
+                        source:
+                          description: ImageMeta is the actual location of the container
+                            image
+                          properties:
+                            imageRepository:
+                              description: |-
+                                ImageRepository sets the container registry to pull images from.
+                                if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                              type: string
+                            imageTag:
+                              description: |-
+                                ImageTag allows to specify a tag for the image.
+                                In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                              type: string
+                          type: object
+                        superpowered:
+                          description: Superpowered indicates if the container will
+                            be superpowered
+                          type: boolean
+                        userData:
+                          description: UserData is the userdata that will be attached
+                            to the image.
+                          type: string
+                      required:
+                      - name
+                      - source
+                      - superpowered
+                      type: object
+                    type: array
                   certificatesDir:
                     description: |-
                       CertificatesDir specifies where to store or look for all required certificates.
@@ -3733,6 +3938,47 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketCustomHostContainers:
+                    description: |-
+                      BottlerocketCustomHostContainers contains the information of any additional images
+                      that we will deploy as host containers in the CPIs
+                    items:
+                      description: BottlerocketHostContainer describes a host image
+                        for Bottlerocket
+                      properties:
+                        name:
+                          description: Name is the host container name that will be
+                            given to the container in BR's `apiserver`
+                          type: string
+                        source:
+                          description: ImageMeta is the actual location of the container
+                            image
+                          properties:
+                            imageRepository:
+                              description: |-
+                                ImageRepository sets the container registry to pull images from.
+                                if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                              type: string
+                            imageTag:
+                              description: |-
+                                ImageTag allows to specify a tag for the image.
+                                In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                              type: string
+                          type: object
+                        superpowered:
+                          description: Superpowered indicates if the container will
+                            be superpowered
+                          type: boolean
+                        userData:
+                          description: UserData is the userdata that will be attached
+                            to the image.
+                          type: string
+                      required:
+                      - name
+                      - source
+                      - superpowered
+                      type: object
+                    type: array
                   caCertPath:
                     description: |-
                       CACertPath is the path to the SSL certificate authority used to
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 9cfff7025..bfbc20745 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -154,6 +154,47 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketCustomHostContainers:
+                            description: |-
+                              BottlerocketHostContainers contains the information of any additional images
+                              that we will deploy as host containers in the CPIs
+                            items:
+                              description: BottlerocketHostContainer describes a host
+                                image for Bottlerocket
+                              properties:
+                                name:
+                                  description: Name is the host container name that
+                                    will be given to the container in BR's `apiserver`
+                                  type: string
+                                source:
+                                  description: ImageMeta is the actual location of
+                                    the container image
+                                  properties:
+                                    imageRepository:
+                                      description: |-
+                                        ImageRepository sets the container registry to pull images from.
+                                        if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                      type: string
+                                    imageTag:
+                                      description: |-
+                                        ImageTag allows to specify a tag for the image.
+                                        In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                      type: string
+                                  type: object
+                                superpowered:
+                                  description: Superpowered indicates if the container
+                                    will be superpowered
+                                  type: boolean
+                                userData:
+                                  description: UserData is the userdata that will
+                                    be attached to the image.
+                                  type: string
+                              required:
+                              - name
+                              - source
+                              - superpowered
+                              type: object
+                            type: array
                           certificatesDir:
                             description: |-
                               CertificatesDir specifies where to store or look for all required certificates.
@@ -806,6 +847,47 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketCustomHostContainers:
+                            description: |-
+                              BottlerocketCustomHostContainers contains the information of any additional images
+                              that we will deploy as host containers in the CPIs
+                            items:
+                              description: BottlerocketHostContainer describes a host
+                                image for Bottlerocket
+                              properties:
+                                name:
+                                  description: Name is the host container name that
+                                    will be given to the container in BR's `apiserver`
+                                  type: string
+                                source:
+                                  description: ImageMeta is the actual location of
+                                    the container image
+                                  properties:
+                                    imageRepository:
+                                      description: |-
+                                        ImageRepository sets the container registry to pull images from.
+                                        if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                      type: string
+                                    imageTag:
+                                      description: |-
+                                        ImageTag allows to specify a tag for the image.
+                                        In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                      type: string
+                                  type: object
+                                superpowered:
+                                  description: Superpowered indicates if the container
+                                    will be superpowered
+                                  type: boolean
+                                userData:
+                                  description: UserData is the userdata that will
+                                    be attached to the image.
+                                  type: string
+                              required:
+                              - name
+                              - source
+                              - superpowered
+                              type: object
+                            type: array
                           caCertPath:
                             description: |-
                               CACertPath is the path to the SSL certificate authority used to
@@ -1280,6 +1362,47 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketCustomHostContainers:
+                            description: |-
+                              BottlerocketHostContainers contains the information of any additional images
+                              that we will deploy as host containers in the CPIs
+                            items:
+                              description: BottlerocketHostContainer describes a host
+                                image for Bottlerocket
+                              properties:
+                                name:
+                                  description: Name is the host container name that
+                                    will be given to the container in BR's `apiserver`
+                                  type: string
+                                source:
+                                  description: ImageMeta is the actual location of
+                                    the container image
+                                  properties:
+                                    imageRepository:
+                                      description: |-
+                                        ImageRepository sets the container registry to pull images from.
+                                        if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                      type: string
+                                    imageTag:
+                                      description: |-
+                                        ImageTag allows to specify a tag for the image.
+                                        In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                      type: string
+                                  type: object
+                                superpowered:
+                                  description: Superpowered indicates if the container
+                                    will be superpowered
+                                  type: boolean
+                                userData:
+                                  description: UserData is the userdata that will
+                                    be attached to the image.
+                                  type: string
+                              required:
+                              - name
+                              - source
+                              - superpowered
+                              type: object
+                            type: array
                           certificatesDir:
                             description: |-
                               CertificatesDir specifies where to store or look for all required certificates.
@@ -1929,6 +2052,47 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketCustomHostContainers:
+                            description: |-
+                              BottlerocketCustomHostContainers contains the information of any additional images
+                              that we will deploy as host containers in the CPIs
+                            items:
+                              description: BottlerocketHostContainer describes a host
+                                image for Bottlerocket
+                              properties:
+                                name:
+                                  description: Name is the host container name that
+                                    will be given to the container in BR's `apiserver`
+                                  type: string
+                                source:
+                                  description: ImageMeta is the actual location of
+                                    the container image
+                                  properties:
+                                    imageRepository:
+                                      description: |-
+                                        ImageRepository sets the container registry to pull images from.
+                                        if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                      type: string
+                                    imageTag:
+                                      description: |-
+                                        ImageTag allows to specify a tag for the image.
+                                        In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                      type: string
+                                  type: object
+                                superpowered:
+                                  description: Superpowered indicates if the container
+                                    will be superpowered
+                                  type: boolean
+                                userData:
+                                  description: UserData is the userdata that will
+                                    be attached to the image.
+                                  type: string
+                              required:
+                              - name
+                              - source
+                              - superpowered
+                              type: object
+                            type: array
                           caCertPath:
                             description: |-
                               CACertPath is the path to the SSL certificate authority used to
@@ -2557,6 +2721,47 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketCustomHostContainers:
+                            description: |-
+                              BottlerocketHostContainers contains the information of any additional images
+                              that we will deploy as host containers in the CPIs
+                            items:
+                              description: BottlerocketHostContainer describes a host
+                                image for Bottlerocket
+                              properties:
+                                name:
+                                  description: Name is the host container name that
+                                    will be given to the container in BR's `apiserver`
+                                  type: string
+                                source:
+                                  description: ImageMeta is the actual location of
+                                    the container image
+                                  properties:
+                                    imageRepository:
+                                      description: |-
+                                        ImageRepository sets the container registry to pull images from.
+                                        if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                      type: string
+                                    imageTag:
+                                      description: |-
+                                        ImageTag allows to specify a tag for the image.
+                                        In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                      type: string
+                                  type: object
+                                superpowered:
+                                  description: Superpowered indicates if the container
+                                    will be superpowered
+                                  type: boolean
+                                userData:
+                                  description: UserData is the userdata that will
+                                    be attached to the image.
+                                  type: string
+                              required:
+                              - name
+                              - source
+                              - superpowered
+                              type: object
+                            type: array
                           certificatesDir:
                             description: |-
                               CertificatesDir specifies where to store or look for all required certificates.
@@ -3725,6 +3930,47 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketCustomHostContainers:
+                            description: |-
+                              BottlerocketCustomHostContainers contains the information of any additional images
+                              that we will deploy as host containers in the CPIs
+                            items:
+                              description: BottlerocketHostContainer describes a host
+                                image for Bottlerocket
+                              properties:
+                                name:
+                                  description: Name is the host container name that
+                                    will be given to the container in BR's `apiserver`
+                                  type: string
+                                source:
+                                  description: ImageMeta is the actual location of
+                                    the container image
+                                  properties:
+                                    imageRepository:
+                                      description: |-
+                                        ImageRepository sets the container registry to pull images from.
+                                        if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                      type: string
+                                    imageTag:
+                                      description: |-
+                                        ImageTag allows to specify a tag for the image.
+                                        In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                      type: string
+                                  type: object
+                                superpowered:
+                                  description: Superpowered indicates if the container
+                                    will be superpowered
+                                  type: boolean
+                                userData:
+                                  description: UserData is the userdata that will
+                                    be attached to the image.
+                                  type: string
+                              required:
+                              - name
+                              - source
+                              - superpowered
+                              type: object
+                            type: array
                           caCertPath:
                             description: |-
                               CACertPath is the path to the SSL certificate authority used to
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index efdb51fef..bc5094eb1 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -3,12 +3,6 @@
 package bottlerocket
 
 const (
-	adminContainerInitTemplate = `{{ define "adminContainerInitSettings" -}}
-[settings.host-containers.admin]
-enabled = true
-user-data = "{{.AdminContainerUserData}}"
-{{- end -}}
-`
 	kubernetesInitTemplate = `{{ define "kubernetesInitSettings" -}}
 [settings.kubernetes]
 cluster-domain = "cluster.local"
@@ -22,14 +16,26 @@ provider-id = "{{.ProviderId}}"
 {{- end -}}
 `
 
-	bootstrapHostContainerTemplate = `{{define "bootstrapHostContainerSettings" -}}
-[settings.host-containers.kubeadm-bootstrap]
+	hostContainerTemplate = `{{define "hostContainerSettings" -}}
+[settings.host-containers.{{.Name}}]
 enabled = true
-superpowered = true
-source = "{{.BootstrapContainerSource}}"
-user-data = "{{.BootstrapContainerUserData}}"
+superpowered = {{.Superpowered}}
+{{- if (ne (imageUrl .ImageMeta) "")}}
+source = "{{imageUrl .ImageMeta}}"
+{{- end -}}
+{{- if (ne .UserData "")}}
+user-data = "{{.UserData}}"
+{{- end -}}
+{{- end -}}
+`
+
+	hostContainerSliceTemplate = `{{define "hostContainerSlice" -}}
+{{- range $hContainer := .HostContainers }}
+{{template "hostContainerSettings" $hContainer }}
+{{- end -}}
 {{- end -}}
 `
+
 	networkInitTemplate = `{{ define "networkInitSettings" -}}
 [settings.network]
 https-proxy = "{{.HTTPSProxyEndpoint}}"
@@ -58,17 +64,7 @@ trusted=true
 {{- end -}}
 `
 
-	controlContainerTemplate = `{{ define "controlContainerSettings" -}}
-[settings.host-containers.control]
-enabled = true
-superpowered = false
-source = "{{.ControlContainerSource}}"
-{{- end -}}
-`
-
-	bottlerocketNodeInitSettingsTemplate = `{{template "bootstrapHostContainerSettings" .}}
-
-{{template "adminContainerInitSettings" .}}
+	bottlerocketNodeInitSettingsTemplate = `{{template "hostContainerSlice" .}}
 
 {{template "kubernetesInitSettings" .}}
 
@@ -91,9 +87,5 @@ source = "{{.ControlContainerSource}}"
 {{- if (ne .Taints "")}}
 {{template "taintsTemplate" .}}
 {{- end -}}
-
-{{- if (ne .ControlContainerSource "")}}
-{{template "controlContainerSettings" .}}
-{{- end -}}
 `
 )
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index c9391fedb..0e6124b4c 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -23,28 +23,26 @@ const (
 )
 
 type BottlerocketConfig struct {
-	Pause                       bootstrapv1.Pause
-	BottlerocketBootstrap       bootstrapv1.BottlerocketBootstrap
-	BottlerocketControl         bootstrapv1.BottlerocketControl
-	ProxyConfiguration          bootstrapv1.ProxyConfiguration
-	RegistryMirrorConfiguration bootstrapv1.RegistryMirrorConfiguration
-	KubeletExtraArgs            map[string]string
-	Taints                      []corev1.Taint
+	Pause                            bootstrapv1.Pause
+	BottlerocketBootstrap            bootstrapv1.BottlerocketBootstrap
+	BottlerocketControl              bootstrapv1.BottlerocketControl
+	ProxyConfiguration               bootstrapv1.ProxyConfiguration
+	RegistryMirrorConfiguration      bootstrapv1.RegistryMirrorConfiguration
+	KubeletExtraArgs                 map[string]string
+	Taints                           []corev1.Taint
+	BottlerocketCustomHostContainers []bootstrapv1.BottlerocketHostContainer
 }
 
 type BottlerocketSettingsInput struct {
-	BootstrapContainerUserData string
-	AdminContainerUserData     string
-	BootstrapContainerSource   string
-	ControlContainerSource     string
-	PauseContainerSource       string
-	HTTPSProxyEndpoint         string
-	NoProxyEndpoints           []string
-	RegistryMirrorEndpoint     string
-	RegistryMirrorCACert       string
-	NodeLabels                 string
-	Taints                     string
-	ProviderId                 string
+	PauseContainerSource   string
+	HTTPSProxyEndpoint     string
+	NoProxyEndpoints       []string
+	RegistryMirrorEndpoint string
+	RegistryMirrorCACert   string
+	NodeLabels             string
+	Taints                 string
+	ProviderId             string
+	HostContainers         []bootstrapv1.BottlerocketHostContainer
 }
 
 type HostPath struct {
@@ -87,16 +85,23 @@ func generateAdminContainerUserData(kind string, tpl string, data interface{}) (
 	return out.Bytes(), nil
 }
 
-func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, error) {
-	tm := template.New(kind).Funcs(template.FuncMap{"stringsJoin": strings.Join})
-	if _, err := tm.Parse(bootstrapHostContainerTemplate); err != nil {
-		return nil, errors.Wrapf(err, "failed to parse hostContainer %s template", kind)
+func imageUrl(containerLocation bootstrapv1.ImageMeta) string {
+	if containerLocation.ImageRepository != "" && containerLocation.ImageTag != "" {
+		return fmt.Sprintf("%s:%s", containerLocation.ImageRepository, containerLocation.ImageTag)
 	}
-	if _, err := tm.Parse(adminContainerInitTemplate); err != nil {
-		return nil, errors.Wrapf(err, "failed to parse adminContainer %s template", kind)
+	return ""
+}
+
+func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind).Funcs(template.FuncMap{
+		"stringsJoin": strings.Join,
+		"imageUrl":    imageUrl,
+	})
+	if _, err := tm.Parse(hostContainerTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse hostContainerSettings %s template", kind)
 	}
-	if _, err := tm.Parse(controlContainerTemplate); err != nil {
-		return nil, errors.Wrapf(err, "failed to parse controlContainer %s template", kind)
+	if _, err := tm.Parse(hostContainerSliceTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse hostContainerSettingsSlice %s template", kind)
 	}
 	if _, err := tm.Parse(kubernetesInitTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse kubernetes %s template", kind)
@@ -143,20 +148,42 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 	}
 	b64AdminContainerUserData := base64.StdEncoding.EncodeToString(adminContainerUserData)
 
-	bottlerocketInput := &BottlerocketSettingsInput{
-		BootstrapContainerUserData: b64BootstrapContainerUserData,
-		AdminContainerUserData:     b64AdminContainerUserData,
-		BootstrapContainerSource:   fmt.Sprintf("%s:%s", config.BottlerocketBootstrap.ImageRepository, config.BottlerocketBootstrap.ImageTag),
-		PauseContainerSource:       fmt.Sprintf("%s:%s", config.Pause.ImageRepository, config.Pause.ImageTag),
-		HTTPSProxyEndpoint:         config.ProxyConfiguration.HTTPSProxy,
-		RegistryMirrorEndpoint:     config.RegistryMirrorConfiguration.Endpoint,
-		NodeLabels:                 parseNodeLabels(config.KubeletExtraArgs["node-labels"]), // empty string if it does not exist
-		Taints:                     parseTaints(config.Taints), //empty string if it does not exist
-		ProviderId:                 config.KubeletExtraArgs["provider-id"],
+	hostContainers := []bootstrapv1.BottlerocketHostContainer{
+		{
+			Name:         "admin",
+			Superpowered: true,
+			UserData:     b64AdminContainerUserData,
+		},
+		{
+			Name:         "kubeadm-bootstrap",
+			Superpowered: true,
+			ImageMeta:    config.BottlerocketBootstrap.ImageMeta,
+			UserData:     b64BootstrapContainerUserData,
+		},
 	}
+
 	if config.BottlerocketControl.ImageRepository != "" && config.BottlerocketControl.ImageTag != "" {
-		bottlerocketInput.ControlContainerSource = fmt.Sprintf("%s:%s", config.BottlerocketControl.ImageRepository, config.BottlerocketControl.ImageTag)
+		hostContainers = append(hostContainers, bootstrapv1.BottlerocketHostContainer{
+			Name:         "control",
+			Superpowered: false,
+			ImageMeta:    config.BottlerocketControl.ImageMeta,
+		})
 	}
+
+	if len(config.BottlerocketCustomHostContainers) != 0 {
+		hostContainers = append(hostContainers, config.BottlerocketCustomHostContainers...)
+	}
+
+	bottlerocketInput := &BottlerocketSettingsInput{
+		PauseContainerSource:   fmt.Sprintf("%s:%s", config.Pause.ImageRepository, config.Pause.ImageTag),
+		HTTPSProxyEndpoint:     config.ProxyConfiguration.HTTPSProxy,
+		RegistryMirrorEndpoint: config.RegistryMirrorConfiguration.Endpoint,
+		NodeLabels:             parseNodeLabels(config.KubeletExtraArgs["node-labels"]), // empty string if it does not exist
+		Taints:                 parseTaints(config.Taints),                              //empty string if it does not exist
+		ProviderId:             config.KubeletExtraArgs["provider-id"],
+		HostContainers:         hostContainers,
+	}
+
 	if len(config.ProxyConfiguration.NoProxy) > 0 {
 		for _, noProxy := range config.ProxyConfiguration.NoProxy {
 			bottlerocketInput.NoProxyEndpoints = append(bottlerocketInput.NoProxyEndpoints, strconv.Quote(noProxy))
@@ -183,7 +210,7 @@ func parseTaints(taints []corev1.Taint) string {
 	taintsMap := make(map[string][]string)
 	for _, taint := range taints {
 		valueEffectString := fmt.Sprintf(taintValueEffectTemplate, taint.Value, taint.Effect)
-		taintsMap[taint.Key]= append(taintsMap[taint.Key], valueEffectString)
+		taintsMap[taint.Key] = append(taintsMap[taint.Key], valueEffectString)
 	}
 
 	var taintsToml strings.Builder
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index f8673877b..568424e58 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -493,9 +493,10 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 		}
 
 		bottlerocketConfig = &bottlerocket.BottlerocketConfig{
-			Pause:                 scope.Config.Spec.ClusterConfiguration.Pause,
-			BottlerocketBootstrap: scope.Config.Spec.ClusterConfiguration.BottlerocketBootstrap,
-			BottlerocketControl:   scope.Config.Spec.ClusterConfiguration.BottlerocketControl,
+			Pause:                            scope.Config.Spec.ClusterConfiguration.Pause,
+			BottlerocketBootstrap:            scope.Config.Spec.ClusterConfiguration.BottlerocketBootstrap,
+			BottlerocketControl:              scope.Config.Spec.ClusterConfiguration.BottlerocketControl,
+			BottlerocketCustomHostContainers: scope.Config.Spec.ClusterConfiguration.BottlerocketHostContainers,
 		}
 		if scope.Config.Spec.ClusterConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.ClusterConfiguration.Proxy
@@ -728,9 +729,10 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 		})
 	case bootstrapv1.Bottlerocket:
 		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
-			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
-			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
-			BottlerocketControl:   scope.Config.Spec.JoinConfiguration.BottlerocketControl,
+			Pause:                            scope.Config.Spec.JoinConfiguration.Pause,
+			BottlerocketBootstrap:            scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+			BottlerocketControl:              scope.Config.Spec.JoinConfiguration.BottlerocketControl,
+			BottlerocketCustomHostContainers: scope.Config.Spec.JoinConfiguration.BottlerocketCustomHostContainers,
 		}
 		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
@@ -869,9 +871,10 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 		})
 	case bootstrapv1.Bottlerocket:
 		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
-			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
-			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
-			BottlerocketControl:   scope.Config.Spec.JoinConfiguration.BottlerocketControl,
+			Pause:                            scope.Config.Spec.JoinConfiguration.Pause,
+			BottlerocketBootstrap:            scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+			BottlerocketControl:              scope.Config.Spec.JoinConfiguration.BottlerocketControl,
+			BottlerocketCustomHostContainers: scope.Config.Spec.JoinConfiguration.BottlerocketCustomHostContainers,
 		}
 		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/types.go b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
index 6ac8e40d4..2fb4e6e19 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
@@ -149,6 +149,11 @@ type ClusterConfiguration struct {
 	// The cluster name
 	// +optional
 	ClusterName string `json:"clusterName,omitempty"`
+
+	// BottlerocketHostContainers contains the information of any additional images
+	// that we will deploy as host containers in the CPIs
+	// +optional
+	BottlerocketHostContainers []BottlerocketHostContainer `json:"bottlerocketCustomHostContainers,omitempty"`
 }
 
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
@@ -438,6 +443,26 @@ type JoinConfiguration struct {
 	// If nil, no additional control plane instance will be deployed.
 	// +optional
 	ControlPlane *JoinControlPlane `json:"controlPlane,omitempty"`
+
+	// BottlerocketCustomHostContainers contains the information of any additional images
+	// that we will deploy as host containers in the CPIs
+	// +optional
+	BottlerocketCustomHostContainers []BottlerocketHostContainer `json:"bottlerocketCustomHostContainers,omitempty"`
+}
+
+// BottlerocketHostContainer describes a host image for Bottlerocket
+type BottlerocketHostContainer struct {
+	// Name is the host container name that will be given to the container in BR's `apiserver`
+	// +kubebuilder:validation:Required
+	Name string `json:"name"`
+	// Superpowered indicates if the container will be superpowered
+	// +kubebuilder:validation:Required
+	Superpowered bool `json:"superpowered"`
+	// ImageMeta is the actual location of the container image
+	ImageMeta `json:"source"`
+	// UserData is the userdata that will be attached to the image.
+	// +optional
+	UserData string `json:"userData,omitempty"`
 }
 
 // JoinControlPlane contains elements describing an additional control plane instance to be deployed on the joining node.
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
index 384e520a5..613918d9e 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
@@ -98,6 +98,26 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketControl)(nil), (*v1beta1.BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(a.(*BottlerocketControl), b.(*v1beta1.BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketControl)(nil), (*BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(a.(*v1beta1.BottlerocketControl), b.(*BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketHostContainer)(nil), (*v1beta1.BottlerocketHostContainer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(a.(*BottlerocketHostContainer), b.(*v1beta1.BottlerocketHostContainer), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketHostContainer)(nil), (*BottlerocketHostContainer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHostContainer(a.(*v1beta1.BottlerocketHostContainer), b.(*BottlerocketHostContainer), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -443,6 +463,60 @@ func Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootst
 	return autoConvert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(in, out, s)
 }
 
+func autoConvert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(in, out, s)
+}
+
+func autoConvert_upstreamv1beta1_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(in *BottlerocketHostContainer, out *v1beta1.BottlerocketHostContainer, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Superpowered = in.Superpowered
+	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	out.UserData = in.UserData
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(in *BottlerocketHostContainer, out *v1beta1.BottlerocketHostContainer, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHostContainer(in *v1beta1.BottlerocketHostContainer, out *BottlerocketHostContainer, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Superpowered = in.Superpowered
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	out.UserData = in.UserData
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHostContainer is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHostContainer(in *v1beta1.BottlerocketHostContainer, out *BottlerocketHostContainer, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketHostContainer_To_upstreamv1beta1_BottlerocketHostContainer(in, out, s)
+}
+
 func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -450,6 +524,9 @@ func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	if err := Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -481,6 +558,7 @@ func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	// WARNING: in.UseHyperKubeImage requires manual conversion: does not exist in peer-type
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	out.BottlerocketHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	return nil
 }
 
@@ -491,6 +569,9 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfigur
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -521,6 +602,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfigur
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	out.BottlerocketHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	return nil
 }
 
@@ -795,6 +877,9 @@ func autoConvert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(
 	if err := Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta1_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -809,6 +894,7 @@ func autoConvert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(
 		return err
 	}
 	out.ControlPlane = (*v1beta1.JoinControlPlane)(unsafe.Pointer(in.ControlPlane))
+	out.BottlerocketCustomHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	return nil
 }
 
@@ -824,6 +910,9 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta1_JoinConfiguration(
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -840,6 +929,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta1_JoinConfiguration(
 	out.ControlPlane = (*JoinControlPlane)(unsafe.Pointer(in.ControlPlane))
 	// WARNING: in.SkipPhases requires manual conversion: does not exist in peer-type
 	// WARNING: in.Patches requires manual conversion: does not exist in peer-type
+	out.BottlerocketCustomHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	return nil
 }
 
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
index 165282cc6..0dfbd9ee9 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
@@ -173,6 +173,22 @@ func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketHostContainer) DeepCopyInto(out *BottlerocketHostContainer) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketHostContainer.
+func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketHostContainer)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -195,6 +211,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 			(*out)[key] = val
 		}
 	}
+	if in.BottlerocketHostContainers != nil {
+		in, out := &in.BottlerocketHostContainers, &out.BottlerocketHostContainers
+		*out = make([]BottlerocketHostContainer, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -458,6 +479,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = new(JoinControlPlane)
 		**out = **in
 	}
+	if in.BottlerocketCustomHostContainers != nil {
+		in, out := &in.BottlerocketCustomHostContainers, &out.BottlerocketCustomHostContainers
+		*out = make([]BottlerocketHostContainer, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
index 7c9ada4df..eda036465 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
@@ -561,6 +561,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta2_ClusterConfigur
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	return nil
 }
 
@@ -898,6 +899,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta2_JoinConfiguration(
 	}
 	// WARNING: in.SkipPhases requires manual conversion: does not exist in peer-type
 	// WARNING: in.Patches requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	return nil
 }
 
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
index 18445d6d2..1192eb15b 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
@@ -565,6 +565,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta3_ClusterConfigur
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	return nil
 }
 
@@ -895,6 +896,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(
 	}
 	out.SkipPhases = *(*[]string)(unsafe.Pointer(&in.SkipPhases))
 	out.Patches = (*Patches)(unsafe.Pointer(in.Patches))
+	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	return nil
 }
 
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
index c236c3f8e..32bbc1c41 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
@@ -418,6 +418,7 @@ func autoConvert_upstreamv1beta4_ClusterConfiguration_To_v1beta1_ClusterConfigur
 func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta4_ClusterConfiguration(in *v1beta1.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketControl requires manual conversion: does not exist in peer-type
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta1_Etcd_To_upstreamv1beta4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
@@ -443,6 +444,7 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta4_ClusterConfigur
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	// WARNING: in.BottlerocketHostContainers requires manual conversion: does not exist in peer-type
 	return nil
 }
 
@@ -732,6 +734,7 @@ func autoConvert_upstreamv1beta4_JoinConfiguration_To_v1beta1_JoinConfiguration(
 func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta4_JoinConfiguration(in *v1beta1.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
 	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
 	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketControl requires manual conversion: does not exist in peer-type
 	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	// WARNING: in.RegistryMirror requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta1_NodeRegistrationOptions_To_upstreamv1beta4_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
@@ -752,6 +755,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta4_JoinConfiguration(
 	}
 	out.SkipPhases = *(*[]string)(unsafe.Pointer(&in.SkipPhases))
 	out.Patches = (*Patches)(unsafe.Pointer(in.Patches))
+	// WARNING: in.BottlerocketCustomHostContainers requires manual conversion: does not exist in peer-type
 	return nil
 }
 
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index 3e23c96bb..b8a48c183 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -230,6 +230,47 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketCustomHostContainers:
+                        description: |-
+                          BottlerocketHostContainers contains the information of any additional images
+                          that we will deploy as host containers in the CPIs
+                        items:
+                          description: BottlerocketHostContainer describes a host
+                            image for Bottlerocket
+                          properties:
+                            name:
+                              description: Name is the host container name that will
+                                be given to the container in BR's `apiserver`
+                              type: string
+                            source:
+                              description: ImageMeta is the actual location of the
+                                container image
+                              properties:
+                                imageRepository:
+                                  description: |-
+                                    ImageRepository sets the container registry to pull images from.
+                                    if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                  type: string
+                                imageTag:
+                                  description: |-
+                                    ImageTag allows to specify a tag for the image.
+                                    In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                  type: string
+                              type: object
+                            superpowered:
+                              description: Superpowered indicates if the container
+                                will be superpowered
+                              type: boolean
+                            userData:
+                              description: UserData is the userdata that will be attached
+                                to the image.
+                              type: string
+                          required:
+                          - name
+                          - source
+                          - superpowered
+                          type: object
+                        type: array
                       certificatesDir:
                         description: |-
                           CertificatesDir specifies where to store or look for all required certificates.
@@ -877,6 +918,47 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketCustomHostContainers:
+                        description: |-
+                          BottlerocketCustomHostContainers contains the information of any additional images
+                          that we will deploy as host containers in the CPIs
+                        items:
+                          description: BottlerocketHostContainer describes a host
+                            image for Bottlerocket
+                          properties:
+                            name:
+                              description: Name is the host container name that will
+                                be given to the container in BR's `apiserver`
+                              type: string
+                            source:
+                              description: ImageMeta is the actual location of the
+                                container image
+                              properties:
+                                imageRepository:
+                                  description: |-
+                                    ImageRepository sets the container registry to pull images from.
+                                    if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                  type: string
+                                imageTag:
+                                  description: |-
+                                    ImageTag allows to specify a tag for the image.
+                                    In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                  type: string
+                              type: object
+                            superpowered:
+                              description: Superpowered indicates if the container
+                                will be superpowered
+                              type: boolean
+                            userData:
+                              description: UserData is the userdata that will be attached
+                                to the image.
+                              type: string
+                          required:
+                          - name
+                          - source
+                          - superpowered
+                          type: object
+                        type: array
                       caCertPath:
                         description: |-
                           CACertPath is the path to the SSL certificate authority used to
@@ -1542,6 +1624,47 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketCustomHostContainers:
+                        description: |-
+                          BottlerocketHostContainers contains the information of any additional images
+                          that we will deploy as host containers in the CPIs
+                        items:
+                          description: BottlerocketHostContainer describes a host
+                            image for Bottlerocket
+                          properties:
+                            name:
+                              description: Name is the host container name that will
+                                be given to the container in BR's `apiserver`
+                              type: string
+                            source:
+                              description: ImageMeta is the actual location of the
+                                container image
+                              properties:
+                                imageRepository:
+                                  description: |-
+                                    ImageRepository sets the container registry to pull images from.
+                                    if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                  type: string
+                                imageTag:
+                                  description: |-
+                                    ImageTag allows to specify a tag for the image.
+                                    In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                  type: string
+                              type: object
+                            superpowered:
+                              description: Superpowered indicates if the container
+                                will be superpowered
+                              type: boolean
+                            userData:
+                              description: UserData is the userdata that will be attached
+                                to the image.
+                              type: string
+                          required:
+                          - name
+                          - source
+                          - superpowered
+                          type: object
+                        type: array
                       certificatesDir:
                         description: |-
                           CertificatesDir specifies where to store or look for all required certificates.
@@ -2186,6 +2309,47 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketCustomHostContainers:
+                        description: |-
+                          BottlerocketCustomHostContainers contains the information of any additional images
+                          that we will deploy as host containers in the CPIs
+                        items:
+                          description: BottlerocketHostContainer describes a host
+                            image for Bottlerocket
+                          properties:
+                            name:
+                              description: Name is the host container name that will
+                                be given to the container in BR's `apiserver`
+                              type: string
+                            source:
+                              description: ImageMeta is the actual location of the
+                                container image
+                              properties:
+                                imageRepository:
+                                  description: |-
+                                    ImageRepository sets the container registry to pull images from.
+                                    if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                  type: string
+                                imageTag:
+                                  description: |-
+                                    ImageTag allows to specify a tag for the image.
+                                    In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                  type: string
+                              type: object
+                            superpowered:
+                              description: Superpowered indicates if the container
+                                will be superpowered
+                              type: boolean
+                            userData:
+                              description: UserData is the userdata that will be attached
+                                to the image.
+                              type: string
+                          required:
+                          - name
+                          - source
+                          - superpowered
+                          type: object
+                        type: array
                       caCertPath:
                         description: |-
                           CACertPath is the path to the SSL certificate authority used to
@@ -3073,6 +3237,47 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketCustomHostContainers:
+                        description: |-
+                          BottlerocketHostContainers contains the information of any additional images
+                          that we will deploy as host containers in the CPIs
+                        items:
+                          description: BottlerocketHostContainer describes a host
+                            image for Bottlerocket
+                          properties:
+                            name:
+                              description: Name is the host container name that will
+                                be given to the container in BR's `apiserver`
+                              type: string
+                            source:
+                              description: ImageMeta is the actual location of the
+                                container image
+                              properties:
+                                imageRepository:
+                                  description: |-
+                                    ImageRepository sets the container registry to pull images from.
+                                    if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                  type: string
+                                imageTag:
+                                  description: |-
+                                    ImageTag allows to specify a tag for the image.
+                                    In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                  type: string
+                              type: object
+                            superpowered:
+                              description: Superpowered indicates if the container
+                                will be superpowered
+                              type: boolean
+                            userData:
+                              description: UserData is the userdata that will be attached
+                                to the image.
+                              type: string
+                          required:
+                          - name
+                          - source
+                          - superpowered
+                          type: object
+                        type: array
                       certificatesDir:
                         description: |-
                           CertificatesDir specifies where to store or look for all required certificates.
@@ -4226,6 +4431,47 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketCustomHostContainers:
+                        description: |-
+                          BottlerocketCustomHostContainers contains the information of any additional images
+                          that we will deploy as host containers in the CPIs
+                        items:
+                          description: BottlerocketHostContainer describes a host
+                            image for Bottlerocket
+                          properties:
+                            name:
+                              description: Name is the host container name that will
+                                be given to the container in BR's `apiserver`
+                              type: string
+                            source:
+                              description: ImageMeta is the actual location of the
+                                container image
+                              properties:
+                                imageRepository:
+                                  description: |-
+                                    ImageRepository sets the container registry to pull images from.
+                                    if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                  type: string
+                                imageTag:
+                                  description: |-
+                                    ImageTag allows to specify a tag for the image.
+                                    In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                  type: string
+                              type: object
+                            superpowered:
+                              description: Superpowered indicates if the container
+                                will be superpowered
+                              type: boolean
+                            userData:
+                              description: UserData is the userdata that will be attached
+                                to the image.
+                              type: string
+                          required:
+                          - name
+                          - source
+                          - superpowered
+                          type: object
+                        type: array
                       caCertPath:
                         description: |-
                           CACertPath is the path to the SSL certificate authority used to
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 41f70a3af..09ed2fcae 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -166,6 +166,48 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketCustomHostContainers:
+                                description: |-
+                                  BottlerocketHostContainers contains the information of any additional images
+                                  that we will deploy as host containers in the CPIs
+                                items:
+                                  description: BottlerocketHostContainer describes
+                                    a host image for Bottlerocket
+                                  properties:
+                                    name:
+                                      description: Name is the host container name
+                                        that will be given to the container in BR's
+                                        `apiserver`
+                                      type: string
+                                    source:
+                                      description: ImageMeta is the actual location
+                                        of the container image
+                                      properties:
+                                        imageRepository:
+                                          description: |-
+                                            ImageRepository sets the container registry to pull images from.
+                                            if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                          type: string
+                                        imageTag:
+                                          description: |-
+                                            ImageTag allows to specify a tag for the image.
+                                            In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                          type: string
+                                      type: object
+                                    superpowered:
+                                      description: Superpowered indicates if the container
+                                        will be superpowered
+                                      type: boolean
+                                    userData:
+                                      description: UserData is the userdata that will
+                                        be attached to the image.
+                                      type: string
+                                  required:
+                                  - name
+                                  - source
+                                  - superpowered
+                                  type: object
+                                type: array
                               certificatesDir:
                                 description: |-
                                   CertificatesDir specifies where to store or look for all required certificates.
@@ -821,6 +863,48 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketCustomHostContainers:
+                                description: |-
+                                  BottlerocketCustomHostContainers contains the information of any additional images
+                                  that we will deploy as host containers in the CPIs
+                                items:
+                                  description: BottlerocketHostContainer describes
+                                    a host image for Bottlerocket
+                                  properties:
+                                    name:
+                                      description: Name is the host container name
+                                        that will be given to the container in BR's
+                                        `apiserver`
+                                      type: string
+                                    source:
+                                      description: ImageMeta is the actual location
+                                        of the container image
+                                      properties:
+                                        imageRepository:
+                                          description: |-
+                                            ImageRepository sets the container registry to pull images from.
+                                            if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                          type: string
+                                        imageTag:
+                                          description: |-
+                                            ImageTag allows to specify a tag for the image.
+                                            In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                          type: string
+                                      type: object
+                                    superpowered:
+                                      description: Superpowered indicates if the container
+                                        will be superpowered
+                                      type: boolean
+                                    userData:
+                                      description: UserData is the userdata that will
+                                        be attached to the image.
+                                      type: string
+                                  required:
+                                  - name
+                                  - source
+                                  - superpowered
+                                  type: object
+                                type: array
                               caCertPath:
                                 description: |-
                                   CACertPath is the path to the SSL certificate authority used to
@@ -1607,6 +1691,48 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketCustomHostContainers:
+                                description: |-
+                                  BottlerocketHostContainers contains the information of any additional images
+                                  that we will deploy as host containers in the CPIs
+                                items:
+                                  description: BottlerocketHostContainer describes
+                                    a host image for Bottlerocket
+                                  properties:
+                                    name:
+                                      description: Name is the host container name
+                                        that will be given to the container in BR's
+                                        `apiserver`
+                                      type: string
+                                    source:
+                                      description: ImageMeta is the actual location
+                                        of the container image
+                                      properties:
+                                        imageRepository:
+                                          description: |-
+                                            ImageRepository sets the container registry to pull images from.
+                                            if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                          type: string
+                                        imageTag:
+                                          description: |-
+                                            ImageTag allows to specify a tag for the image.
+                                            In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                          type: string
+                                      type: object
+                                    superpowered:
+                                      description: Superpowered indicates if the container
+                                        will be superpowered
+                                      type: boolean
+                                    userData:
+                                      description: UserData is the userdata that will
+                                        be attached to the image.
+                                      type: string
+                                  required:
+                                  - name
+                                  - source
+                                  - superpowered
+                                  type: object
+                                type: array
                               certificatesDir:
                                 description: |-
                                   CertificatesDir specifies where to store or look for all required certificates.
@@ -2789,6 +2915,48 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketCustomHostContainers:
+                                description: |-
+                                  BottlerocketCustomHostContainers contains the information of any additional images
+                                  that we will deploy as host containers in the CPIs
+                                items:
+                                  description: BottlerocketHostContainer describes
+                                    a host image for Bottlerocket
+                                  properties:
+                                    name:
+                                      description: Name is the host container name
+                                        that will be given to the container in BR's
+                                        `apiserver`
+                                      type: string
+                                    source:
+                                      description: ImageMeta is the actual location
+                                        of the container image
+                                      properties:
+                                        imageRepository:
+                                          description: |-
+                                            ImageRepository sets the container registry to pull images from.
+                                            if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                          type: string
+                                        imageTag:
+                                          description: |-
+                                            ImageTag allows to specify a tag for the image.
+                                            In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                          type: string
+                                      type: object
+                                    superpowered:
+                                      description: Superpowered indicates if the container
+                                        will be superpowered
+                                      type: boolean
+                                    userData:
+                                      description: UserData is the userdata that will
+                                        be attached to the image.
+                                      type: string
+                                  required:
+                                  - name
+                                  - source
+                                  - superpowered
+                                  type: object
+                                type: array
                               caCertPath:
                                 description: |-
                                   CACertPath is the path to the SSL certificate authority used to
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/conversion.go b/internal/apis/bootstrap/kubeadm/v1alpha4/conversion.go
index 9544cb41d..a711b99c4 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/conversion.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/conversion.go
@@ -197,6 +197,11 @@ func Convert_v1beta1_User_To_v1alpha4_User(in *bootstrapv1.User, out *User, s ap
 	return autoConvert_v1beta1_User_To_v1alpha4_User(in, out, s)
 }
 
+func Convert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in *bootstrapv1.ClusterConfiguration, out *ClusterConfiguration, s apiconversion.Scope) error {
+	// ClusterConfiguration.BottlerocketCustomHostContainers exists in bootstrapv1.ClusterConfiguration but not in v1alpha4
+	return autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in, out, s)
+}
+
 func Convert_v1beta1_NodeRegistrationOptions_To_v1alpha4_NodeRegistrationOptions(in *bootstrapv1.NodeRegistrationOptions, out *NodeRegistrationOptions, s apiconversion.Scope) error {
 	// NodeRegistrationOptions.ImagePullPolicy does not exit in
 	// kubeadm v1alpha4 API.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index 9027f336f..7f54b3b1d 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -151,6 +151,11 @@ type ClusterConfiguration struct {
 	// The cluster name
 	// +optional
 	ClusterName string `json:"clusterName,omitempty"`
+
+	// BottlerocketHostContainers contains the information of any additional images
+	// that we will deploy as host containers in the CPIs
+	// +optional
+	BottlerocketHostContainers []BottlerocketHostContainer `json:"bottlerocketCustomHostContainers,omitempty"`
 }
 
 // Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
@@ -449,6 +454,26 @@ type JoinConfiguration struct {
 	// If nil, no additional control plane instance will be deployed.
 	// +optional
 	ControlPlane *JoinControlPlane `json:"controlPlane,omitempty"`
+
+	// BottlerocketCustomHostContainers contains the information of any additional images
+	// that we will deploy as host containers in the CPIs
+	// +optional
+	BottlerocketCustomHostContainers []BottlerocketHostContainer `json:"bottlerocketCustomHostContainers,omitempty"`
+}
+
+// BottlerocketHostContainer describes a host image for Bottlerocket
+type BottlerocketHostContainer struct {
+	// Name is the host container name that will be given to the container in BR's `apiserver`
+	// +kubebuilder:validation:Required
+	Name string `json:"name"`
+	// Superpowered indicates if the container will be superpowered
+	// +kubebuilder:validation:Required
+	Superpowered bool `json:"superpowered"`
+	// ImageMeta is the actual location of the container image
+	ImageMeta `json:"source"`
+	// UserData is the userdata that will be attached to the image.
+	// +optional
+	UserData string `json:"userData,omitempty"`
 }
 
 // JoinControlPlane contains elements describing an additional control plane instance to be deployed on the joining node.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index b9580c316..7a37ab035 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -110,13 +110,18 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
+	if err := s.AddGeneratedConversionFunc((*BottlerocketHostContainer)(nil), (*v1beta1.BottlerocketHostContainer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(a.(*BottlerocketHostContainer), b.(*v1beta1.BottlerocketHostContainer), scope)
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketHostContainer)(nil), (*BottlerocketHostContainer)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostContainer(a.(*v1beta1.BottlerocketHostContainer), b.(*BottlerocketHostContainer), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
 		return err
 	}
@@ -410,6 +415,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta1.ControlPlaneComponent)(nil), (*ControlPlaneComponent)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ControlPlaneComponent_To_v1alpha4_ControlPlaneComponent(a.(*v1beta1.ControlPlaneComponent), b.(*ControlPlaneComponent), scope)
 	}); err != nil {
@@ -639,6 +649,36 @@ func Convert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(in *v1b
 	return autoConvert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(in, out, s)
 }
 
+func autoConvert_v1alpha4_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(in *BottlerocketHostContainer, out *v1beta1.BottlerocketHostContainer, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Superpowered = in.Superpowered
+	if err := Convert_v1alpha4_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	out.UserData = in.UserData
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(in *BottlerocketHostContainer, out *v1beta1.BottlerocketHostContainer, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketHostContainer_To_v1beta1_BottlerocketHostContainer(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostContainer(in *v1beta1.BottlerocketHostContainer, out *BottlerocketHostContainer, s conversion.Scope) error {
+	out.Name = in.Name
+	out.Superpowered = in.Superpowered
+	if err := Convert_v1beta1_ImageMeta_To_v1alpha4_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	out.UserData = in.UserData
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostContainer is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostContainer(in *v1beta1.BottlerocketHostContainer, out *BottlerocketHostContainer, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketHostContainer_To_v1alpha4_BottlerocketHostContainer(in, out, s)
+}
+
 func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_v1alpha4_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -679,6 +719,7 @@ func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(i
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	out.BottlerocketHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	return nil
 }
 
@@ -727,14 +768,10 @@ func autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(i
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
 	out.ClusterName = in.ClusterName
+	out.BottlerocketHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketHostContainers))
 	return nil
 }
 
-// Convert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration is an autogenerated conversion function.
-func Convert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in *v1beta1.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
-	return autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in, out, s)
-}
-
 func autoConvert_v1alpha4_ClusterStatus_To_v1beta1_ClusterStatus(in *ClusterStatus, out *v1beta1.ClusterStatus, s conversion.Scope) error {
 	out.APIEndpoints = *(*map[string]v1beta1.APIEndpoint)(unsafe.Pointer(&in.APIEndpoints))
 	return nil
@@ -1126,6 +1163,7 @@ func autoConvert_v1alpha4_JoinConfiguration_To_v1beta1_JoinConfiguration(in *Joi
 		return err
 	}
 	out.ControlPlane = (*v1beta1.JoinControlPlane)(unsafe.Pointer(in.ControlPlane))
+	out.BottlerocketCustomHostContainers = *(*[]v1beta1.BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	return nil
 }
 
@@ -1160,6 +1198,7 @@ func autoConvert_v1beta1_JoinConfiguration_To_v1alpha4_JoinConfiguration(in *v1b
 	out.ControlPlane = (*JoinControlPlane)(unsafe.Pointer(in.ControlPlane))
 	// WARNING: in.SkipPhases requires manual conversion: does not exist in peer-type
 	// WARNING: in.Patches requires manual conversion: does not exist in peer-type
+	out.BottlerocketCustomHostContainers = *(*[]BottlerocketHostContainer)(unsafe.Pointer(&in.BottlerocketCustomHostContainers))
 	return nil
 }
 
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index 5aec0f4bf..caed0611e 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -174,6 +174,22 @@ func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketHostContainer) DeepCopyInto(out *BottlerocketHostContainer) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketHostContainer.
+func (in *BottlerocketHostContainer) DeepCopy() *BottlerocketHostContainer {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketHostContainer)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
@@ -196,6 +212,11 @@ func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 			(*out)[key] = val
 		}
 	}
+	if in.BottlerocketHostContainers != nil {
+		in, out := &in.BottlerocketHostContainers, &out.BottlerocketHostContainers
+		*out = make([]BottlerocketHostContainer, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfiguration.
@@ -559,6 +580,11 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 		*out = new(JoinControlPlane)
 		**out = **in
 	}
+	if in.BottlerocketCustomHostContainers != nil {
+		in, out := &in.BottlerocketCustomHostContainers, &out.BottlerocketCustomHostContainers
+		*out = make([]BottlerocketHostContainer, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinConfiguration.
-- 
2.46.2

