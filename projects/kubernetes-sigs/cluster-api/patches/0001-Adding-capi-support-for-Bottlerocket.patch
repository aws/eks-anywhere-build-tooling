From 69e00b522143759fa852cf55e93c2f656277cbcd Mon Sep 17 00:00:00 2001
From: Vignesh Goutham Ganesh <vgg@amazon.com>
Date: Fri, 11 Jun 2021 10:43:09 -0700
Subject: [PATCH 01/37] Adding capi support for Bottlerocket

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>

Templating bottlerocket init data formats

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>

Generating proper vip destnation path for bottlerocket among other cluster config patches

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>

Fix kube-vip config patching by creating new Files array

Adding pause and bottlerocket bootstrap Cluster configuration to kubeadm v1beta1 api

Add bottlerocket API changes to v1beta1 types

Set bottlerocket bootstrap container and pause container source in user data

Add proxy config fields to v1beta1 api

Support proxy configuration for bottlerocket

Add network settings only when there is a proxy defined

Remove userdata logging for bottlerocket
---
 .gitignore                                    |   2 +-
 api/bootstrap/kubeadm/v1beta1/conversion.go   |  24 ++
 .../kubeadm/v1beta1/kubeadm_types.go          |  53 +++
 .../kubeadm/v1beta1/kubeadmconfig_types.go    |   5 +-
 .../v1beta1/zz_generated.conversion.go        | 110 ++++++
 .../kubeadm/v1beta1/zz_generated.deepcopy.go  |  58 ++++
 .../kubeadm/v1beta2/kubeadm_types.go          |  77 +++++
 .../kubeadm/v1beta2/kubeadmconfig_types.go    |   5 +-
 .../kubeadm/v1beta2/zz_generated.deepcopy.go  |  56 +++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 312 +++++++++++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 318 ++++++++++++++++++
 .../internal/bottlerocket/bootstrap.go        |  45 +++
 .../internal/bottlerocket/bottlerocket.go     | 176 ++++++++++
 .../bottlerocket/bottlerocket_test.go         | 141 ++++++++
 .../bottlerocket/controlplane_init.go         |  47 +++
 .../bottlerocket/controlplane_join.go         |  30 ++
 .../kubeadm/internal/bottlerocket/files.go    |  18 +
 .../kubeadm/internal/bottlerocket/node.go     |  32 ++
 .../kubeadm/internal/bottlerocket/users.go    |  12 +
 .../kubeadm/internal/bottlerocket/utils.go    |  18 +
 .../kubeadm/internal/cloudinit/cloudinit.go   |   2 +-
 .../controllers/kubeadmconfig_controller.go   |  72 ++++
 .../zz_generated.conversion.go                |   6 +
 .../types/upstreamv1beta4/conversion.go       |  14 +
 .../kubeadm/types/upstreamv1beta4/types.go    |  85 +++++
 .../zz_generated.conversion.go                | 114 ++++++-
 .../upstreamv1beta4/zz_generated.deepcopy.go  |  45 ++-
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 318 ++++++++++++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 317 +++++++++++++++++
 .../kubeadm/v1alpha3/kubeadmconfig_types.go   |   5 +-
 .../v1alpha3/zz_generated.conversion.go       |   6 +
 .../bootstrap/kubeadm/v1alpha4/conversion.go  |  24 ++
 .../kubeadm/v1alpha4/kubeadm_types.go         |  53 +++
 .../kubeadm/v1alpha4/kubeadmconfig_types.go   |   5 +-
 .../v1alpha4/zz_generated.conversion.go       | 110 ++++++
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go |  58 ++++
 36 files changed, 2765 insertions(+), 8 deletions(-)
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/files.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/node.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/users.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/utils.go

diff --git a/.gitignore b/.gitignore
index 78da1a303..3116e7079 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,7 +9,7 @@ hack/tools/bin
 
 # Test binary, build with `go test -c`
 *.test
-
+patches
 # E2E test templates
 test/e2e/data/infrastructure-docker/**/cluster-template*.yaml
 !test/e2e/data/infrastructure-docker/**/clusterclass-quick-start.yaml
diff --git a/api/bootstrap/kubeadm/v1beta1/conversion.go b/api/bootstrap/kubeadm/v1beta1/conversion.go
index 3f6bf3eeb..f80cd5477 100644
--- a/api/bootstrap/kubeadm/v1beta1/conversion.go
+++ b/api/bootstrap/kubeadm/v1beta1/conversion.go
@@ -658,6 +658,30 @@ func Convert_v1beta2_DNS_To_v1beta1_DNS(in *bootstrapv1.DNS, out *DNS, _ apimach
 	return nil
 }
 
+func Convert_v1beta1_Pause_To_v1beta2_Pause(in *Pause, out *bootstrapv1.Pause, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+func Convert_v1beta2_Pause_To_v1beta1_Pause(in *bootstrapv1.Pause, out *Pause, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+func Convert_v1beta1_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *bootstrapv1.BottlerocketBootstrap, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+func Convert_v1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *bootstrapv1.BottlerocketBootstrap, out *BottlerocketBootstrap, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
 func Convert_v1beta1_Etcd_To_v1beta2_Etcd(in *Etcd, out *bootstrapv1.Etcd, s apimachineryconversion.Scope) error {
 	if in.Local != nil {
 		if err := Convert_v1beta1_LocalEtcd_To_v1beta2_LocalEtcd(in.Local, &out.Local, s); err != nil {
diff --git a/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go b/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
index 97f7dafca..6d1c8f0c5 100644
--- a/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
+++ b/api/bootstrap/kubeadm/v1beta1/kubeadm_types.go
@@ -77,6 +77,21 @@ type InitConfiguration struct {
 type ClusterConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -161,6 +176,29 @@ type ClusterConfiguration struct {
 	ClusterName string `json:"clusterName,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// ImageMeta allows to customize the image used for the Pause component
+	ImageMeta `json:",inline"`
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// ImageMeta allows to customize the image used for the BottlerocketBootstrap component
+	ImageMeta `json:",inline"`
+}
+
+// ProxyConfiguration holds the settings for proxying bottlerocket services
+type ProxyConfiguration struct {
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
+}
+
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
 type ControlPlaneComponent struct {
 	// extraArgs is an extra set of flags to pass to the control plane component.
@@ -508,6 +546,21 @@ type ExternalEtcd struct {
 type JoinConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// nodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/api/bootstrap/kubeadm/v1beta1/kubeadmconfig_types.go b/api/bootstrap/kubeadm/v1beta1/kubeadmconfig_types.go
index 98a582479..5c63ca65f 100644
--- a/api/bootstrap/kubeadm/v1beta1/kubeadmconfig_types.go
+++ b/api/bootstrap/kubeadm/v1beta1/kubeadmconfig_types.go
@@ -27,7 +27,7 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config;ignition
+// +kubebuilder:validation:Enum=cloud-config;ignition;bottlerocket
 type Format string
 
 const (
@@ -36,6 +36,9 @@ const (
 
 	// Ignition make the bootstrap data to be of Ignition format.
 	Ignition Format = "ignition"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 var (
diff --git a/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go b/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
index bae21feb4..3e8083317 100644
--- a/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
+++ b/api/bootstrap/kubeadm/v1beta1/zz_generated.conversion.go
@@ -290,6 +290,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*ProxyConfiguration)(nil), (*v1beta2.ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(a.(*ProxyConfiguration), b.(*v1beta2.ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.ProxyConfiguration)(nil), (*ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(a.(*v1beta2.ProxyConfiguration), b.(*ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*SecretFileSource)(nil), (*v1beta2.SecretFileSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_SecretFileSource_To_v1beta2_SecretFileSource(a.(*SecretFileSource), b.(*v1beta2.SecretFileSource), scope)
 	}); err != nil {
@@ -325,6 +335,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*BottlerocketBootstrap)(nil), (*v1beta2.BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(a.(*BottlerocketBootstrap), b.(*v1beta2.BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*ClusterConfiguration)(nil), (*v1beta2.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta2.ClusterConfiguration), scope)
 	}); err != nil {
@@ -420,6 +435,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*Pause)(nil), (*v1beta2.Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_Pause_To_v1beta2_Pause(a.(*Pause), b.(*v1beta2.Pause), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*User)(nil), (*v1beta2.User)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_User_To_v1beta2_User(a.(*User), b.(*v1beta2.User), scope)
 	}); err != nil {
@@ -435,6 +455,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta2.BottlerocketBootstrap)(nil), (*BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(a.(*v1beta2.BottlerocketBootstrap), b.(*BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*v1beta2.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -520,6 +545,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta2.Pause)(nil), (*Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_Pause_To_v1beta1_Pause(a.(*v1beta2.Pause), b.(*Pause), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.Scheduler)(nil), (*ControlPlaneComponent)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_Scheduler_To_v1beta1_ControlPlaneComponent(a.(*v1beta2.Scheduler), b.(*ControlPlaneComponent), scope)
 	}); err != nil {
@@ -642,8 +672,28 @@ func Convert_v1beta2_BootstrapTokenString_To_v1beta1_BootstrapTokenString(in *v1
 	return autoConvert_v1beta2_BootstrapTokenString_To_v1beta1_BootstrapTokenString(in, out, s)
 }
 
+func autoConvert_v1beta1_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta2.BottlerocketBootstrap, s conversion.Scope) error {
+	// WARNING: in.ImageMeta requires manual conversion: does not exist in peer-type
+	return nil
+}
+
+func autoConvert_v1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *v1beta2.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	// WARNING: in.ImageRepository requires manual conversion: does not exist in peer-type
+	// WARNING: in.ImageTag requires manual conversion: does not exist in peer-type
+	return nil
+}
+
 func autoConvert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in *ClusterConfiguration, out *v1beta2.ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	if err := Convert_v1beta1_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_Etcd_To_v1beta2_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -670,6 +720,15 @@ func autoConvert_v1beta1_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in
 }
 
 func autoConvert_v1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *v1beta2.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta2_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta2_Etcd_To_v1beta1_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -1076,6 +1135,15 @@ func autoConvert_v1beta2_InitConfiguration_To_v1beta1_InitConfiguration(in *v1be
 
 func autoConvert_v1beta1_JoinConfiguration_To_v1beta2_JoinConfiguration(in *JoinConfiguration, out *v1beta2.JoinConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	if err := Convert_v1beta1_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_NodeRegistrationOptions_To_v1beta2_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -1090,6 +1158,15 @@ func autoConvert_v1beta1_JoinConfiguration_To_v1beta2_JoinConfiguration(in *Join
 }
 
 func autoConvert_v1beta2_JoinConfiguration_To_v1beta1_JoinConfiguration(in *v1beta2.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta2_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1beta1_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -1708,6 +1785,39 @@ func Convert_v1beta2_Patches_To_v1beta1_Patches(in *v1beta2.Patches, out *Patche
 	return autoConvert_v1beta2_Patches_To_v1beta1_Patches(in, out, s)
 }
 
+func autoConvert_v1beta1_Pause_To_v1beta2_Pause(in *Pause, out *v1beta2.Pause, s conversion.Scope) error {
+	// WARNING: in.ImageMeta requires manual conversion: does not exist in peer-type
+	return nil
+}
+
+func autoConvert_v1beta2_Pause_To_v1beta1_Pause(in *v1beta2.Pause, out *Pause, s conversion.Scope) error {
+	// WARNING: in.ImageRepository requires manual conversion: does not exist in peer-type
+	// WARNING: in.ImageTag requires manual conversion: does not exist in peer-type
+	return nil
+}
+
+func autoConvert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(in *ProxyConfiguration, out *v1beta2.ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(in *ProxyConfiguration, out *v1beta2.ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1beta1_ProxyConfiguration_To_v1beta2_ProxyConfiguration(in, out, s)
+}
+
+func autoConvert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in *v1beta2.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in *v1beta2.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in, out, s)
+}
+
 func autoConvert_v1beta1_SecretFileSource_To_v1beta2_SecretFileSource(in *SecretFileSource, out *v1beta2.SecretFileSource, s conversion.Scope) error {
 	out.Name = in.Name
 	out.Key = in.Key
diff --git a/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go b/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
index 0bb852981..d73d37506 100644
--- a/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
+++ b/api/bootstrap/kubeadm/v1beta1/zz_generated.deepcopy.go
@@ -142,10 +142,29 @@ func (in *BootstrapTokenString) DeepCopy() *BootstrapTokenString {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootstrap.
+func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootstrap)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	out.Networking = in.Networking
 	in.APIServer.DeepCopyInto(&out.APIServer)
@@ -604,6 +623,9 @@ func (in *InitConfiguration) DeepCopyObject() runtime.Object {
 func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
@@ -1252,6 +1274,42 @@ func (in *Patches) DeepCopy() *Patches {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *Pause) DeepCopyInto(out *Pause) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pause.
+func (in *Pause) DeepCopy() *Pause {
+	if in == nil {
+		return nil
+	}
+	out := new(Pause)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ProxyConfiguration) DeepCopyInto(out *ProxyConfiguration) {
+	*out = *in
+	if in.NoProxy != nil {
+		in, out := &in.NoProxy, &out.NoProxy
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfiguration.
+func (in *ProxyConfiguration) DeepCopy() *ProxyConfiguration {
+	if in == nil {
+		return nil
+	}
+	out := new(ProxyConfiguration)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *SecretFileSource) DeepCopyInto(out *SecretFileSource) {
 	*out = *in
diff --git a/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go b/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
index e9f17e19a..14862bfc6 100644
--- a/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
+++ b/api/bootstrap/kubeadm/v1beta2/kubeadm_types.go
@@ -128,6 +128,20 @@ func (r *InitConfiguration) IsDefined() bool {
 // ClusterConfiguration contains cluster-wide configuration for a kubeadm cluster.
 // +kubebuilder:validation:MinProperties=1
 type ClusterConfiguration struct {
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
 	// etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -210,6 +224,55 @@ type ClusterConfiguration struct {
 	CACertificateValidityPeriodDays int32 `json:"caCertificateValidityPeriodDays,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// imageRepository sets the container registry to pull images from.
+	// if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=512
+	ImageRepository string `json:"imageRepository,omitempty"`
+
+	// imageTag allows to specify a tag for the image.
+	// In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=256
+	ImageTag string `json:"imageTag,omitempty"`
+
+	// TODO: evaluate if we need also a ImageName based on user feedbacks
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// imageRepository sets the container registry to pull images from.
+	// if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=512
+	ImageRepository string `json:"imageRepository,omitempty"`
+
+	// imageTag allows to specify a tag for the image.
+	// In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=256
+	ImageTag string `json:"imageTag,omitempty"`
+
+	// TODO: evaluate if we need also a ImageName based on user feedbacks
+}
+
+// ProxyConfiguration holds the settings for proxying bottlerocket services
+type ProxyConfiguration struct {
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
+}
+
 // IsDefined returns true if the ClusterConfiguration is defined.
 func (r *ClusterConfiguration) IsDefined() bool {
 	return !reflect.DeepEqual(r, &ClusterConfiguration{})
@@ -592,6 +655,20 @@ func (r *ExternalEtcd) IsDefined() bool {
 // JoinConfiguration contains elements describing a particular node.
 // +kubebuilder:validation:MinProperties=1
 type JoinConfiguration struct {
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
 	// nodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/api/bootstrap/kubeadm/v1beta2/kubeadmconfig_types.go b/api/bootstrap/kubeadm/v1beta2/kubeadmconfig_types.go
index 1f7d6ef40..be59883cd 100644
--- a/api/bootstrap/kubeadm/v1beta2/kubeadmconfig_types.go
+++ b/api/bootstrap/kubeadm/v1beta2/kubeadmconfig_types.go
@@ -28,7 +28,7 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config;ignition
+// +kubebuilder:validation:Enum=cloud-config;ignition;bottlerocket
 type Format string
 
 const (
@@ -37,6 +37,9 @@ const (
 
 	// Ignition make the bootstrap data to be of Ignition format.
 	Ignition Format = "ignition"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 var (
diff --git a/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go b/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
index c05400515..33ec37d7c 100644
--- a/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
+++ b/api/bootstrap/kubeadm/v1beta2/zz_generated.deepcopy.go
@@ -179,9 +179,27 @@ func (in *BootstrapTokenString) DeepCopy() *BootstrapTokenString {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootstrap.
+func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootstrap)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	in.APIServer.DeepCopyInto(&out.APIServer)
 	in.ControllerManager.DeepCopyInto(&out.ControllerManager)
@@ -545,6 +563,9 @@ func (in *InitConfiguration) DeepCopy() *InitConfiguration {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	*out = *in
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
@@ -1188,6 +1209,41 @@ func (in *Patches) DeepCopy() *Patches {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *Pause) DeepCopyInto(out *Pause) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pause.
+func (in *Pause) DeepCopy() *Pause {
+	if in == nil {
+		return nil
+	}
+	out := new(Pause)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ProxyConfiguration) DeepCopyInto(out *ProxyConfiguration) {
+	*out = *in
+	if in.NoProxy != nil {
+		in, out := &in.NoProxy, &out.NoProxy
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfiguration.
+func (in *ProxyConfiguration) DeepCopy() *ProxyConfiguration {
+	if in == nil {
+		return nil
+	}
+	out := new(ProxyConfiguration)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *Scheduler) DeepCopyInto(out *Scheduler) {
 	*out = *in
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index 13c7c3dfd..d33f51ba0 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -505,6 +505,7 @@ spec:
                 description: format specifies the output format of the bootstrap data
                 enum:
                 - cloud-config
+                - bottlerocket
                 type: string
               initConfiguration:
                 description: initConfiguration along with ClusterConfiguration are
@@ -1111,6 +1112,22 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
@@ -1316,6 +1333,36 @@ spec:
                           to "10.96.0.0/12" if that's unset.
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   scheduler:
                     description: scheduler contains extra settings for the scheduler
                       control plane component
@@ -1499,6 +1546,7 @@ spec:
                 description: format specifies the output format of the bootstrap data
                 enum:
                 - cloud-config
+                - bottlerocket
                 type: string
               initConfiguration:
                 description: initConfiguration along with ClusterConfiguration are
@@ -1665,6 +1713,22 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       caCertPath is the path to the SSL certificate authority used to
@@ -1830,6 +1894,36 @@ spec:
                           type: object
                         type: array
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                 type: object
               mounts:
                 description: mounts specifies a list of mount points to be setup.
@@ -2249,6 +2343,26 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
@@ -2758,6 +2872,40 @@ spec:
                         minLength: 1
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   scheduler:
                     description: scheduler contains extra settings for the scheduler
                       control plane component
@@ -3109,6 +3257,7 @@ spec:
                 enum:
                 - cloud-config
                 - ignition
+                - bottlerocket
                 type: string
               ignition:
                 description: ignition contains Ignition specific configuration.
@@ -3365,6 +3514,26 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       caCertPath is the path to the SSL certificate authority used to
@@ -3743,6 +3912,40 @@ spec:
                         minLength: 1
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   skipPhases:
                     description: |-
                       skipPhases is a list of phases to skip during command execution.
@@ -4363,6 +4566,26 @@ spec:
                         type: array
                         x-kubernetes-list-type: atomic
                     type: object
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
                   caCertificateValidityPeriodDays:
                     description: |-
                       caCertificateValidityPeriodDays specifies the validity period for CA certificates generated by Cluster API.
@@ -4911,6 +5134,40 @@ spec:
                     maxLength: 512
                     minLength: 1
                     type: string
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   scheduler:
                     description: scheduler contains extra settings for the scheduler
                       control plane component
@@ -5302,6 +5559,7 @@ spec:
                 enum:
                 - cloud-config
                 - ignition
+                - bottlerocket
                 type: string
               ignition:
                 description: ignition contains Ignition specific configuration.
@@ -5638,6 +5896,26 @@ spec:
                   join command
                 minProperties: 1
                 properties:
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       caCertPath is the path to the SSL certificate authority used to
@@ -6047,6 +6325,40 @@ spec:
                         minLength: 1
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          imageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        maxLength: 512
+                        minLength: 1
+                        type: string
+                      imageTag:
+                        description: |-
+                          imageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        maxLength: 256
+                        minLength: 1
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   skipPhases:
                     description: |-
                       skipPhases is a list of phases to skip during command execution.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 0c742aa79..cab4d6eb5 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -525,6 +525,7 @@ spec:
                           data
                         enum:
                         - cloud-config
+                        - bottlerocket
                         type: string
                       initConfiguration:
                         description: initConfiguration along with ClusterConfiguration
@@ -1074,6 +1075,22 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
@@ -1283,6 +1300,37 @@ spec:
                                   to "10.96.0.0/12" if that's unset.
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           scheduler:
                             description: scheduler contains extra settings for the
                               scheduler control plane component
@@ -1474,6 +1522,7 @@ spec:
                           data
                         enum:
                         - cloud-config
+                        - bottlerocket
                         type: string
                       initConfiguration:
                         description: initConfiguration along with ClusterConfiguration
@@ -1641,6 +1690,22 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               caCertPath is the path to the SSL certificate authority used to
@@ -1809,6 +1874,37 @@ spec:
                                   type: object
                                 type: array
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                         type: object
                       mounts:
                         description: mounts specifies a list of mount points to be
@@ -2202,6 +2298,26 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
@@ -2724,6 +2840,41 @@ spec:
                                 minLength: 1
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           scheduler:
                             description: scheduler contains extra settings for the
                               scheduler control plane component
@@ -3087,6 +3238,7 @@ spec:
                         enum:
                         - cloud-config
                         - ignition
+                        - bottlerocket
                         type: string
                       ignition:
                         description: ignition contains Ignition specific configuration.
@@ -3346,6 +3498,26 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               caCertPath is the path to the SSL certificate authority used to
@@ -3732,6 +3904,41 @@ spec:
                                 minLength: 1
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           skipPhases:
                             description: |-
                               skipPhases is a list of phases to skip during command execution.
@@ -4238,6 +4445,26 @@ spec:
                                 type: array
                                 x-kubernetes-list-type: atomic
                             type: object
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
                           caCertificateValidityPeriodDays:
                             description: |-
                               caCertificateValidityPeriodDays specifies the validity period for CA certificates generated by Cluster API.
@@ -4800,6 +5027,41 @@ spec:
                             maxLength: 512
                             minLength: 1
                             type: string
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           scheduler:
                             description: scheduler contains extra settings for the
                               scheduler control plane component
@@ -5202,6 +5464,7 @@ spec:
                         enum:
                         - cloud-config
                         - ignition
+                        - bottlerocket
                         type: string
                       ignition:
                         description: ignition contains Ignition specific configuration.
@@ -5540,6 +5803,26 @@ spec:
                           for the join command
                         minProperties: 1
                         properties:
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               caCertPath is the path to the SSL certificate authority used to
@@ -5956,6 +6239,41 @@ spec:
                                 minLength: 1
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  imageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                maxLength: 512
+                                minLength: 1
+                                type: string
+                              imageTag:
+                                description: |-
+                                  imageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                maxLength: 256
+                                minLength: 1
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           skipPhases:
                             description: |-
                               skipPhases is a list of phases to skip during command execution.
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
new file mode 100644
index 000000000..e4be8d945
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -0,0 +1,45 @@
+// This file defines the core bootstrap templates required
+// to bootstrap Bottlerocket
+package bottlerocket
+
+const (
+	adminContainerInitTemplate = `{{ define "adminContainerInitSettings" -}}
+[settings.host-containers.admin]
+enabled = true
+user-data = "{{.AdminContainerUserData}}"
+{{- end -}}
+`
+	kubernetesInitTemplate = `{{ define "kubernetesInitSettings" -}}
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "{{.PauseContainerSource}}"
+{{- end -}}
+`
+	bootstrapHostContainerTemplate = `{{define "bootstrapHostContainerSettings" -}}
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "{{.BootstrapContainerSource}}"
+user-data = "{{.BootstrapContainerUserData}}"
+{{- end -}}
+`
+	networkInitTemplate = `{{ define "networkInitSettings" -}}
+[settings.network]
+https-proxy = "{{.HTTPSProxyEndpoint}}"
+no-proxy = "{{.NoProxyEndpoints}}"
+{{- end -}}
+`
+	bottlerocketNodeInitSettingsTemplate = `{{template "bootstrapHostContainerSettings" .}}
+
+{{template "adminContainerInitSettings" .}}
+
+{{template "kubernetesInitSettings" .}}
+
+{{- if (ne .HTTPSProxyEndpoint "")}}
+{{template "networkInitSettings" .}}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
new file mode 100644
index 000000000..18e559cc8
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -0,0 +1,176 @@
+package bottlerocket
+
+import (
+	"bytes"
+	"encoding/base64"
+	"fmt"
+	"strings"
+	"text/template"
+
+	"github.com/pkg/errors"
+	corev1 "k8s.io/api/core/v1"
+	"sigs.k8s.io/yaml"
+
+	bootstrapv1 "sigs.k8s.io/cluster-api/api/bootstrap/kubeadm/v1beta2"
+)
+
+const (
+	standardJoinCommand = "kubeadm join --config /tmp/kubeadm-join-config.yaml %s"
+	cloudConfigHeader   = `## template: jinja
+#cloud-config
+`
+)
+
+type BottlerocketConfig struct {
+	Pause                 bootstrapv1.Pause
+	BottlerocketBootstrap bootstrapv1.BottlerocketBootstrap
+	ProxyConfiguration    bootstrapv1.ProxyConfiguration
+}
+
+type BottlerocketSettingsInput struct {
+	BootstrapContainerUserData string
+	AdminContainerUserData     string
+	BootstrapContainerSource   string
+	PauseContainerSource       string
+	HTTPSProxyEndpoint         string
+	NoProxyEndpoints           []string
+}
+
+type HostPath struct {
+	Path string
+	Type string
+}
+
+func generateBootstrapContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind).Funcs(defaultTemplateFuncMap)
+	if _, err := tm.Parse(filesTemplate); err != nil {
+		return nil, errors.Wrap(err, "failed to parse files template")
+	}
+
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+
+	return out.Bytes(), nil
+}
+
+func generateAdminContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind)
+	if _, err := tm.Parse(usersTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse users - %s template", kind)
+	}
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+	return out.Bytes(), nil
+}
+
+func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind)
+	if _, err := tm.Parse(bootstrapHostContainerTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse hostContainer %s template", kind)
+	}
+	if _, err := tm.Parse(adminContainerInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse adminContainer %s template", kind)
+	}
+	if _, err := tm.Parse(kubernetesInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse kubernetes %s template", kind)
+	}
+	if _, err := tm.Parse(networkInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse networks %s template", kind)
+	}
+
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+	return out.Bytes(), nil
+}
+
+// getBottlerocketNodeUserData returns the userdata for the host bottlerocket in toml format
+func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []bootstrapv1.User, config *BottlerocketConfig) ([]byte, error) {
+	// base64 encode the bootstrapContainer's user data
+	b64BootstrapContainerUserData := base64.StdEncoding.EncodeToString(bootstrapContainerUserData)
+
+	// Parse out all the ssh authorized keys
+	sshAuthorizedKeys := getAllAuthorizedKeys(users)
+
+	// generate the userdata for the admin container
+	adminContainerUserData, err := generateAdminContainerUserData("InitAdminContainer", usersTemplate, sshAuthorizedKeys)
+	if err != nil {
+		return nil, err
+	}
+	b64AdminContainerUserData := base64.StdEncoding.EncodeToString(adminContainerUserData)
+
+	bottlerocketInput := &BottlerocketSettingsInput{
+		BootstrapContainerUserData: b64BootstrapContainerUserData,
+		AdminContainerUserData:     b64AdminContainerUserData,
+		BootstrapContainerSource:   fmt.Sprintf("%s:%s", config.BottlerocketBootstrap.ImageRepository, config.BottlerocketBootstrap.ImageTag),
+		PauseContainerSource:       fmt.Sprintf("%s:%s", config.Pause.ImageRepository, config.Pause.ImageTag),
+		HTTPSProxyEndpoint:         config.ProxyConfiguration.HTTPSProxy,
+		NoProxyEndpoints:           config.ProxyConfiguration.NoProxy,
+	}
+
+	bottlerocketNodeUserData, err := generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
+	if err != nil {
+		return nil, err
+	}
+	return bottlerocketNodeUserData, nil
+}
+
+// Parses through all the users and return list of all user's authorized ssh keys
+func getAllAuthorizedKeys(users []bootstrapv1.User) string {
+	var sshAuthorizedKeys []string
+	for _, user := range users {
+		if len(user.SSHAuthorizedKeys) != 0 {
+			for _, key := range user.SSHAuthorizedKeys {
+				quotedKey := "\"" + key + "\""
+				sshAuthorizedKeys = append(sshAuthorizedKeys, quotedKey)
+			}
+		}
+	}
+	return strings.Join(sshAuthorizedKeys, ",")
+}
+
+func patchKubeVipFile(writeFiles []bootstrapv1.File) ([]bootstrapv1.File, error) {
+	var patchedFiles []bootstrapv1.File
+	for _, file := range writeFiles {
+		if file.Path == "/etc/kubernetes/manifests/kube-vip.yaml" {
+			// unmarshal the yaml file from contents
+			pod := &corev1.Pod{}
+			err := yaml.Unmarshal([]byte(file.Content), pod)
+			if err != nil {
+				return nil, errors.Wrap(err, "unmarshalling yaml content from kube-vip")
+			}
+
+			// Patch the spec.Volume mount path
+			f := corev1.HostPathFile
+			pod.Spec.Volumes[0].HostPath.Type = &f
+
+			// Marshall back into yaml and override
+			patchedYaml, err := yaml.Marshal(pod)
+			if err != nil {
+				return nil, errors.Wrap(err, "marshalling patched kube-vip yaml")
+			}
+			file.Content = string(patchedYaml)
+		}
+		patchedFiles = append(patchedFiles, file)
+	}
+	return patchedFiles, nil
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go
new file mode 100644
index 000000000..fbd4a0abe
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go
@@ -0,0 +1,141 @@
+package bottlerocket
+
+import (
+	"testing"
+
+	. "github.com/onsi/gomega"
+
+	bootstrapv1 "sigs.k8s.io/cluster-api/api/bootstrap/kubeadm/v1beta2"
+)
+
+func Test_patchKubeVipFile(t *testing.T) {
+	tests := []struct {
+		name       string
+		writeFiles []bootstrapv1.File
+		want       []bootstrapv1.File
+	}{
+		{
+			name: "one kube-vip file",
+			writeFiles: []bootstrapv1.File{
+				{
+					Path: "/etc/kubernetes/manifests/kube-vip.yaml",
+					Content: `apiVersion: v1
+kind: Pod
+metadata:
+  creationTimestamp: null
+  name: kube-vip
+  namespace: kube-system
+spec:
+  containers:
+  - args:
+    - manager
+    env:
+    - name: vip_arp
+      value: "true"
+    - name: port
+      value: "6443"
+    - name: vip_cidr
+      value: "32"
+    - name: cp_enable
+      value: "true"
+    - name: cp_namespace
+      value: kube-system
+    - name: vip_ddns
+      value: "false"
+    - name: vip_leaderelection
+      value: "true"
+    - name: vip_leaseduration
+      value: "15"
+    - name: vip_renewdeadline
+      value: "10"
+    - name: vip_retryperiod
+      value: "2"
+    - name: address
+      value: 192.168.1.1
+    image: kube-vip:v1.0
+    imagePullPolicy: IfNotPresent
+    name: kube-vip
+    resources: {}
+    securityContext:
+      capabilities:
+        add:
+        - NET_ADMIN
+        - NET_RAW
+    volumeMounts:
+    - mountPath: /etc/kubernetes/admin.conf
+      name: kubeconfig
+  hostNetwork: true
+  volumes:
+  - hostPath:
+      path: /etc/kubernetes/admin.conf
+    name: kubeconfig
+status: {}`,
+				},
+			},
+			want: []bootstrapv1.File{
+				{
+					Path: "/etc/kubernetes/manifests/kube-vip.yaml",
+					Content: `apiVersion: v1
+kind: Pod
+metadata:
+  creationTimestamp: null
+  name: kube-vip
+  namespace: kube-system
+spec:
+  containers:
+  - args:
+    - manager
+    env:
+    - name: vip_arp
+      value: "true"
+    - name: port
+      value: "6443"
+    - name: vip_cidr
+      value: "32"
+    - name: cp_enable
+      value: "true"
+    - name: cp_namespace
+      value: kube-system
+    - name: vip_ddns
+      value: "false"
+    - name: vip_leaderelection
+      value: "true"
+    - name: vip_leaseduration
+      value: "15"
+    - name: vip_renewdeadline
+      value: "10"
+    - name: vip_retryperiod
+      value: "2"
+    - name: address
+      value: 192.168.1.1
+    image: kube-vip:v1.0
+    imagePullPolicy: IfNotPresent
+    name: kube-vip
+    resources: {}
+    securityContext:
+      capabilities:
+        add:
+        - NET_ADMIN
+        - NET_RAW
+    volumeMounts:
+    - mountPath: /etc/kubernetes/admin.conf
+      name: kubeconfig
+  hostNetwork: true
+  volumes:
+  - hostPath:
+      path: /var/lib/kubeadm/admin.conf
+      type: File
+    name: kubeconfig
+status: {}
+`,
+				},
+			},
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			g := NewWithT(t)
+			g.Expect(patchKubeVipFile(tt.writeFiles)).To(BeComparableTo(tt.want))
+		})
+	}
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
new file mode 100644
index 000000000..8f9b6e12e
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
@@ -0,0 +1,47 @@
+// TODO: make bottlerocket(init) more agnostic. In addition to other changes to make things
+// less hacky, also move calling cloudinit from controller and passing it to
+// bottlerocket bootstrap, to all control to bottlerocket bootstrap itself.
+// That way, bottlerocket bootstrap will call cloudinit to generate that userdata
+// which is much more cleaner.
+package bottlerocket
+
+import (
+	"github.com/pkg/errors"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	controlPlaneBootstrapContainerTemplate = `{{.Header}}
+{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+      ---
+{{.ClusterConfiguration | Indent 6}}
+      ---
+{{.InitConfiguration | Indent 6}}
+runcmd: "ControlPlaneInit"
+`
+)
+
+// NewInitControlPlane will take the cloudinit's controlplane input as an argument
+// and generate the bottlerocket toml formatted userdata for the host node, which
+// has the settings for bootstrap container which has its own embedded base64 encoded userdata.
+func NewInitControlPlane(input *cloudinit.ControlPlaneInput, config *BottlerocketConfig) ([]byte, error) {
+	input.Header = cloudConfigHeader
+	input.WriteFiles = input.Certificates.AsFiles()
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+
+	var err error
+	input.WriteFiles, err = patchKubeVipFile(input.WriteFiles)
+	if err != nil {
+		return nil, errors.Wrap(err, "Failed to patch kube-vip manifest file")
+	}
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("InitBootstrapContainer", controlPlaneBootstrapContainerTemplate, input)
+	if err != nil {
+		return nil, err
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users, config)
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
new file mode 100644
index 000000000..b93e1164b
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
@@ -0,0 +1,30 @@
+package bottlerocket
+
+import (
+	"github.com/pkg/errors"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	controlPlaneJoinBottlerocketInit = `{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm-join-config.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+{{.JoinConfiguration | Indent 6}}
+runcmd: "ControlPlaneJoin"
+`
+)
+
+// NewJoinControlPlane returns the user data string to be used on a new control plane instance.
+func NewJoinControlPlane(input *cloudinit.ControlPlaneJoinInput, config *BottlerocketConfig) ([]byte, error) {
+	input.WriteFiles = input.Certificates.AsFiles()
+	input.ControlPlane = true
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("JoinControlplane", controlPlaneJoinBottlerocketInit, input)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to generate user data for machine joining control plane")
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users, config)
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/files.go b/bootstrap/kubeadm/internal/bottlerocket/files.go
new file mode 100644
index 000000000..9be431ba8
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/files.go
@@ -0,0 +1,18 @@
+package bottlerocket
+
+const (
+	filesTemplate = `{{ define "files" -}}
+write_files:{{ range . }}
+-   path: {{.Path}}
+    {{ if ne .Owner "" -}}
+    owner: {{.Owner}}
+    {{ end -}}
+    {{ if ne .Permissions "" -}}
+    permissions: '{{.Permissions}}'
+    {{ end -}}
+    content: |
+{{.Content | Indent 6}}
+{{- end -}}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/node.go b/bootstrap/kubeadm/internal/bottlerocket/node.go
new file mode 100644
index 000000000..df52e59d5
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/node.go
@@ -0,0 +1,32 @@
+package bottlerocket
+
+import (
+	"fmt"
+
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	nodeBottleRocketInit = `{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm-join-config.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+      ---
+{{.JoinConfiguration | Indent 6}}
+runcmd: "WorkerJoin"
+`
+)
+
+// NewNode creates a toml formatted userdata including bootstrap host container settings that has
+// a base64 encoded user data for the bootstrap container
+func NewNode(input *cloudinit.NodeInput, config *BottlerocketConfig) ([]byte, error) {
+	input.KubeadmCommand = fmt.Sprintf(standardJoinCommand, input.KubeadmVerbosity)
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("Node", nodeBottleRocketInit, input)
+	if err != nil {
+		return nil, err
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users, config)
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/users.go b/bootstrap/kubeadm/internal/bottlerocket/users.go
new file mode 100644
index 000000000..e5eedcb9f
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/users.go
@@ -0,0 +1,12 @@
+package bottlerocket
+
+const (
+	usersTemplate = `{{- if . }}
+{
+	"ssh": {
+		"authorized-keys": [{{.}}]
+	}
+}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/utils.go b/bootstrap/kubeadm/internal/bottlerocket/utils.go
new file mode 100644
index 000000000..9118e28c4
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/utils.go
@@ -0,0 +1,18 @@
+package bottlerocket
+
+import (
+	"strings"
+	"text/template"
+)
+
+var (
+	defaultTemplateFuncMap = template.FuncMap{
+		"Indent": templateYAMLIndent,
+	}
+)
+
+func templateYAMLIndent(i int, input string) string {
+	split := strings.Split(input, "\n")
+	ident := "\n" + strings.Repeat(" ", i)
+	return strings.Repeat(" ", i) + strings.Join(split, ident)
+}
diff --git a/bootstrap/kubeadm/internal/cloudinit/cloudinit.go b/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
index c49decd19..ef2a5b4e4 100644
--- a/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
+++ b/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
@@ -57,8 +57,8 @@ type BaseUserData struct {
 }
 
 func (input *BaseUserData) prepare() {
-	input.Header = cloudConfigHeader
 	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	input.Header = cloudConfigHeader
 	input.KubeadmCommand = fmt.Sprintf(standardJoinCommand, input.KubeadmVerbosity)
 	input.SentinelFileCommand = sentinelFileCommand
 }
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index 837e80b93..086ef1e3b 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -45,6 +45,7 @@ import (
 
 	bootstrapv1 "sigs.k8s.io/cluster-api/api/bootstrap/kubeadm/v1beta2"
 	clusterv1 "sigs.k8s.io/cluster-api/api/core/v1beta2"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/bottlerocket"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/ignition"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/locking"
@@ -531,6 +532,45 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 
 	additionalData := r.computeClusterConfigurationAndAdditionalData(scope.Cluster, machine, &scope.Config.Spec.ClusterConfiguration, &scope.Config.Spec.InitConfiguration)
 
+	// Add extra config to cluster config for bottlerocket
+	// Extract bottlerocket config from kubeadm
+	var bottlerocketConfig *bottlerocket.BottlerocketConfig
+	if scope.Config.Spec.Format == bootstrapv1.Bottlerocket {
+		// Add certificates dir
+		if scope.Config.Spec.ClusterConfiguration.CertificatesDir == "" {
+			scope.Config.Spec.ClusterConfiguration.CertificatesDir = "/var/lib/kubeadm/pki"
+		}
+
+		// Add controllerManager extra volumes
+		scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes = []bootstrapv1.HostPathMount{
+			{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/controller-manager.conf",
+				MountPath: "/etc/kubernetes/controller-manager.conf",
+				ReadOnly:  ptr.To(true),
+				PathType:  "File",
+			},
+		}
+
+		// Add scheduler extraVol
+		scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes = []bootstrapv1.HostPathMount{
+			{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/scheduler.conf",
+				MountPath: "/etc/kubernetes/scheduler.conf",
+				ReadOnly:  ptr.To(true),
+				PathType:  "File",
+			},
+		}
+		bottlerocketConfig = &bottlerocket.BottlerocketConfig{
+			Pause:                 scope.Config.Spec.ClusterConfiguration.Pause,
+			BottlerocketBootstrap: scope.Config.Spec.ClusterConfiguration.BottlerocketBootstrap,
+		}
+		if scope.Config.Spec.ClusterConfiguration.Proxy.HTTPSProxy != "" {
+			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.ClusterConfiguration.Proxy
+		}
+	}
+
 	clusterdata, err := kubeadmtypes.MarshalClusterConfigurationForVersion(&scope.Config.Spec.ClusterConfiguration, parsedVersion, additionalData)
 	if err != nil {
 		scope.Error(err, "Failed to marshal cluster configuration")
@@ -643,6 +683,12 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 			ControlPlaneInput: controlPlaneInput,
 			Ignition:          &scope.Config.Spec.Ignition,
 		})
+	case bootstrapv1.Bottlerocket:
+		bootstrapInitData, err = bottlerocket.NewInitControlPlane(controlPlaneInput, bottlerocketConfig)
+		if err != nil {
+			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
+			return ctrl.Result{}, err
+		}
 	default:
 		bootstrapInitData, err = cloudinit.NewInitControlPlane(controlPlaneInput)
 	}
@@ -808,6 +854,19 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 			NodeInput: nodeInput,
 			Ignition:  &scope.Config.Spec.Ignition,
 		})
+	case bootstrapv1.Bottlerocket:
+		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
+			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
+			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+		}
+		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
+			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
+		}
+		bootstrapJoinData, err = bottlerocket.NewNode(nodeInput, bottlerocketConfig)
+		if err != nil {
+			scope.Error(err, "Failed to create a worker bottlerocket join configuration")
+			return ctrl.Result{}, err
+		}
 	default:
 		bootstrapJoinData, err = cloudinit.NewNode(nodeInput)
 	}
@@ -969,6 +1028,19 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 			ControlPlaneJoinInput: controlPlaneJoinInput,
 			Ignition:              &scope.Config.Spec.Ignition,
 		})
+	case bootstrapv1.Bottlerocket:
+		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
+			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
+			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+		}
+		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
+			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
+		}
+		bootstrapJoinData, err = bottlerocket.NewJoinControlPlane(controlPlaneJoinInput, bottlerocketConfig)
+		if err != nil {
+			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
+			return ctrl.Result{}, err
+		}
 	default:
 		bootstrapJoinData, err = cloudinit.NewJoinControlPlane(controlPlaneJoinInput)
 	}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
index ea1aee4b6..8cac4b994 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
@@ -378,6 +378,9 @@ func autoConvert_upstreamv1beta3_ClusterConfiguration_To_v1beta2_ClusterConfigur
 }
 
 func autoConvert_v1beta2_ClusterConfiguration_To_upstreamv1beta3_ClusterConfiguration(in *v1beta2.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_Etcd_To_upstreamv1beta3_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -587,6 +590,9 @@ func autoConvert_upstreamv1beta3_JoinConfiguration_To_v1beta2_JoinConfiguration(
 }
 
 func autoConvert_v1beta2_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(in *v1beta2.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_upstreamv1beta3_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/conversion.go b/bootstrap/kubeadm/types/upstreamv1beta4/conversion.go
index e730dac72..a7a2ac664 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/conversion.go
@@ -519,6 +519,20 @@ func Convert_v1beta2_BootstrapToken_To_upstreamv1beta4_BootstrapToken(in *bootst
 	return nil
 }
 
+func Convert_upstreamv1beta4_Proxy_To_v1beta2_ProxyConfiguration(in *Proxy, out *bootstrapv1.ProxyConfiguration, _ apimachineryconversion.Scope) error {
+	// Following fields do not exist in CABPK v1beta2 version:
+	// - Disabled (Not supported yet)
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = in.NoProxy
+	return nil
+}
+
+func Convert_v1beta2_ProxyConfiguration_To_upstreamv1beta4_Proxy(in *bootstrapv1.ProxyConfiguration, out *Proxy, _ apimachineryconversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = in.NoProxy
+	return nil
+}
+
 func Convert_v1beta2_DNS_To_upstreamv1beta4_DNS(in *bootstrapv1.DNS, out *DNS, _ apimachineryconversion.Scope) error {
 	out.ImageRepository = in.ImageRepository
 	out.ImageTag = in.ImageTag
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/types.go b/bootstrap/kubeadm/types/upstreamv1beta4/types.go
index 903c8c4b2..ca6ef348b 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/types.go
@@ -28,6 +28,21 @@ import (
 type InitConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy Proxy `json:"proxy,omitempty"`
+
 	// `kubeadm init`-only information. These fields are solely used the first time `kubeadm init` runs.
 	// After that, the information in the fields IS NOT uploaded to the `kubeadm-config` ConfigMap
 	// that is used by `kubeadm upgrade` for instance. These fields must be omitempty.
@@ -81,6 +96,15 @@ type InitConfiguration struct {
 // ClusterConfiguration contains cluster-wide configuration for a kubeadm cluster.
 type ClusterConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
 	// Etcd holds configuration for etcd.
 	// +optional
@@ -162,6 +186,46 @@ type ClusterConfiguration struct {
 	CACertificateValidityPeriod *metav1.Duration `json:"caCertificateValidityPeriod,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// imageRepository sets the container registry to pull images from.
+	// if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=512
+	ImageRepository string `json:"imageRepository,omitempty"`
+
+	// imageTag allows to specify a tag for the image.
+	// In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=256
+	ImageTag string `json:"imageTag,omitempty"`
+
+	// TODO: evaluate if we need also a ImageName based on user feedbacks
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// imageRepository sets the container registry to pull images from.
+	// if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=512
+	ImageRepository string `json:"imageRepository,omitempty"`
+
+	// imageTag allows to specify a tag for the image.
+	// In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+	// +optional
+	// +kubebuilder:validation:MinLength=1
+	// +kubebuilder:validation:MaxLength=256
+	ImageTag string `json:"imageTag,omitempty"`
+
+	// TODO: evaluate if we need also a ImageName based on user feedbacks
+}
+
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
 type ControlPlaneComponent struct {
 	// ExtraArgs is an extra set of flags to pass to the control plane component.
@@ -205,6 +269,12 @@ type Proxy struct {
 	// Disabled specifies whether to disable this addon in the cluster
 	// +optional
 	Disabled bool `json:"disabled,omitempty"`
+
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
 }
 
 // ImageMeta allows to customize the image used for components that are not
@@ -388,6 +458,21 @@ type ExternalEtcd struct {
 type JoinConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy Proxy `json:"proxy,omitempty"`
+
 	// DryRun tells if the dry run mode is enabled, don't apply any change if it is and just output what would be done.
 	// +optional
 	DryRun bool `json:"dryRun,omitempty"`
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
index b2f95bf25..44ec72229 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.conversion.go
@@ -78,6 +78,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketBootstrap)(nil), (*v1beta2.BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(a.(*BottlerocketBootstrap), b.(*v1beta2.BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.BottlerocketBootstrap)(nil), (*BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap(a.(*v1beta2.BottlerocketBootstrap), b.(*BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*EnvVar)(nil), (*v1beta2.EnvVar)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta4_EnvVar_To_v1beta2_EnvVar(a.(*EnvVar), b.(*v1beta2.EnvVar), scope)
 	}); err != nil {
@@ -128,6 +138,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*Pause)(nil), (*v1beta2.Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta4_Pause_To_v1beta2_Pause(a.(*Pause), b.(*v1beta2.Pause), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.Pause)(nil), (*Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_Pause_To_upstreamv1beta4_Pause(a.(*v1beta2.Pause), b.(*Pause), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*APIServer)(nil), (*v1beta2.APIServer)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta4_APIServer_To_v1beta2_APIServer(a.(*APIServer), b.(*v1beta2.APIServer), scope)
 	}); err != nil {
@@ -193,6 +213,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*Proxy)(nil), (*v1beta2.ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta4_Proxy_To_v1beta2_ProxyConfiguration(a.(*Proxy), b.(*v1beta2.ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*Timeouts)(nil), (*v1beta2.Timeouts)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta4_Timeouts_To_v1beta2_Timeouts(a.(*Timeouts), b.(*v1beta2.Timeouts), scope)
 	}); err != nil {
@@ -258,6 +283,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta2.ProxyConfiguration)(nil), (*Proxy)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_ProxyConfiguration_To_upstreamv1beta4_Proxy(a.(*v1beta2.ProxyConfiguration), b.(*Proxy), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.Scheduler)(nil), (*ControlPlaneComponent)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_Scheduler_To_upstreamv1beta4_ControlPlaneComponent(a.(*v1beta2.Scheduler), b.(*ControlPlaneComponent), scope)
 	}); err != nil {
@@ -405,8 +435,36 @@ func Convert_v1beta2_BootstrapTokenString_To_upstreamv1beta4_BootstrapTokenStrin
 	return autoConvert_v1beta2_BootstrapTokenString_To_upstreamv1beta4_BootstrapTokenString(in, out, s)
 }
 
+func autoConvert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta2.BottlerocketBootstrap, s conversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+// Convert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap is an autogenerated conversion function.
+func Convert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta2.BottlerocketBootstrap, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in, out, s)
+}
+
+func autoConvert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap(in *v1beta2.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+// Convert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap is an autogenerated conversion function.
+func Convert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap(in *v1beta2.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	return autoConvert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap(in, out, s)
+}
+
 func autoConvert_upstreamv1beta4_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in *ClusterConfiguration, out *v1beta2.ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	if err := Convert_upstreamv1beta4_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta4_Etcd_To_v1beta2_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -425,7 +483,9 @@ func autoConvert_upstreamv1beta4_ClusterConfiguration_To_v1beta2_ClusterConfigur
 	if err := Convert_upstreamv1beta4_DNS_To_v1beta2_DNS(&in.DNS, &out.DNS, s); err != nil {
 		return err
 	}
-	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
+	if err := Convert_upstreamv1beta4_Proxy_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	out.CertificatesDir = in.CertificatesDir
 	out.ImageRepository = in.ImageRepository
 	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
@@ -437,6 +497,15 @@ func autoConvert_upstreamv1beta4_ClusterConfiguration_To_v1beta2_ClusterConfigur
 }
 
 func autoConvert_v1beta2_ClusterConfiguration_To_upstreamv1beta4_ClusterConfiguration(in *v1beta2.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta2_Pause_To_upstreamv1beta4_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_ProxyConfiguration_To_upstreamv1beta4_Proxy(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta2_Etcd_To_upstreamv1beta4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -595,6 +664,9 @@ func Convert_v1beta2_HostPathMount_To_upstreamv1beta4_HostPathMount(in *v1beta2.
 
 func autoConvert_upstreamv1beta4_InitConfiguration_To_v1beta2_InitConfiguration(in *InitConfiguration, out *v1beta2.InitConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	if in.BootstrapTokens != nil {
 		in, out := &in.BootstrapTokens, &out.BootstrapTokens
 		*out = make([]v1beta2.BootstrapToken, len(*in))
@@ -646,6 +718,15 @@ func autoConvert_v1beta2_InitConfiguration_To_upstreamv1beta4_InitConfiguration(
 
 func autoConvert_upstreamv1beta4_JoinConfiguration_To_v1beta2_JoinConfiguration(in *JoinConfiguration, out *v1beta2.JoinConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	if err := Convert_upstreamv1beta4_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta4_Proxy_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	// WARNING: in.DryRun requires manual conversion: does not exist in peer-type
 	if err := Convert_upstreamv1beta4_NodeRegistrationOptions_To_v1beta2_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
@@ -670,6 +751,15 @@ func autoConvert_upstreamv1beta4_JoinConfiguration_To_v1beta2_JoinConfiguration(
 }
 
 func autoConvert_v1beta2_JoinConfiguration_To_upstreamv1beta4_JoinConfiguration(in *v1beta2.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta2_Pause_To_upstreamv1beta4_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_BottlerocketBootstrap_To_upstreamv1beta4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_ProxyConfiguration_To_upstreamv1beta4_Proxy(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_upstreamv1beta4_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -815,6 +905,28 @@ func Convert_v1beta2_Patches_To_upstreamv1beta4_Patches(in *v1beta2.Patches, out
 	return autoConvert_v1beta2_Patches_To_upstreamv1beta4_Patches(in, out, s)
 }
 
+func autoConvert_upstreamv1beta4_Pause_To_v1beta2_Pause(in *Pause, out *v1beta2.Pause, s conversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+// Convert_upstreamv1beta4_Pause_To_v1beta2_Pause is an autogenerated conversion function.
+func Convert_upstreamv1beta4_Pause_To_v1beta2_Pause(in *Pause, out *v1beta2.Pause, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta4_Pause_To_v1beta2_Pause(in, out, s)
+}
+
+func autoConvert_v1beta2_Pause_To_upstreamv1beta4_Pause(in *v1beta2.Pause, out *Pause, s conversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+// Convert_v1beta2_Pause_To_upstreamv1beta4_Pause is an autogenerated conversion function.
+func Convert_v1beta2_Pause_To_upstreamv1beta4_Pause(in *v1beta2.Pause, out *Pause, s conversion.Scope) error {
+	return autoConvert_v1beta2_Pause_To_upstreamv1beta4_Pause(in, out, s)
+}
+
 func autoConvert_upstreamv1beta4_Timeouts_To_v1beta2_Timeouts(in *Timeouts, out *v1beta2.Timeouts, s conversion.Scope) error {
 	// WARNING: in.ControlPlaneComponentHealthCheck requires manual conversion: does not exist in peer-type
 	// WARNING: in.KubeletHealthCheck requires manual conversion: does not exist in peer-type
diff --git a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.deepcopy.go
index c2a9da205..d6903d38c 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta4/zz_generated.deepcopy.go
@@ -151,17 +151,34 @@ func (in *BootstrapTokenString) DeepCopy() *BootstrapTokenString {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootstrap.
+func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootstrap)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	out.Networking = in.Networking
 	in.APIServer.DeepCopyInto(&out.APIServer)
 	in.ControllerManager.DeepCopyInto(&out.ControllerManager)
 	in.Scheduler.DeepCopyInto(&out.Scheduler)
 	out.DNS = in.DNS
-	out.Proxy = in.Proxy
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	if in.FeatureGates != nil {
 		in, out := &in.FeatureGates, &out.FeatureGates
 		*out = make(map[string]bool, len(*in))
@@ -382,6 +399,9 @@ func (in *ImageMeta) DeepCopy() *ImageMeta {
 func (in *InitConfiguration) DeepCopyInto(out *InitConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	if in.BootstrapTokens != nil {
 		in, out := &in.BootstrapTokens, &out.BootstrapTokens
 		*out = make([]BootstrapToken, len(*in))
@@ -430,6 +450,9 @@ func (in *InitConfiguration) DeepCopyObject() runtime.Object {
 func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
@@ -593,9 +616,29 @@ func (in *Patches) DeepCopy() *Patches {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *Pause) DeepCopyInto(out *Pause) {
+	*out = *in
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pause.
+func (in *Pause) DeepCopy() *Pause {
+	if in == nil {
+		return nil
+	}
+	out := new(Pause)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *Proxy) DeepCopyInto(out *Proxy) {
 	*out = *in
+	if in.NoProxy != nil {
+		in, out := &in.NoProxy, &out.NoProxy
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Proxy.
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index 1f43319a0..2a2d18460 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -597,6 +597,7 @@ spec:
                       data
                     enum:
                     - cloud-config
+                    - bottlerocket
                     type: string
                   initConfiguration:
                     description: initConfiguration along with ClusterConfiguration
@@ -1339,6 +1340,22 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
@@ -1546,6 +1563,37 @@ spec:
                               to "10.96.0.0/12" if that's unset.
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       scheduler:
                         description: scheduler contains extra settings for the scheduler
                           control plane component
@@ -1734,6 +1782,7 @@ spec:
                       data
                     enum:
                     - cloud-config
+                    - bottlerocket
                     type: string
                   initConfiguration:
                     description: initConfiguration along with ClusterConfiguration
@@ -1901,6 +1950,22 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           caCertPath is the path to the SSL certificate authority used to
@@ -2067,6 +2132,37 @@ spec:
                               type: object
                             type: array
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                     type: object
                   mounts:
                     description: mounts specifies a list of mount points to be setup.
@@ -2722,6 +2818,26 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
@@ -3237,6 +3353,41 @@ spec:
                             minLength: 1
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       scheduler:
                         description: scheduler contains extra settings for the scheduler
                           control plane component
@@ -3594,6 +3745,7 @@ spec:
                     enum:
                     - cloud-config
                     - ignition
+                    - bottlerocket
                     type: string
                   ignition:
                     description: ignition contains Ignition specific configuration.
@@ -3851,6 +4003,26 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           caCertPath is the path to the SSL certificate authority used to
@@ -4233,6 +4405,41 @@ spec:
                             minLength: 1
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       skipPhases:
                         description: |-
                           skipPhases is a list of phases to skip during command execution.
@@ -5279,6 +5486,26 @@ spec:
                             type: array
                             x-kubernetes-list-type: atomic
                         type: object
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
                       caCertificateValidityPeriodDays:
                         description: |-
                           caCertificateValidityPeriodDays specifies the validity period for CA certificates generated by Cluster API.
@@ -5833,6 +6060,41 @@ spec:
                         maxLength: 512
                         minLength: 1
                         type: string
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       scheduler:
                         description: scheduler contains extra settings for the scheduler
                           control plane component
@@ -6229,6 +6491,7 @@ spec:
                     enum:
                     - cloud-config
                     - ignition
+                    - bottlerocket
                     type: string
                   ignition:
                     description: ignition contains Ignition specific configuration.
@@ -6565,6 +6828,26 @@ spec:
                       the join command
                     minProperties: 1
                     properties:
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           caCertPath is the path to the SSL certificate authority used to
@@ -6977,6 +7260,41 @@ spec:
                             minLength: 1
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              imageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            maxLength: 512
+                            minLength: 1
+                            type: string
+                          imageTag:
+                            description: |-
+                              imageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            maxLength: 256
+                            minLength: 1
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       skipPhases:
                         description: |-
                           skipPhases is a list of phases to skip during command execution.
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index badeef330..9d5b83610 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -128,6 +128,22 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
@@ -339,6 +355,37 @@ spec:
                                       to "10.96.0.0/12" if that's unset.
                                     type: string
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               scheduler:
                                 description: scheduler contains extra settings for
                                   the scheduler control plane component
@@ -534,6 +581,7 @@ spec:
                               bootstrap data
                             enum:
                             - cloud-config
+                            - bottlerocket
                             type: string
                           initConfiguration:
                             description: initConfiguration along with ClusterConfiguration
@@ -701,6 +749,22 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               caCertPath:
                                 description: |-
                                   caCertPath is the path to the SSL certificate authority used to
@@ -869,6 +933,37 @@ spec:
                                       type: object
                                     type: array
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                             type: object
                           mounts:
                             description: mounts specifies a list of mount points to
@@ -1414,6 +1509,26 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
@@ -1944,6 +2059,41 @@ spec:
                                     minLength: 1
                                     type: string
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               scheduler:
                                 description: scheduler contains extra settings for
                                   the scheduler control plane component
@@ -2313,6 +2463,7 @@ spec:
                             enum:
                             - cloud-config
                             - ignition
+                            - bottlerocket
                             type: string
                           ignition:
                             description: ignition contains Ignition specific configuration.
@@ -2572,6 +2723,26 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
                               caCertPath:
                                 description: |-
                                   caCertPath is the path to the SSL certificate authority used to
@@ -2959,6 +3130,41 @@ spec:
                                     minLength: 1
                                     type: string
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               skipPhases:
                                 description: |-
                                   skipPhases is a list of phases to skip during command execution.
@@ -3653,6 +3859,26 @@ spec:
                                     type: array
                                     x-kubernetes-list-type: atomic
                                 type: object
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
                               caCertificateValidityPeriodDays:
                                 description: |-
                                   caCertificateValidityPeriodDays specifies the validity period for CA certificates generated by Cluster API.
@@ -4226,6 +4452,41 @@ spec:
                                 maxLength: 512
                                 minLength: 1
                                 type: string
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               scheduler:
                                 description: scheduler contains extra settings for
                                   the scheduler control plane component
@@ -4635,6 +4896,7 @@ spec:
                             enum:
                             - cloud-config
                             - ignition
+                            - bottlerocket
                             type: string
                           ignition:
                             description: ignition contains Ignition specific configuration.
@@ -4974,6 +5236,26 @@ spec:
                               for the join command
                             minProperties: 1
                             properties:
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
                               caCertPath:
                                 description: |-
                                   caCertPath is the path to the SSL certificate authority used to
@@ -5392,6 +5674,41 @@ spec:
                                     minLength: 1
                                     type: string
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      imageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    maxLength: 512
+                                    minLength: 1
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      imageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    maxLength: 256
+                                    minLength: 1
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               skipPhases:
                                 description: |-
                                   skipPhases is a list of phases to skip during command execution.
diff --git a/internal/api/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go b/internal/api/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go
index 6f5293562..a43300a20 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go
@@ -23,12 +23,15 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config
+// +kubebuilder:validation:Enum=cloud-config;bottlerocket
 type Format string
 
 const (
 	// CloudConfig make the bootstrap data to be of cloud-config format.
 	CloudConfig Format = "cloud-config"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 // KubeadmConfigSpec defines the desired state of KubeadmConfig.
diff --git a/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go b/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go
index 77b59e6b8..a075d2ca4 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha3/zz_generated.conversion.go
@@ -540,6 +540,9 @@ func autoConvert_v1alpha3_ClusterConfiguration_To_v1beta2_ClusterConfiguration(i
 }
 
 func autoConvert_v1beta2_ClusterConfiguration_To_v1alpha3_ClusterConfiguration(in *v1beta2.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_Etcd_To_v1alpha3_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -884,6 +887,9 @@ func autoConvert_v1alpha3_JoinConfiguration_To_v1beta2_JoinConfiguration(in *Joi
 }
 
 func autoConvert_v1beta2_JoinConfiguration_To_v1alpha3_JoinConfiguration(in *v1beta2.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	// WARNING: in.Pause requires manual conversion: does not exist in peer-type
+	// WARNING: in.BottlerocketBootstrap requires manual conversion: does not exist in peer-type
+	// WARNING: in.Proxy requires manual conversion: does not exist in peer-type
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1alpha3_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/conversion.go b/internal/api/bootstrap/kubeadm/v1alpha4/conversion.go
index 54a1ef93f..944a538ab 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/conversion.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/conversion.go
@@ -697,6 +697,30 @@ func Convert_v1beta2_File_To_v1alpha4_File(in *bootstrapv1.File, out *File, s ap
 	return nil
 }
 
+func Convert_v1alpha4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *bootstrapv1.BottlerocketBootstrap, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+func Convert_v1beta2_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in *bootstrapv1.BottlerocketBootstrap, out *BottlerocketBootstrap, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+func Convert_v1alpha4_Pause_To_v1beta2_Pause(in *Pause, out *bootstrapv1.Pause, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
+func Convert_v1beta2_Pause_To_v1alpha4_Pause(in *bootstrapv1.Pause, out *Pause, _ apimachineryconversion.Scope) error {
+	out.ImageRepository = in.ImageRepository
+	out.ImageTag = in.ImageTag
+	return nil
+}
+
 func dropEmptyStringsKubeadmConfigSpec(dst *KubeadmConfigSpec) {
 	for i, u := range dst.Users {
 		dropEmptyString(&u.Gecos)
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index f17a3b6d4..a147649f1 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -61,6 +61,21 @@ type InitConfiguration struct {
 type ClusterConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -128,6 +143,29 @@ type ClusterConfiguration struct {
 	ClusterName string `json:"clusterName,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// ImageMeta allows to customize the image used for the Pause component
+	ImageMeta `json:",inline"`
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// ImageMeta allows to customize the image used for the BottlerocketBootstrap component
+	ImageMeta `json:",inline"`
+}
+
+// ProxyConfiguration holds the settings for proxying bottlerocket services
+type ProxyConfiguration struct {
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
+}
+
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
 type ControlPlaneComponent struct {
 	// extraArgs is an extra set of flags to pass to the control plane component.
@@ -322,6 +360,21 @@ type ExternalEtcd struct {
 type JoinConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// nodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go
index 652e45d54..99c79b677 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go
@@ -23,12 +23,15 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config
+// +kubebuilder:validation:Enum=cloud-config;bottlerocket
 type Format string
 
 const (
 	// CloudConfig make the bootstrap data to be of cloud-config format.
 	CloudConfig Format = "cloud-config"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 // KubeadmConfigSpec defines the desired state of KubeadmConfig.
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index 314c9b9e7..c64093b7c 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -209,6 +209,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*ProxyConfiguration)(nil), (*v1beta2.ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration(a.(*ProxyConfiguration), b.(*v1beta2.ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta2.ProxyConfiguration)(nil), (*ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(a.(*v1beta2.ProxyConfiguration), b.(*ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*SecretFileSource)(nil), (*v1beta2.SecretFileSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_SecretFileSource_To_v1beta2_SecretFileSource(a.(*SecretFileSource), b.(*v1beta2.SecretFileSource), scope)
 	}); err != nil {
@@ -239,6 +249,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*BottlerocketBootstrap)(nil), (*v1beta2.BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(a.(*BottlerocketBootstrap), b.(*v1beta2.BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*ClusterConfiguration)(nil), (*v1beta2.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_ClusterConfiguration_To_v1beta2_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta2.ClusterConfiguration), scope)
 	}); err != nil {
@@ -309,6 +324,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*Pause)(nil), (*v1beta2.Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_Pause_To_v1beta2_Pause(a.(*Pause), b.(*v1beta2.Pause), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.APIServer)(nil), (*APIServer)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_APIServer_To_v1alpha4_APIServer(a.(*v1beta2.APIServer), b.(*APIServer), scope)
 	}); err != nil {
@@ -319,6 +339,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta2.BottlerocketBootstrap)(nil), (*BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(a.(*v1beta2.BottlerocketBootstrap), b.(*BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(a.(*v1beta2.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -389,6 +414,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta2.Pause)(nil), (*Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta2_Pause_To_v1alpha4_Pause(a.(*v1beta2.Pause), b.(*Pause), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta2.Scheduler)(nil), (*ControlPlaneComponent)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta2_Scheduler_To_v1alpha4_ControlPlaneComponent(a.(*v1beta2.Scheduler), b.(*ControlPlaneComponent), scope)
 	}); err != nil {
@@ -511,8 +541,28 @@ func Convert_v1beta2_BootstrapTokenString_To_v1alpha4_BootstrapTokenString(in *v
 	return autoConvert_v1beta2_BootstrapTokenString_To_v1alpha4_BootstrapTokenString(in, out, s)
 }
 
+func autoConvert_v1alpha4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta2.BottlerocketBootstrap, s conversion.Scope) error {
+	// WARNING: in.ImageMeta requires manual conversion: does not exist in peer-type
+	return nil
+}
+
+func autoConvert_v1beta2_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in *v1beta2.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	// WARNING: in.ImageRepository requires manual conversion: does not exist in peer-type
+	// WARNING: in.ImageTag requires manual conversion: does not exist in peer-type
+	return nil
+}
+
 func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta2_ClusterConfiguration(in *ClusterConfiguration, out *v1beta2.ClusterConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	if err := Convert_v1alpha4_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1alpha4_Etcd_To_v1beta2_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -539,6 +589,15 @@ func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta2_ClusterConfiguration(i
 }
 
 func autoConvert_v1beta2_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in *v1beta2.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta2_Pause_To_v1alpha4_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta2_Etcd_To_v1alpha4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -870,6 +929,15 @@ func autoConvert_v1beta2_InitConfiguration_To_v1alpha4_InitConfiguration(in *v1b
 
 func autoConvert_v1alpha4_JoinConfiguration_To_v1beta2_JoinConfiguration(in *JoinConfiguration, out *v1beta2.JoinConfiguration, s conversion.Scope) error {
 	// WARNING: in.TypeMeta requires manual conversion: does not exist in peer-type
+	if err := Convert_v1alpha4_Pause_To_v1beta2_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_BottlerocketBootstrap_To_v1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1alpha4_NodeRegistrationOptions_To_v1beta2_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -882,6 +950,15 @@ func autoConvert_v1alpha4_JoinConfiguration_To_v1beta2_JoinConfiguration(in *Joi
 }
 
 func autoConvert_v1beta2_JoinConfiguration_To_v1alpha4_JoinConfiguration(in *v1beta2.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta2_Pause_To_v1alpha4_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta2_NodeRegistrationOptions_To_v1alpha4_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -1320,6 +1397,39 @@ func Convert_v1beta2_Partition_To_v1alpha4_Partition(in *v1beta2.Partition, out
 	return autoConvert_v1beta2_Partition_To_v1alpha4_Partition(in, out, s)
 }
 
+func autoConvert_v1alpha4_Pause_To_v1beta2_Pause(in *Pause, out *v1beta2.Pause, s conversion.Scope) error {
+	// WARNING: in.ImageMeta requires manual conversion: does not exist in peer-type
+	return nil
+}
+
+func autoConvert_v1beta2_Pause_To_v1alpha4_Pause(in *v1beta2.Pause, out *Pause, s conversion.Scope) error {
+	// WARNING: in.ImageRepository requires manual conversion: does not exist in peer-type
+	// WARNING: in.ImageTag requires manual conversion: does not exist in peer-type
+	return nil
+}
+
+func autoConvert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration(in *ProxyConfiguration, out *v1beta2.ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration(in *ProxyConfiguration, out *v1beta2.ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1alpha4_ProxyConfiguration_To_v1beta2_ProxyConfiguration(in, out, s)
+}
+
+func autoConvert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(in *v1beta2.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(in *v1beta2.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1beta2_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(in, out, s)
+}
+
 func autoConvert_v1alpha4_SecretFileSource_To_v1beta2_SecretFileSource(in *SecretFileSource, out *v1beta2.SecretFileSource, s conversion.Scope) error {
 	out.Name = in.Name
 	out.Key = in.Key
diff --git a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index 0e4b93369..b6a144dbe 100644
--- a/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/api/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -142,10 +142,29 @@ func (in *BootstrapTokenString) DeepCopy() *BootstrapTokenString {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootstrap.
+func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootstrap)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	out.Networking = in.Networking
 	in.APIServer.DeepCopyInto(&out.APIServer)
@@ -479,6 +498,9 @@ func (in *InitConfiguration) DeepCopyObject() runtime.Object {
 func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
@@ -929,6 +951,42 @@ func (in *Partition) DeepCopy() *Partition {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *Pause) DeepCopyInto(out *Pause) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pause.
+func (in *Pause) DeepCopy() *Pause {
+	if in == nil {
+		return nil
+	}
+	out := new(Pause)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ProxyConfiguration) DeepCopyInto(out *ProxyConfiguration) {
+	*out = *in
+	if in.NoProxy != nil {
+		in, out := &in.NoProxy, &out.NoProxy
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfiguration.
+func (in *ProxyConfiguration) DeepCopy() *ProxyConfiguration {
+	if in == nil {
+		return nil
+	}
+	out := new(ProxyConfiguration)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *SecretFileSource) DeepCopyInto(out *SecretFileSource) {
 	*out = *in
-- 
2.50.1 (Apple Git-155)

