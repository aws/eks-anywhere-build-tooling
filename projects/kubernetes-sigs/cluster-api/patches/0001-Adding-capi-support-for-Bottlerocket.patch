From 3a32c410dd36592e9fa8d6f3620559d7c0eaae67 Mon Sep 17 00:00:00 2001
From: Vignesh Goutham Ganesh <vgg@amazon.com>
Date: Fri, 11 Jun 2021 10:43:09 -0700
Subject: [PATCH 01/40] Adding capi support for Bottlerocket

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>

Templating bottlerocket init data formats

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>

Generating proper vip destnation path for bottlerocket among other cluster config patches

Signed-off-by: Vignesh Goutham Ganesh <vgg@amazon.com>

Fix kube-vip config patching by creating new Files array

Adding pause and bottlerocket bootstrap Cluster configuration to kubeadm v1beta1 api

Add bottlerocket API changes to v1beta1 types

Set bottlerocket bootstrap container and pause container source in user data

Add proxy config fields to v1beta1 api

Support proxy configuration for bottlerocket

Add network settings only when there is a proxy defined

Remove userdata logging for bottlerocket
---
 .gitignore                                    |   2 +-
 .../kubeadm/api/v1beta1/kubeadm_types.go      |  53 +++++
 .../api/v1beta1/kubeadmconfig_types.go        |   5 +-
 .../api/v1beta1/zz_generated.deepcopy.go      |  58 ++++++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 185 +++++++++++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 189 ++++++++++++++++++
 .../internal/bottlerocket/bootstrap.go        |  45 +++++
 .../internal/bottlerocket/bottlerocket.go     | 176 ++++++++++++++++
 .../bottlerocket/bottlerocket_test.go         | 141 +++++++++++++
 .../bottlerocket/controlplane_init.go         |  47 +++++
 .../bottlerocket/controlplane_join.go         |  30 +++
 .../kubeadm/internal/bottlerocket/files.go    |  18 ++
 .../kubeadm/internal/bottlerocket/node.go     |  32 +++
 .../kubeadm/internal/bottlerocket/users.go    |  12 ++
 .../kubeadm/internal/bottlerocket/utils.go    |  18 ++
 .../kubeadm/internal/cloudinit/cloudinit.go   |   2 +-
 .../controllers/kubeadmconfig_controller.go   |  73 +++++++
 .../kubeadm/types/upstreamv1beta1/types.go    |  53 +++++
 .../zz_generated.conversion.go                | 136 +++++++++++++
 .../upstreamv1beta1/zz_generated.deepcopy.go  |  58 ++++++
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 189 ++++++++++++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml |  95 +++++++++
 .../kubeadm/v1alpha3/kubeadmconfig_types.go   |   5 +-
 .../kubeadm/v1alpha4/kubeadm_types.go         |  53 +++++
 .../kubeadm/v1alpha4/kubeadmconfig_types.go   |   5 +-
 .../v1alpha4/zz_generated.conversion.go       | 136 +++++++++++++
 26 files changed, 1811 insertions(+), 5 deletions(-)
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/files.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/node.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/users.go
 create mode 100644 bootstrap/kubeadm/internal/bottlerocket/utils.go

diff --git a/.gitignore b/.gitignore
index c97ad3d3b..88502ad43 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,7 +9,7 @@ hack/tools/bin
 
 # Test binary, build with `go test -c`
 *.test
-
+patches
 # E2E test templates
 test/e2e/data/infrastructure-docker/**/cluster-template*.yaml
 !test/e2e/data/infrastructure-docker/**/clusterclass-quick-start.yaml
diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
index 97f7dafca..6d1c8f0c5 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
@@ -77,6 +77,21 @@ type InitConfiguration struct {
 type ClusterConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -161,6 +176,29 @@ type ClusterConfiguration struct {
 	ClusterName string `json:"clusterName,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// ImageMeta allows to customize the image used for the Pause component
+	ImageMeta `json:",inline"`
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// ImageMeta allows to customize the image used for the BottlerocketBootstrap component
+	ImageMeta `json:",inline"`
+}
+
+// ProxyConfiguration holds the settings for proxying bottlerocket services
+type ProxyConfiguration struct {
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
+}
+
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
 type ControlPlaneComponent struct {
 	// extraArgs is an extra set of flags to pass to the control plane component.
@@ -508,6 +546,21 @@ type ExternalEtcd struct {
 type JoinConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// nodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadmconfig_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadmconfig_types.go
index b52ffdcd5..8ce3c8b1f 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadmconfig_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadmconfig_types.go
@@ -27,7 +27,7 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config;ignition
+// +kubebuilder:validation:Enum=cloud-config;ignition;bottlerocket
 type Format string
 
 const (
@@ -36,6 +36,9 @@ const (
 
 	// Ignition make the bootstrap data to be of Ignition format.
 	Ignition Format = "ignition"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 var (
diff --git a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
index e1bdbac23..d92225a54 100644
--- a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
@@ -142,10 +142,29 @@ func (in *BootstrapTokenString) DeepCopy() *BootstrapTokenString {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootstrap.
+func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootstrap)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	out.Networking = in.Networking
 	in.APIServer.DeepCopyInto(&out.APIServer)
@@ -604,6 +623,9 @@ func (in *InitConfiguration) DeepCopyObject() runtime.Object {
 func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
@@ -1252,6 +1274,42 @@ func (in *Patches) DeepCopy() *Patches {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *Pause) DeepCopyInto(out *Pause) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pause.
+func (in *Pause) DeepCopy() *Pause {
+	if in == nil {
+		return nil
+	}
+	out := new(Pause)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ProxyConfiguration) DeepCopyInto(out *ProxyConfiguration) {
+	*out = *in
+	if in.NoProxy != nil {
+		in, out := &in.NoProxy, &out.NoProxy
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfiguration.
+func (in *ProxyConfiguration) DeepCopy() *ProxyConfiguration {
+	if in == nil {
+		return nil
+	}
+	out := new(ProxyConfiguration)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *SecretFileSource) DeepCopyInto(out *SecretFileSource) {
 	*out = *in
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index ab4a665a5..4f3a27c02 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -109,6 +109,22 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       CertificatesDir specifies where to store or look for all required certificates.
@@ -317,6 +333,36 @@ spec:
                           to "10.96.0.0/12" if that's unset.
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   scheduler:
                     description: Scheduler contains extra settings for the scheduler
                       control plane component
@@ -668,6 +714,22 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       CACertPath is the path to the SSL certificate authority used to
@@ -831,6 +893,36 @@ spec:
                           type: object
                         type: array
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                 type: object
               mounts:
                 description: mounts specifies a list of mount points to be setup.
@@ -2248,6 +2340,22 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
@@ -2757,6 +2865,36 @@ spec:
                         minLength: 1
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   scheduler:
                     description: scheduler contains extra settings for the scheduler
                       control plane component
@@ -3108,6 +3246,7 @@ spec:
                 enum:
                 - cloud-config
                 - ignition
+                - bottlerocket
                 type: string
               ignition:
                 description: ignition contains Ignition specific configuration.
@@ -3341,6 +3480,36 @@ spec:
                         minLength: 1
                         type: string
                     type: object
+                  pause:
+                    description: |-
+                      Pause holds the image source for pause container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
+                  proxy:
+                    description: |-
+                      Proxy holds the https and no proxy information
+                      This is only for bottlerocket
+                    properties:
+                      httpsProxy:
+                        description: HTTPS proxy
+                        type: string
+                      noProxy:
+                        description: No proxy, list of ips that should not use proxy
+                        items:
+                          type: string
+                        type: array
+                    type: object
                   skipPhases:
                     description: |-
                       skipPhases is a list of phases to skip during command execution.
@@ -3364,6 +3533,22 @@ spec:
                       may reject unrecognized values.
                       More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                     type: string
+                  bottlerocketBootstrap:
+                    description: |-
+                      BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       caCertPath is the path to the SSL certificate authority used to
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 06caff1ed..b028faac2 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -117,6 +117,22 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               CertificatesDir specifies where to store or look for all required certificates.
@@ -329,6 +345,37 @@ spec:
                                   to "10.96.0.0/12" if that's unset.
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           scheduler:
                             description: Scheduler contains extra settings for the
                               scheduler control plane component
@@ -688,6 +735,22 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               CACertPath is the path to the SSL certificate authority used to
@@ -853,6 +916,37 @@ spec:
                                   type: object
                                 type: array
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                         type: object
                       mounts:
                         description: mounts specifies a list of mount points to be
@@ -2201,6 +2295,22 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
@@ -2723,6 +2833,37 @@ spec:
                                 minLength: 1
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           scheduler:
                             description: scheduler contains extra settings for the
                               scheduler control plane component
@@ -3086,6 +3227,7 @@ spec:
                         enum:
                         - cloud-config
                         - ignition
+                        - bottlerocket
                         type: string
                       ignition:
                         description: ignition contains Ignition specific configuration.
@@ -3322,6 +3464,37 @@ spec:
                                 minLength: 1
                                 type: string
                             type: object
+                          pause:
+                            description: |-
+                              Pause holds the image source for pause container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
+                          proxy:
+                            description: |-
+                              Proxy holds the https and no proxy information
+                              This is only for bottlerocket
+                            properties:
+                              httpsProxy:
+                                description: HTTPS proxy
+                                type: string
+                              noProxy:
+                                description: No proxy, list of ips that should not
+                                  use proxy
+                                items:
+                                  type: string
+                                type: array
+                            type: object
                           skipPhases:
                             description: |-
                               skipPhases is a list of phases to skip during command execution.
@@ -3345,6 +3518,22 @@ spec:
                               may reject unrecognized values.
                               More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                             type: string
+                          bottlerocketBootstrap:
+                            description: |-
+                              BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               caCertPath is the path to the SSL certificate authority used to
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
new file mode 100644
index 000000000..e4be8d945
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -0,0 +1,45 @@
+// This file defines the core bootstrap templates required
+// to bootstrap Bottlerocket
+package bottlerocket
+
+const (
+	adminContainerInitTemplate = `{{ define "adminContainerInitSettings" -}}
+[settings.host-containers.admin]
+enabled = true
+user-data = "{{.AdminContainerUserData}}"
+{{- end -}}
+`
+	kubernetesInitTemplate = `{{ define "kubernetesInitSettings" -}}
+[settings.kubernetes]
+cluster-domain = "cluster.local"
+standalone-mode = true
+authentication-mode = "tls"
+server-tls-bootstrap = false
+pod-infra-container-image = "{{.PauseContainerSource}}"
+{{- end -}}
+`
+	bootstrapHostContainerTemplate = `{{define "bootstrapHostContainerSettings" -}}
+[settings.host-containers.kubeadm-bootstrap]
+enabled = true
+superpowered = true
+source = "{{.BootstrapContainerSource}}"
+user-data = "{{.BootstrapContainerUserData}}"
+{{- end -}}
+`
+	networkInitTemplate = `{{ define "networkInitSettings" -}}
+[settings.network]
+https-proxy = "{{.HTTPSProxyEndpoint}}"
+no-proxy = "{{.NoProxyEndpoints}}"
+{{- end -}}
+`
+	bottlerocketNodeInitSettingsTemplate = `{{template "bootstrapHostContainerSettings" .}}
+
+{{template "adminContainerInitSettings" .}}
+
+{{template "kubernetesInitSettings" .}}
+
+{{- if (ne .HTTPSProxyEndpoint "")}}
+{{template "networkInitSettings" .}}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
new file mode 100644
index 000000000..b6eec374f
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -0,0 +1,176 @@
+package bottlerocket
+
+import (
+	"bytes"
+	"encoding/base64"
+	"fmt"
+	"strings"
+	"text/template"
+
+	"github.com/pkg/errors"
+	corev1 "k8s.io/api/core/v1"
+	"sigs.k8s.io/yaml"
+
+	bootstrapv1 "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+)
+
+const (
+	standardJoinCommand = "kubeadm join --config /tmp/kubeadm-join-config.yaml %s"
+	cloudConfigHeader   = `## template: jinja
+#cloud-config
+`
+)
+
+type BottlerocketConfig struct {
+	Pause                 bootstrapv1.Pause
+	BottlerocketBootstrap bootstrapv1.BottlerocketBootstrap
+	ProxyConfiguration    bootstrapv1.ProxyConfiguration
+}
+
+type BottlerocketSettingsInput struct {
+	BootstrapContainerUserData string
+	AdminContainerUserData     string
+	BootstrapContainerSource   string
+	PauseContainerSource       string
+	HTTPSProxyEndpoint         string
+	NoProxyEndpoints           []string
+}
+
+type HostPath struct {
+	Path string
+	Type string
+}
+
+func generateBootstrapContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind).Funcs(defaultTemplateFuncMap)
+	if _, err := tm.Parse(filesTemplate); err != nil {
+		return nil, errors.Wrap(err, "failed to parse files template")
+	}
+
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+
+	return out.Bytes(), nil
+}
+
+func generateAdminContainerUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind)
+	if _, err := tm.Parse(usersTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse users - %s template", kind)
+	}
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+	return out.Bytes(), nil
+}
+
+func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, error) {
+	tm := template.New(kind)
+	if _, err := tm.Parse(bootstrapHostContainerTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse hostContainer %s template", kind)
+	}
+	if _, err := tm.Parse(adminContainerInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse adminContainer %s template", kind)
+	}
+	if _, err := tm.Parse(kubernetesInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse kubernetes %s template", kind)
+	}
+	if _, err := tm.Parse(networkInitTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse networks %s template", kind)
+	}
+
+	t, err := tm.Parse(tpl)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to parse %s template", kind)
+	}
+
+	var out bytes.Buffer
+	if err := t.Execute(&out, data); err != nil {
+		return nil, errors.Wrapf(err, "failed to generate %s template", kind)
+	}
+	return out.Bytes(), nil
+}
+
+// getBottlerocketNodeUserData returns the userdata for the host bottlerocket in toml format
+func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []bootstrapv1.User, config *BottlerocketConfig) ([]byte, error) {
+	// base64 encode the bootstrapContainer's user data
+	b64BootstrapContainerUserData := base64.StdEncoding.EncodeToString(bootstrapContainerUserData)
+
+	// Parse out all the ssh authorized keys
+	sshAuthorizedKeys := getAllAuthorizedKeys(users)
+
+	// generate the userdata for the admin container
+	adminContainerUserData, err := generateAdminContainerUserData("InitAdminContainer", usersTemplate, sshAuthorizedKeys)
+	if err != nil {
+		return nil, err
+	}
+	b64AdminContainerUserData := base64.StdEncoding.EncodeToString(adminContainerUserData)
+
+	bottlerocketInput := &BottlerocketSettingsInput{
+		BootstrapContainerUserData: b64BootstrapContainerUserData,
+		AdminContainerUserData:     b64AdminContainerUserData,
+		BootstrapContainerSource:   fmt.Sprintf("%s:%s", config.BottlerocketBootstrap.ImageRepository, config.BottlerocketBootstrap.ImageTag),
+		PauseContainerSource:       fmt.Sprintf("%s:%s", config.Pause.ImageRepository, config.Pause.ImageTag),
+		HTTPSProxyEndpoint:         config.ProxyConfiguration.HTTPSProxy,
+		NoProxyEndpoints:           config.ProxyConfiguration.NoProxy,
+	}
+
+	bottlerocketNodeUserData, err := generateNodeUserData("InitBottlerocketNode", bottlerocketNodeInitSettingsTemplate, bottlerocketInput)
+	if err != nil {
+		return nil, err
+	}
+	return bottlerocketNodeUserData, nil
+}
+
+// Parses through all the users and return list of all user's authorized ssh keys
+func getAllAuthorizedKeys(users []bootstrapv1.User) string {
+	var sshAuthorizedKeys []string
+	for _, user := range users {
+		if len(user.SSHAuthorizedKeys) != 0 {
+			for _, key := range user.SSHAuthorizedKeys {
+				quotedKey := "\"" + key + "\""
+				sshAuthorizedKeys = append(sshAuthorizedKeys, quotedKey)
+			}
+		}
+	}
+	return strings.Join(sshAuthorizedKeys, ",")
+}
+
+func patchKubeVipFile(writeFiles []bootstrapv1.File) ([]bootstrapv1.File, error) {
+	var patchedFiles []bootstrapv1.File
+	for _, file := range writeFiles {
+		if file.Path == "/etc/kubernetes/manifests/kube-vip.yaml" {
+			// unmarshal the yaml file from contents
+			pod := &corev1.Pod{}
+			err := yaml.Unmarshal([]byte(file.Content), pod)
+			if err != nil {
+				return nil, errors.Wrap(err, "unmarshalling yaml content from kube-vip")
+			}
+
+			// Patch the spec.Volume mount path
+			f := corev1.HostPathFile
+			pod.Spec.Volumes[0].HostPath.Type = &f
+
+			// Marshall back into yaml and override
+			patchedYaml, err := yaml.Marshal(pod)
+			if err != nil {
+				return nil, errors.Wrap(err, "marshalling patched kube-vip yaml")
+			}
+			file.Content = string(patchedYaml)
+		}
+		patchedFiles = append(patchedFiles, file)
+	}
+	return patchedFiles, nil
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go
new file mode 100644
index 000000000..71768969b
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket_test.go
@@ -0,0 +1,141 @@
+package bottlerocket
+
+import (
+	"testing"
+
+	. "github.com/onsi/gomega"
+
+	bootstrapv1 "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+)
+
+func Test_patchKubeVipFile(t *testing.T) {
+	tests := []struct {
+		name       string
+		writeFiles []bootstrapv1.File
+		want       []bootstrapv1.File
+	}{
+		{
+			name: "one kube-vip file",
+			writeFiles: []bootstrapv1.File{
+				{
+					Path: "/etc/kubernetes/manifests/kube-vip.yaml",
+					Content: `apiVersion: v1
+kind: Pod
+metadata:
+  creationTimestamp: null
+  name: kube-vip
+  namespace: kube-system
+spec:
+  containers:
+  - args:
+    - manager
+    env:
+    - name: vip_arp
+      value: "true"
+    - name: port
+      value: "6443"
+    - name: vip_cidr
+      value: "32"
+    - name: cp_enable
+      value: "true"
+    - name: cp_namespace
+      value: kube-system
+    - name: vip_ddns
+      value: "false"
+    - name: vip_leaderelection
+      value: "true"
+    - name: vip_leaseduration
+      value: "15"
+    - name: vip_renewdeadline
+      value: "10"
+    - name: vip_retryperiod
+      value: "2"
+    - name: address
+      value: 192.168.1.1
+    image: kube-vip:v1.0
+    imagePullPolicy: IfNotPresent
+    name: kube-vip
+    resources: {}
+    securityContext:
+      capabilities:
+        add:
+        - NET_ADMIN
+        - NET_RAW
+    volumeMounts:
+    - mountPath: /etc/kubernetes/admin.conf
+      name: kubeconfig
+  hostNetwork: true
+  volumes:
+  - hostPath:
+      path: /etc/kubernetes/admin.conf
+    name: kubeconfig
+status: {}`,
+				},
+			},
+			want: []bootstrapv1.File{
+				{
+					Path: "/etc/kubernetes/manifests/kube-vip.yaml",
+					Content: `apiVersion: v1
+kind: Pod
+metadata:
+  creationTimestamp: null
+  name: kube-vip
+  namespace: kube-system
+spec:
+  containers:
+  - args:
+    - manager
+    env:
+    - name: vip_arp
+      value: "true"
+    - name: port
+      value: "6443"
+    - name: vip_cidr
+      value: "32"
+    - name: cp_enable
+      value: "true"
+    - name: cp_namespace
+      value: kube-system
+    - name: vip_ddns
+      value: "false"
+    - name: vip_leaderelection
+      value: "true"
+    - name: vip_leaseduration
+      value: "15"
+    - name: vip_renewdeadline
+      value: "10"
+    - name: vip_retryperiod
+      value: "2"
+    - name: address
+      value: 192.168.1.1
+    image: kube-vip:v1.0
+    imagePullPolicy: IfNotPresent
+    name: kube-vip
+    resources: {}
+    securityContext:
+      capabilities:
+        add:
+        - NET_ADMIN
+        - NET_RAW
+    volumeMounts:
+    - mountPath: /etc/kubernetes/admin.conf
+      name: kubeconfig
+  hostNetwork: true
+  volumes:
+  - hostPath:
+      path: /var/lib/kubeadm/admin.conf
+      type: File
+    name: kubeconfig
+status: {}
+`,
+				},
+			},
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			g := NewWithT(t)
+			g.Expect(patchKubeVipFile(tt.writeFiles)).To(BeComparableTo(tt.want))
+		})
+	}
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
new file mode 100644
index 000000000..8f9b6e12e
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_init.go
@@ -0,0 +1,47 @@
+// TODO: make bottlerocket(init) more agnostic. In addition to other changes to make things
+// less hacky, also move calling cloudinit from controller and passing it to
+// bottlerocket bootstrap, to all control to bottlerocket bootstrap itself.
+// That way, bottlerocket bootstrap will call cloudinit to generate that userdata
+// which is much more cleaner.
+package bottlerocket
+
+import (
+	"github.com/pkg/errors"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	controlPlaneBootstrapContainerTemplate = `{{.Header}}
+{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+      ---
+{{.ClusterConfiguration | Indent 6}}
+      ---
+{{.InitConfiguration | Indent 6}}
+runcmd: "ControlPlaneInit"
+`
+)
+
+// NewInitControlPlane will take the cloudinit's controlplane input as an argument
+// and generate the bottlerocket toml formatted userdata for the host node, which
+// has the settings for bootstrap container which has its own embedded base64 encoded userdata.
+func NewInitControlPlane(input *cloudinit.ControlPlaneInput, config *BottlerocketConfig) ([]byte, error) {
+	input.Header = cloudConfigHeader
+	input.WriteFiles = input.Certificates.AsFiles()
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+
+	var err error
+	input.WriteFiles, err = patchKubeVipFile(input.WriteFiles)
+	if err != nil {
+		return nil, errors.Wrap(err, "Failed to patch kube-vip manifest file")
+	}
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("InitBootstrapContainer", controlPlaneBootstrapContainerTemplate, input)
+	if err != nil {
+		return nil, err
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users, config)
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
new file mode 100644
index 000000000..b93e1164b
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/controlplane_join.go
@@ -0,0 +1,30 @@
+package bottlerocket
+
+import (
+	"github.com/pkg/errors"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	controlPlaneJoinBottlerocketInit = `{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm-join-config.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+{{.JoinConfiguration | Indent 6}}
+runcmd: "ControlPlaneJoin"
+`
+)
+
+// NewJoinControlPlane returns the user data string to be used on a new control plane instance.
+func NewJoinControlPlane(input *cloudinit.ControlPlaneJoinInput, config *BottlerocketConfig) ([]byte, error) {
+	input.WriteFiles = input.Certificates.AsFiles()
+	input.ControlPlane = true
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("JoinControlplane", controlPlaneJoinBottlerocketInit, input)
+	if err != nil {
+		return nil, errors.Wrapf(err, "failed to generate user data for machine joining control plane")
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users, config)
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/files.go b/bootstrap/kubeadm/internal/bottlerocket/files.go
new file mode 100644
index 000000000..9be431ba8
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/files.go
@@ -0,0 +1,18 @@
+package bottlerocket
+
+const (
+	filesTemplate = `{{ define "files" -}}
+write_files:{{ range . }}
+-   path: {{.Path}}
+    {{ if ne .Owner "" -}}
+    owner: {{.Owner}}
+    {{ end -}}
+    {{ if ne .Permissions "" -}}
+    permissions: '{{.Permissions}}'
+    {{ end -}}
+    content: |
+{{.Content | Indent 6}}
+{{- end -}}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/node.go b/bootstrap/kubeadm/internal/bottlerocket/node.go
new file mode 100644
index 000000000..df52e59d5
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/node.go
@@ -0,0 +1,32 @@
+package bottlerocket
+
+import (
+	"fmt"
+
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
+)
+
+const (
+	nodeBottleRocketInit = `{{template "files" .WriteFiles}}
+-   path: /tmp/kubeadm-join-config.yaml
+    owner: root:root
+    permissions: '0640'
+    content: |
+      ---
+{{.JoinConfiguration | Indent 6}}
+runcmd: "WorkerJoin"
+`
+)
+
+// NewNode creates a toml formatted userdata including bootstrap host container settings that has
+// a base64 encoded user data for the bootstrap container
+func NewNode(input *cloudinit.NodeInput, config *BottlerocketConfig) ([]byte, error) {
+	input.KubeadmCommand = fmt.Sprintf(standardJoinCommand, input.KubeadmVerbosity)
+	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	bootstrapContainerUserData, err := generateBootstrapContainerUserData("Node", nodeBottleRocketInit, input)
+	if err != nil {
+		return nil, err
+	}
+
+	return getBottlerocketNodeUserData(bootstrapContainerUserData, input.Users, config)
+}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/users.go b/bootstrap/kubeadm/internal/bottlerocket/users.go
new file mode 100644
index 000000000..e5eedcb9f
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/users.go
@@ -0,0 +1,12 @@
+package bottlerocket
+
+const (
+	usersTemplate = `{{- if . }}
+{
+	"ssh": {
+		"authorized-keys": [{{.}}]
+	}
+}
+{{- end -}}
+`
+)
diff --git a/bootstrap/kubeadm/internal/bottlerocket/utils.go b/bootstrap/kubeadm/internal/bottlerocket/utils.go
new file mode 100644
index 000000000..9118e28c4
--- /dev/null
+++ b/bootstrap/kubeadm/internal/bottlerocket/utils.go
@@ -0,0 +1,18 @@
+package bottlerocket
+
+import (
+	"strings"
+	"text/template"
+)
+
+var (
+	defaultTemplateFuncMap = template.FuncMap{
+		"Indent": templateYAMLIndent,
+	}
+)
+
+func templateYAMLIndent(i int, input string) string {
+	split := strings.Split(input, "\n")
+	ident := "\n" + strings.Repeat(" ", i)
+	return strings.Repeat(" ", i) + strings.Join(split, ident)
+}
diff --git a/bootstrap/kubeadm/internal/cloudinit/cloudinit.go b/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
index 4aedf0e2c..846266887 100644
--- a/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
+++ b/bootstrap/kubeadm/internal/cloudinit/cloudinit.go
@@ -63,8 +63,8 @@ type BaseUserData struct {
 }
 
 func (input *BaseUserData) prepare() error {
-	input.Header = cloudConfigHeader
 	input.WriteFiles = append(input.WriteFiles, input.AdditionalFiles...)
+	input.Header = cloudConfigHeader
 	input.KubeadmCommand = fmt.Sprintf(standardJoinCommand, input.KubeadmVerbosity)
 	if input.UseExperimentalRetry {
 		input.KubeadmCommand = retriableJoinScriptName
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index a95fe89be..8e52de840 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -45,6 +45,7 @@ import (
 
 	clusterv1 "sigs.k8s.io/cluster-api/api/v1beta1"
 	bootstrapv1 "sigs.k8s.io/cluster-api/bootstrap/kubeadm/api/v1beta1"
+	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/bottlerocket"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/cloudinit"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/ignition"
 	"sigs.k8s.io/cluster-api/bootstrap/kubeadm/internal/locking"
@@ -547,6 +548,46 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 	// injects into config.ClusterConfiguration values from top level object
 	r.reconcileTopLevelObjectSettings(ctx, scope.Cluster, machine, scope.Config)
 
+	// Add extra config to cluster config for bottlerocket
+	// Extract bottlerocket config from kubeadm
+	var bottlerocketConfig *bottlerocket.BottlerocketConfig
+	if scope.Config.Spec.Format == bootstrapv1.Bottlerocket {
+		// Add certificates dir
+		if scope.Config.Spec.ClusterConfiguration.CertificatesDir == "" {
+			scope.Config.Spec.ClusterConfiguration.CertificatesDir = "/var/lib/kubeadm/pki"
+		}
+
+		// Add controllerManager extra volumes
+		scope.Config.Spec.ClusterConfiguration.ControllerManager.ExtraVolumes = []bootstrapv1.HostPathMount{
+			{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/controller-manager.conf",
+				MountPath: "/etc/kubernetes/controller-manager.conf",
+				ReadOnly:  true,
+				PathType:  "File",
+			},
+		}
+
+		// Add scheduler extraVol
+		scope.Config.Spec.ClusterConfiguration.Scheduler.ExtraVolumes = []bootstrapv1.HostPathMount{
+			{
+				Name:      "kubeconfig",
+				HostPath:  "/var/lib/kubeadm/scheduler.conf",
+				MountPath: "/etc/kubernetes/scheduler.conf",
+				ReadOnly:  true,
+				PathType:  "File",
+			},
+		}
+
+		bottlerocketConfig = &bottlerocket.BottlerocketConfig{
+			Pause:                 scope.Config.Spec.ClusterConfiguration.Pause,
+			BottlerocketBootstrap: scope.Config.Spec.ClusterConfiguration.BottlerocketBootstrap,
+		}
+		if scope.Config.Spec.ClusterConfiguration.Proxy.HTTPSProxy != "" {
+			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.ClusterConfiguration.Proxy
+		}
+	}
+
 	clusterdata, err := kubeadmtypes.MarshalClusterConfigurationForVersion(scope.Config.Spec.ClusterConfiguration, parsedVersion)
 	if err != nil {
 		scope.Error(err, "Failed to marshal cluster configuration")
@@ -660,6 +701,12 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 			ControlPlaneInput: controlPlaneInput,
 			Ignition:          scope.Config.Spec.Ignition,
 		})
+	case bootstrapv1.Bottlerocket:
+		bootstrapInitData, err = bottlerocket.NewInitControlPlane(controlPlaneInput, bottlerocketConfig)
+		if err != nil {
+			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
+			return ctrl.Result{}, err
+		}
 	default:
 		bootstrapInitData, err = cloudinit.NewInitControlPlane(controlPlaneInput)
 	}
@@ -816,6 +863,19 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 			NodeInput: nodeInput,
 			Ignition:  scope.Config.Spec.Ignition,
 		})
+	case bootstrapv1.Bottlerocket:
+		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
+			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
+			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+		}
+		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
+			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
+		}
+		bootstrapJoinData, err = bottlerocket.NewNode(nodeInput, bottlerocketConfig)
+		if err != nil {
+			scope.Error(err, "Failed to create a worker bottlerocket join configuration")
+			return ctrl.Result{}, err
+		}
 	default:
 		bootstrapJoinData, err = cloudinit.NewNode(nodeInput)
 	}
@@ -970,6 +1030,19 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 			ControlPlaneJoinInput: controlPlaneJoinInput,
 			Ignition:              scope.Config.Spec.Ignition,
 		})
+	case bootstrapv1.Bottlerocket:
+		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
+			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
+			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+		}
+		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
+			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
+		}
+		bootstrapJoinData, err = bottlerocket.NewJoinControlPlane(controlPlaneJoinInput, bottlerocketConfig)
+		if err != nil {
+			scope.Error(err, "Failed to generate cloud init for bottlerocket bootstrap control plane")
+			return ctrl.Result{}, err
+		}
 	default:
 		bootstrapJoinData, err = cloudinit.NewJoinControlPlane(controlPlaneJoinInput)
 	}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/types.go b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
index 1b69e3dd7..945a97d72 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
@@ -55,6 +55,21 @@ type InitConfiguration struct {
 type ClusterConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// Etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -126,6 +141,29 @@ type ClusterConfiguration struct {
 	ClusterName string `json:"clusterName,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// ImageMeta allows to customize the image used for the Pause component
+	ImageMeta `json:",inline"`
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// ImageMeta allows to customize the image used for the BottlerocketBootstrap component
+	ImageMeta `json:",inline"`
+}
+
+// ProxyConfiguration holds the settings for proxying bottlerocket services
+type ProxyConfiguration struct {
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
+}
+
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
 type ControlPlaneComponent struct {
 	// ExtraArgs is an extra set of flags to pass to the control plane component.
@@ -326,6 +364,21 @@ type ExternalEtcd struct {
 type JoinConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// NodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
index 2950d2ef1..77bdb3269 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
@@ -88,6 +88,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketBootstrap)(nil), (*v1beta1.BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(a.(*BottlerocketBootstrap), b.(*v1beta1.BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketBootstrap)(nil), (*BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(a.(*v1beta1.BottlerocketBootstrap), b.(*BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -208,6 +218,26 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*Pause)(nil), (*v1beta1.Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(a.(*Pause), b.(*v1beta1.Pause), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.Pause)(nil), (*Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_Pause_To_upstreamv1beta1_Pause(a.(*v1beta1.Pause), b.(*Pause), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*ProxyConfiguration)(nil), (*v1beta1.ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(a.(*ProxyConfiguration), b.(*v1beta1.ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.ProxyConfiguration)(nil), (*ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(a.(*v1beta1.ProxyConfiguration), b.(*ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -379,7 +409,40 @@ func Convert_v1beta1_BootstrapTokenString_To_upstreamv1beta1_BootstrapTokenStrin
 	return autoConvert_v1beta1_BootstrapTokenString_To_upstreamv1beta1_BootstrapTokenString(in, out, s)
 }
 
+func autoConvert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta1.BottlerocketBootstrap, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap is an autogenerated conversion function.
+func Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta1.BottlerocketBootstrap, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(in *v1beta1.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(in *v1beta1.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(in, out, s)
+}
+
 func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta1_Etcd_To_v1beta1_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -409,6 +472,15 @@ func autoConvert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfigur
 }
 
 func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguration(in *v1beta1.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta1_Pause_To_upstreamv1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_Etcd_To_upstreamv1beta1_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -701,6 +773,15 @@ func autoConvert_v1beta1_InitConfiguration_To_upstreamv1beta1_InitConfiguration(
 }
 
 func autoConvert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(in *JoinConfiguration, out *v1beta1.JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta1_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta1_NodeRegistrationOptions_To_v1beta1_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -718,6 +799,15 @@ func Convert_upstreamv1beta1_JoinConfiguration_To_v1beta1_JoinConfiguration(in *
 }
 
 func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta1_JoinConfiguration(in *v1beta1.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta1_Pause_To_upstreamv1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_NodeRegistrationOptions_To_upstreamv1beta1_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -830,3 +920,49 @@ func autoConvert_v1beta1_NodeRegistrationOptions_To_upstreamv1beta1_NodeRegistra
 	// WARNING: in.ImagePullSerial requires manual conversion: does not exist in peer-type
 	return nil
 }
+
+func autoConvert_upstreamv1beta1_Pause_To_v1beta1_Pause(in *Pause, out *v1beta1.Pause, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta1_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_upstreamv1beta1_Pause_To_v1beta1_Pause is an autogenerated conversion function.
+func Convert_upstreamv1beta1_Pause_To_v1beta1_Pause(in *Pause, out *v1beta1.Pause, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_Pause_To_v1beta1_Pause(in, out, s)
+}
+
+func autoConvert_v1beta1_Pause_To_upstreamv1beta1_Pause(in *v1beta1.Pause, out *Pause, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_Pause_To_upstreamv1beta1_Pause is an autogenerated conversion function.
+func Convert_v1beta1_Pause_To_upstreamv1beta1_Pause(in *v1beta1.Pause, out *Pause, s conversion.Scope) error {
+	return autoConvert_v1beta1_Pause_To_upstreamv1beta1_Pause(in, out, s)
+}
+
+func autoConvert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in *ProxyConfiguration, out *v1beta1.ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration is an autogenerated conversion function.
+func Convert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in *ProxyConfiguration, out *v1beta1.ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta1_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in, out, s)
+}
+
+func autoConvert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(in *v1beta1.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(in *v1beta1.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1beta1_ProxyConfiguration_To_upstreamv1beta1_ProxyConfiguration(in, out, s)
+}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
index 00364f438..8d35388dd 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
@@ -141,10 +141,29 @@ func (in *BootstrapTokenString) DeepCopy() *BootstrapTokenString {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketBootstrap) DeepCopyInto(out *BottlerocketBootstrap) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketBootstrap.
+func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketBootstrap)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.Etcd.DeepCopyInto(&out.Etcd)
 	out.Networking = in.Networking
 	in.APIServer.DeepCopyInto(&out.APIServer)
@@ -409,6 +428,9 @@ func (in *InitConfiguration) DeepCopyObject() runtime.Object {
 func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
+	out.Pause = in.Pause
+	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	in.Proxy.DeepCopyInto(&out.Proxy)
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
 	in.Discovery.DeepCopyInto(&out.Discovery)
 	if in.ControlPlane != nil {
@@ -528,3 +550,39 @@ func (in *NodeRegistrationOptions) DeepCopy() *NodeRegistrationOptions {
 	in.DeepCopyInto(out)
 	return out
 }
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *Pause) DeepCopyInto(out *Pause) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pause.
+func (in *Pause) DeepCopy() *Pause {
+	if in == nil {
+		return nil
+	}
+	out := new(Pause)
+	in.DeepCopyInto(out)
+	return out
+}
+
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *ProxyConfiguration) DeepCopyInto(out *ProxyConfiguration) {
+	*out = *in
+	if in.NoProxy != nil {
+		in, out := &in.NoProxy, &out.NoProxy
+		*out = make([]string, len(*in))
+		copy(*out, *in)
+	}
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProxyConfiguration.
+func (in *ProxyConfiguration) DeepCopy() *ProxyConfiguration {
+	if in == nil {
+		return nil
+	}
+	out := new(ProxyConfiguration)
+	in.DeepCopyInto(out)
+	return out
+}
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index 23e5cc370..813f8136b 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -194,6 +194,22 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           CertificatesDir specifies where to store or look for all required certificates.
@@ -404,6 +420,37 @@ spec:
                               to "10.96.0.0/12" if that's unset.
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       scheduler:
                         description: Scheduler contains extra settings for the scheduler
                           control plane component
@@ -760,6 +807,22 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           CACertPath is the path to the SSL certificate authority used to
@@ -923,6 +986,37 @@ spec:
                               type: object
                             type: array
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                     type: object
                   mounts:
                     description: mounts specifies a list of mount points to be setup.
@@ -2721,6 +2815,22 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
@@ -3236,6 +3346,37 @@ spec:
                             minLength: 1
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       scheduler:
                         description: scheduler contains extra settings for the scheduler
                           control plane component
@@ -3593,6 +3734,7 @@ spec:
                     enum:
                     - cloud-config
                     - ignition
+                    - bottlerocket
                     type: string
                   ignition:
                     description: ignition contains Ignition specific configuration.
@@ -3827,6 +3969,37 @@ spec:
                             minLength: 1
                             type: string
                         type: object
+                      pause:
+                        description: |-
+                          Pause holds the image source for pause container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
+                      proxy:
+                        description: |-
+                          Proxy holds the https and no proxy information
+                          This is only for bottlerocket
+                        properties:
+                          httpsProxy:
+                            description: HTTPS proxy
+                            type: string
+                          noProxy:
+                            description: No proxy, list of ips that should not use
+                              proxy
+                            items:
+                              type: string
+                            type: array
+                        type: object
                       skipPhases:
                         description: |-
                           skipPhases is a list of phases to skip during command execution.
@@ -3850,6 +4023,22 @@ spec:
                           may reject unrecognized values.
                           More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                         type: string
+                      bottlerocketBootstrap:
+                        description: |-
+                          BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           caCertPath is the path to the SSL certificate authority used to
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 804ab8725..4061aa7c6 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -1413,6 +1413,22 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
@@ -1943,6 +1959,37 @@ spec:
                                     minLength: 1
                                     type: string
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               scheduler:
                                 description: scheduler contains extra settings for
                                   the scheduler control plane component
@@ -2312,6 +2359,7 @@ spec:
                             enum:
                             - cloud-config
                             - ignition
+                            - bottlerocket
                             type: string
                           ignition:
                             description: ignition contains Ignition specific configuration.
@@ -2548,6 +2596,37 @@ spec:
                                     minLength: 1
                                     type: string
                                 type: object
+                              pause:
+                                description: |-
+                                  Pause holds the image source for pause container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
+                              proxy:
+                                description: |-
+                                  Proxy holds the https and no proxy information
+                                  This is only for bottlerocket
+                                properties:
+                                  httpsProxy:
+                                    description: HTTPS proxy
+                                    type: string
+                                  noProxy:
+                                    description: No proxy, list of ips that should
+                                      not use proxy
+                                    items:
+                                      type: string
+                                    type: array
+                                type: object
                               skipPhases:
                                 description: |-
                                   skipPhases is a list of phases to skip during command execution.
@@ -2571,6 +2650,22 @@ spec:
                                   may reject unrecognized values.
                                   More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                                 type: string
+                              bottlerocketBootstrap:
+                                description: |-
+                                  BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               caCertPath:
                                 description: |-
                                   caCertPath is the path to the SSL certificate authority used to
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go b/internal/apis/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go
index 681cc39d8..63c5c9b07 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha3/kubeadmconfig_types.go
@@ -24,12 +24,15 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config
+// +kubebuilder:validation:Enum=cloud-config;bottlerocket
 type Format string
 
 const (
 	// CloudConfig make the bootstrap data to be of cloud-config format.
 	CloudConfig Format = "cloud-config"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 // KubeadmConfigSpec defines the desired state of KubeadmConfig.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index 54af645d0..e0c73a864 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -61,6 +61,21 @@ type InitConfiguration struct {
 type ClusterConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// etcd holds configuration for etcd.
 	// NB: This value defaults to a Local (stacked) etcd
 	// +optional
@@ -128,6 +143,29 @@ type ClusterConfiguration struct {
 	ClusterName string `json:"clusterName,omitempty"`
 }
 
+// Pause defines the pause image repo and tag that should be run on the bootstrapped nodes.
+// This setting is ONLY for bottlerocket nodes, as this needs to be set pre-boot time along with user-data
+type Pause struct {
+	// ImageMeta allows to customize the image used for the Pause component
+	ImageMeta `json:",inline"`
+}
+
+// BottlerocketBootstrap holds the settings of kubeadm bootstrap container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketBootstrap struct {
+	// ImageMeta allows to customize the image used for the BottlerocketBootstrap component
+	ImageMeta `json:",inline"`
+}
+
+// ProxyConfiguration holds the settings for proxying bottlerocket services
+type ProxyConfiguration struct {
+	// HTTPS proxy
+	HTTPSProxy string `json:"httpsProxy,omitempty"`
+
+	// No proxy, list of ips that should not use proxy
+	NoProxy []string `json:"noProxy,omitempty"`
+}
+
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
 type ControlPlaneComponent struct {
 	// extraArgs is an extra set of flags to pass to the control plane component.
@@ -337,6 +375,21 @@ type ExternalEtcd struct {
 type JoinConfiguration struct {
 	metav1.TypeMeta `json:",inline"`
 
+	// Pause holds the image source for pause container
+	// This is only for bottlerocket
+	// +optional
+	Pause Pause `json:"pause,omitempty"`
+
+	// BottlerocketBootstrap holds the image source for kubeadm bootstrap container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
+
+	// Proxy holds the https and no proxy information
+	// This is only for bottlerocket
+	// +optional
+	Proxy ProxyConfiguration `json:"proxy,omitempty"`
+
 	// nodeRegistration holds fields that relate to registering the new control-plane node to the cluster.
 	// When used in the context of control plane nodes, NodeRegistration should remain consistent
 	// across both InitConfiguration and JoinConfiguration
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go
index f8036d945..2e0659164 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadmconfig_types.go
@@ -23,12 +23,15 @@ import (
 )
 
 // Format specifies the output format of the bootstrap data
-// +kubebuilder:validation:Enum=cloud-config
+// +kubebuilder:validation:Enum=cloud-config;bottlerocket
 type Format string
 
 const (
 	// CloudConfig make the bootstrap data to be of cloud-config format.
 	CloudConfig Format = "cloud-config"
+
+	// Bottlerocket make the bootstrap data to be of bottlerocket format.
+	Bottlerocket Format = "bottlerocket"
 )
 
 // KubeadmConfigSpec defines the desired state of KubeadmConfig.
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index ecddbbb13..4d3e1b798 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -90,6 +90,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketBootstrap)(nil), (*v1beta1.BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(a.(*BottlerocketBootstrap), b.(*v1beta1.BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketBootstrap)(nil), (*BottlerocketBootstrap)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(a.(*v1beta1.BottlerocketBootstrap), b.(*BottlerocketBootstrap), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -340,6 +350,26 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*Pause)(nil), (*v1beta1.Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_Pause_To_v1beta1_Pause(a.(*Pause), b.(*v1beta1.Pause), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.Pause)(nil), (*Pause)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_Pause_To_v1alpha4_Pause(a.(*v1beta1.Pause), b.(*Pause), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*ProxyConfiguration)(nil), (*v1beta1.ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(a.(*ProxyConfiguration), b.(*v1beta1.ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.ProxyConfiguration)(nil), (*ProxyConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(a.(*v1beta1.ProxyConfiguration), b.(*ProxyConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*SecretFileSource)(nil), (*v1beta1.SecretFileSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_SecretFileSource_To_v1beta1_SecretFileSource(a.(*SecretFileSource), b.(*v1beta1.SecretFileSource), scope)
 	}); err != nil {
@@ -541,7 +571,40 @@ func Convert_v1beta1_BootstrapTokenString_To_v1alpha4_BootstrapTokenString(in *v
 	return autoConvert_v1beta1_BootstrapTokenString_To_v1alpha4_BootstrapTokenString(in, out, s)
 }
 
+func autoConvert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta1.BottlerocketBootstrap, s conversion.Scope) error {
+	if err := Convert_v1alpha4_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in *BottlerocketBootstrap, out *v1beta1.BottlerocketBootstrap, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in *v1beta1.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_v1alpha4_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in *v1beta1.BottlerocketBootstrap, out *BottlerocketBootstrap, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in, out, s)
+}
+
 func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_v1alpha4_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1alpha4_Etcd_To_v1beta1_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -575,6 +638,15 @@ func Convert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *C
 }
 
 func autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in *v1beta1.ClusterConfiguration, out *ClusterConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta1_Pause_To_v1alpha4_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_Etcd_To_v1alpha4_Etcd(&in.Etcd, &out.Etcd, s); err != nil {
 		return err
 	}
@@ -975,6 +1047,15 @@ func autoConvert_v1beta1_InitConfiguration_To_v1alpha4_InitConfiguration(in *v1b
 }
 
 func autoConvert_v1alpha4_JoinConfiguration_To_v1beta1_JoinConfiguration(in *JoinConfiguration, out *v1beta1.JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_v1alpha4_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1alpha4_NodeRegistrationOptions_To_v1beta1_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -992,6 +1073,15 @@ func Convert_v1alpha4_JoinConfiguration_To_v1beta1_JoinConfiguration(in *JoinCon
 }
 
 func autoConvert_v1beta1_JoinConfiguration_To_v1alpha4_JoinConfiguration(in *v1beta1.JoinConfiguration, out *JoinConfiguration, s conversion.Scope) error {
+	if err := Convert_v1beta1_Pause_To_v1alpha4_Pause(&in.Pause, &out.Pause, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
+		return err
+	}
+	if err := Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_NodeRegistrationOptions_To_v1alpha4_NodeRegistrationOptions(&in.NodeRegistration, &out.NodeRegistration, s); err != nil {
 		return err
 	}
@@ -1495,6 +1585,52 @@ func Convert_v1beta1_Partition_To_v1alpha4_Partition(in *v1beta1.Partition, out
 	return autoConvert_v1beta1_Partition_To_v1alpha4_Partition(in, out, s)
 }
 
+func autoConvert_v1alpha4_Pause_To_v1beta1_Pause(in *Pause, out *v1beta1.Pause, s conversion.Scope) error {
+	if err := Convert_v1alpha4_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1alpha4_Pause_To_v1beta1_Pause is an autogenerated conversion function.
+func Convert_v1alpha4_Pause_To_v1beta1_Pause(in *Pause, out *v1beta1.Pause, s conversion.Scope) error {
+	return autoConvert_v1alpha4_Pause_To_v1beta1_Pause(in, out, s)
+}
+
+func autoConvert_v1beta1_Pause_To_v1alpha4_Pause(in *v1beta1.Pause, out *Pause, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_v1alpha4_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_Pause_To_v1alpha4_Pause is an autogenerated conversion function.
+func Convert_v1beta1_Pause_To_v1alpha4_Pause(in *v1beta1.Pause, out *Pause, s conversion.Scope) error {
+	return autoConvert_v1beta1_Pause_To_v1alpha4_Pause(in, out, s)
+}
+
+func autoConvert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in *ProxyConfiguration, out *v1beta1.ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in *ProxyConfiguration, out *v1beta1.ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(in, out, s)
+}
+
+func autoConvert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(in *v1beta1.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	out.HTTPSProxy = in.HTTPSProxy
+	out.NoProxy = *(*[]string)(unsafe.Pointer(&in.NoProxy))
+	return nil
+}
+
+// Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration is an autogenerated conversion function.
+func Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(in *v1beta1.ProxyConfiguration, out *ProxyConfiguration, s conversion.Scope) error {
+	return autoConvert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(in, out, s)
+}
+
 func autoConvert_v1alpha4_SecretFileSource_To_v1beta1_SecretFileSource(in *SecretFileSource, out *v1beta1.SecretFileSource, s conversion.Scope) error {
 	out.Name = in.Name
 	out.Key = in.Key
-- 
2.49.0

