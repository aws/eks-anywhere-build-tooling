From c46c8a289465e658f885682c3a3e0fa06a0de43f Mon Sep 17 00:00:00 2001
From: Michael Chu <chumich@amazon.com>
Date: Mon, 28 Feb 2022 09:51:25 -0800
Subject: [PATCH 13/41] Support configuring bottlerocket control container uri

Signed-off-by: Michael Chu <chumich@amazon.com>
---
 .../kubeadm/api/v1beta1/kubeadm_types.go      | 17 ++++
 .../api/v1beta1/zz_generated.deepcopy.go      | 18 ++++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 96 +++++++++++++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 96 +++++++++++++++++++
 .../internal/bottlerocket/bootstrap.go        | 12 +++
 .../internal/bottlerocket/bottlerocket.go     |  8 ++
 .../controllers/kubeadmconfig_controller.go   |  3 +
 .../kubeadm/types/upstreamv1beta1/types.go    | 17 ++++
 .../upstreamv1beta1/zz_generated.deepcopy.go  | 18 ++++
 .../kubeadm/types/upstreamv1beta2/types.go    | 17 ++++
 .../zz_generated.conversion.go                | 46 +++++++++
 .../upstreamv1beta2/zz_generated.deepcopy.go  | 18 ++++
 .../kubeadm/types/upstreamv1beta3/types.go    | 17 ++++
 .../zz_generated.conversion.go                | 46 +++++++++
 .../upstreamv1beta3/zz_generated.deepcopy.go  | 18 ++++
 bootstrap/kubeadm/types/utils_test.go         | 34 ++++++-
 cmd/clusterctl/client/cluster/mover_test.go   |  6 +-
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 96 +++++++++++++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 64 +++++++++++++
 .../internal/workload_cluster_coredns_test.go |  5 +
 .../internal/workload_cluster_etcd_test.go    | 10 ++
 .../kubeadm/internal/workload_cluster_test.go | 25 +++++
 .../kubeadm/v1alpha4/kubeadm_types.go         | 17 ++++
 .../v1alpha4/zz_generated.conversion.go       | 46 +++++++++
 .../kubeadm/v1alpha4/zz_generated.deepcopy.go | 18 ++++
 25 files changed, 763 insertions(+), 5 deletions(-)

diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
index f38ffef03..ee668c88e 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
@@ -83,6 +83,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
@@ -181,6 +186,13 @@ type BottlerocketBootstrap struct {
 	ImageMeta `json:",inline"`
 }
 
+// BottlerocketControl holds the settings of control container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketControl struct {
+	// ImageMeta allows to customize the image used for the BottlerocketControl component
+	ImageMeta `json:",inline"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
@@ -498,6 +510,11 @@ type JoinConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
diff --git a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
index dc1f6e5e9..a4cb59a06 100644
--- a/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/api/v1beta1/zz_generated.deepcopy.go
@@ -158,12 +158,29 @@ func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketControl) DeepCopyInto(out *BottlerocketControl) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketControl.
+func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketControl)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.Etcd.DeepCopyInto(&out.Etcd)
@@ -626,6 +643,7 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index 054878db5..1f0a21029 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -127,6 +127,22 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketControl:
+                    description: |-
+                      BottlerocketControl holds the image source for control container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       CertificatesDir specifies where to store or look for all required certificates.
@@ -745,6 +761,22 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketControl:
+                    description: |-
+                      BottlerocketControl holds the image source for control container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       CACertPath is the path to the SSL certificate authority used to
@@ -1249,6 +1281,22 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketControl:
+                    description: |-
+                      BottlerocketControl holds the image source for control container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
@@ -1863,6 +1911,22 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketControl:
+                    description: |-
+                      BottlerocketControl holds the image source for control container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       caCertPath is the path to the SSL certificate authority used to
@@ -2485,6 +2549,22 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketControl:
+                    description: |-
+                      BottlerocketControl holds the image source for control container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   certificatesDir:
                     description: |-
                       certificatesDir specifies where to store or look for all required certificates.
@@ -3588,6 +3668,22 @@ spec:
                           In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                         type: string
                     type: object
+                  bottlerocketControl:
+                    description: |-
+                      BottlerocketControl holds the image source for control container
+                      This is only for bottlerocket
+                    properties:
+                      imageRepository:
+                        description: |-
+                          ImageRepository sets the container registry to pull images from.
+                          if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                        type: string
+                      imageTag:
+                        description: |-
+                          ImageTag allows to specify a tag for the image.
+                          In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                        type: string
+                    type: object
                   caCertPath:
                     description: |-
                       caCertPath is the path to the SSL certificate authority used to
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index c55505333..ca234f681 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -135,6 +135,22 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketControl:
+                            description: |-
+                              BottlerocketControl holds the image source for control container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               CertificatesDir specifies where to store or look for all required certificates.
@@ -767,6 +783,22 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketControl:
+                            description: |-
+                              BottlerocketControl holds the image source for control container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               CACertPath is the path to the SSL certificate authority used to
@@ -1216,6 +1248,22 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketControl:
+                            description: |-
+                              BottlerocketControl holds the image source for control container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
@@ -1845,6 +1893,22 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketControl:
+                            description: |-
+                              BottlerocketControl holds the image source for control container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               caCertPath is the path to the SSL certificate authority used to
@@ -2446,6 +2510,22 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketControl:
+                            description: |-
+                              BottlerocketControl holds the image source for control container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           certificatesDir:
                             description: |-
                               certificatesDir specifies where to store or look for all required certificates.
@@ -3581,6 +3661,22 @@ spec:
                                   In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                 type: string
                             type: object
+                          bottlerocketControl:
+                            description: |-
+                              BottlerocketControl holds the image source for control container
+                              This is only for bottlerocket
+                            properties:
+                              imageRepository:
+                                description: |-
+                                  ImageRepository sets the container registry to pull images from.
+                                  if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                type: string
+                              imageTag:
+                                description: |-
+                                  ImageTag allows to specify a tag for the image.
+                                  In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                type: string
+                            type: object
                           caCertPath:
                             description: |-
                               caCertPath is the path to the SSL certificate authority used to
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index dd769a78d..f8f1b97cb 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -53,6 +53,14 @@ trusted=true
 [settings.kubernetes.node-taints]
 {{.Taints}}
 {{- end -}}
+`
+
+	controlContainerTemplate = `{{ define "controlContainerSettings" -}}
+[settings.host-containers.control]
+enabled = true
+superpowered = false
+source = "{{.ControlContainerSource}}"
+{{- end -}}
 `
 
 	bottlerocketNodeInitSettingsTemplate = `{{template "bootstrapHostContainerSettings" .}}
@@ -80,5 +88,9 @@ trusted=true
 {{- if (ne .Taints "")}}
 {{template "taintsTemplate" .}}
 {{- end -}}
+
+{{- if (ne .ControlContainerSource "")}}
+{{template "controlContainerSettings" .}}
+{{- end -}}
 `
 )
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index fd3c9d15d..833f2d1c6 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -25,6 +25,7 @@ const (
 type BottlerocketConfig struct {
 	Pause                       bootstrapv1.Pause
 	BottlerocketBootstrap       bootstrapv1.BottlerocketBootstrap
+	BottlerocketControl         bootstrapv1.BottlerocketControl
 	ProxyConfiguration          bootstrapv1.ProxyConfiguration
 	RegistryMirrorConfiguration bootstrapv1.RegistryMirrorConfiguration
 	KubeletExtraArgs            map[string]string
@@ -35,6 +36,7 @@ type BottlerocketSettingsInput struct {
 	BootstrapContainerUserData string
 	AdminContainerUserData     string
 	BootstrapContainerSource   string
+	ControlContainerSource     string
 	PauseContainerSource       string
 	HTTPSProxyEndpoint         string
 	NoProxyEndpoints           []string
@@ -92,6 +94,9 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 	if _, err := tm.Parse(adminContainerInitTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse adminContainer %s template", kind)
 	}
+	if _, err := tm.Parse(controlContainerTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse controlContainer %s template", kind)
+	}
 	if _, err := tm.Parse(kubernetesInitTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse kubernetes %s template", kind)
 	}
@@ -147,6 +152,9 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 		NodeLabels:                 parseNodeLabels(config.KubeletExtraArgs["node-labels"]), // empty string if it does not exist
 		Taints:                     parseTaints(config.Taints), //empty string if it does not exist
 	}
+	if config.BottlerocketControl.ImageRepository != "" && config.BottlerocketControl.ImageTag != "" {
+		bottlerocketInput.ControlContainerSource = fmt.Sprintf("%s:%s", config.BottlerocketControl.ImageRepository, config.BottlerocketControl.ImageTag)
+	}
 	if len(config.ProxyConfiguration.NoProxy) > 0 {
 		for _, noProxy := range config.ProxyConfiguration.NoProxy {
 			bottlerocketInput.NoProxyEndpoints = append(bottlerocketInput.NoProxyEndpoints, strconv.Quote(noProxy))
diff --git a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
index 9738fc6bf..ce624b1fd 100644
--- a/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
+++ b/bootstrap/kubeadm/internal/controllers/kubeadmconfig_controller.go
@@ -549,6 +549,7 @@ func (r *KubeadmConfigReconciler) handleClusterNotInitialized(ctx context.Contex
 		bottlerocketConfig = &bottlerocket.BottlerocketConfig{
 			Pause:                 scope.Config.Spec.ClusterConfiguration.Pause,
 			BottlerocketBootstrap: scope.Config.Spec.ClusterConfiguration.BottlerocketBootstrap,
+			BottlerocketControl:   scope.Config.Spec.ClusterConfiguration.BottlerocketControl,
 		}
 		if scope.Config.Spec.ClusterConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.ClusterConfiguration.Proxy
@@ -841,6 +842,7 @@ func (r *KubeadmConfigReconciler) joinWorker(ctx context.Context, scope *Scope)
 		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
 			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
 			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+			BottlerocketControl:   scope.Config.Spec.JoinConfiguration.BottlerocketControl,
 		}
 		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
@@ -1016,6 +1018,7 @@ func (r *KubeadmConfigReconciler) joinControlplane(ctx context.Context, scope *S
 		bottlerocketConfig := &bottlerocket.BottlerocketConfig{
 			Pause:                 scope.Config.Spec.JoinConfiguration.Pause,
 			BottlerocketBootstrap: scope.Config.Spec.JoinConfiguration.BottlerocketBootstrap,
+			BottlerocketControl:   scope.Config.Spec.JoinConfiguration.BottlerocketControl,
 		}
 		if scope.Config.Spec.JoinConfiguration.Proxy.HTTPSProxy != "" {
 			bottlerocketConfig.ProxyConfiguration = scope.Config.Spec.JoinConfiguration.Proxy
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/types.go b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
index 11616027c..2c73ad306 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/types.go
@@ -65,6 +65,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
@@ -160,6 +165,13 @@ type BottlerocketBootstrap struct {
 	ImageMeta `json:",inline"`
 }
 
+// BottlerocketControl holds the settings of control container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketControl struct {
+	// ImageMeta allows to customize the image used for the BottlerocketControl component
+	ImageMeta `json:",inline"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
@@ -388,6 +400,11 @@ type JoinConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
index 9f8f2ed5c..165282cc6 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.deepcopy.go
@@ -157,12 +157,29 @@ func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketControl) DeepCopyInto(out *BottlerocketControl) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketControl.
+func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketControl)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.Etcd.DeepCopyInto(&out.Etcd)
@@ -431,6 +448,7 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/types.go b/bootstrap/kubeadm/types/upstreamv1beta2/types.go
index 9a928412d..b80c8c4fd 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/types.go
@@ -74,6 +74,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
@@ -172,6 +177,13 @@ type BottlerocketBootstrap struct {
 	ImageMeta `json:",inline"`
 }
 
+// BottlerocketControl holds the settings of control container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketControl struct {
+	// ImageMeta allows to customize the image used for the BottlerocketControl component
+	ImageMeta `json:",inline"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
@@ -410,6 +422,11 @@ type JoinConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
index 56db9e656..7c9ada4df 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
@@ -98,6 +98,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketControl)(nil), (*v1beta1.BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl(a.(*BottlerocketControl), b.(*v1beta1.BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketControl)(nil), (*BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl(a.(*v1beta1.BottlerocketControl), b.(*BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*v1beta1.ClusterConfiguration)(nil), (*ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta2_ClusterConfiguration(a.(*v1beta1.ClusterConfiguration), b.(*ClusterConfiguration), scope)
 	}); err != nil {
@@ -443,6 +453,30 @@ func Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta2_BottlerocketBootst
 	return autoConvert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta2_BottlerocketBootstrap(in, out, s)
 }
 
+func autoConvert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta2_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl is an autogenerated conversion function.
+func Convert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta2_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl(in, out, s)
+}
+
 func autoConvert_upstreamv1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta2_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -450,6 +484,9 @@ func autoConvert_upstreamv1beta2_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	if err := Convert_upstreamv1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -491,6 +528,9 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta2_ClusterConfigur
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -791,6 +831,9 @@ func autoConvert_upstreamv1beta2_JoinConfiguration_To_v1beta1_JoinConfiguration(
 	if err := Convert_upstreamv1beta2_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta2_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta2_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -828,6 +871,9 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta2_JoinConfiguration(
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta2_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta2_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta2_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.deepcopy.go
index d6dc1e95c..16bc8d8a7 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.deepcopy.go
@@ -157,12 +157,29 @@ func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketControl) DeepCopyInto(out *BottlerocketControl) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketControl.
+func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketControl)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.Etcd.DeepCopyInto(&out.Etcd)
@@ -431,6 +448,7 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/types.go b/bootstrap/kubeadm/types/upstreamv1beta3/types.go
index 65371b811..bfc69fabb 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/types.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/types.go
@@ -83,6 +83,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
@@ -169,6 +174,13 @@ type BottlerocketBootstrap struct {
 	ImageMeta `json:",inline"`
 }
 
+// BottlerocketControl holds the settings of control container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketControl struct {
+	// ImageMeta allows to customize the image used for the BottlerocketControl component
+	ImageMeta `json:",inline"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
@@ -396,6 +408,11 @@ type JoinConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
index 819d62b4b..18445d6d2 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
@@ -98,6 +98,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketControl)(nil), (*v1beta1.BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl(a.(*BottlerocketControl), b.(*v1beta1.BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketControl)(nil), (*BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl(a.(*v1beta1.BottlerocketControl), b.(*BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta3_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -443,6 +453,30 @@ func Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta3_BottlerocketBootst
 	return autoConvert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta3_BottlerocketBootstrap(in, out, s)
 }
 
+func autoConvert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_upstreamv1beta3_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl is an autogenerated conversion function.
+func Convert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_upstreamv1beta3_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl(in, out, s)
+}
+
 func autoConvert_upstreamv1beta3_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_upstreamv1beta3_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -450,6 +484,9 @@ func autoConvert_upstreamv1beta3_ClusterConfiguration_To_v1beta1_ClusterConfigur
 	if err := Convert_upstreamv1beta3_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta3_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -495,6 +532,9 @@ func autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta3_ClusterConfigur
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta3_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta3_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -786,6 +826,9 @@ func autoConvert_upstreamv1beta3_JoinConfiguration_To_v1beta1_JoinConfiguration(
 	if err := Convert_upstreamv1beta3_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_upstreamv1beta3_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_upstreamv1beta3_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -825,6 +868,9 @@ func autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_upstreamv1beta3_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_upstreamv1beta3_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_upstreamv1beta3_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.deepcopy.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.deepcopy.go
index 68734b74a..60205c135 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.deepcopy.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.deepcopy.go
@@ -157,12 +157,29 @@ func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketControl) DeepCopyInto(out *BottlerocketControl) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketControl.
+func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketControl)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.Etcd.DeepCopyInto(&out.Etcd)
@@ -410,6 +427,7 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
diff --git a/bootstrap/kubeadm/types/utils_test.go b/bootstrap/kubeadm/types/utils_test.go
index 92b7fbcdc..8dc00ef63 100644
--- a/bootstrap/kubeadm/types/utils_test.go
+++ b/bootstrap/kubeadm/types/utils_test.go
@@ -164,11 +164,16 @@ func TestMarshalClusterConfigurationForVersion(t *testing.T) {
 			},
 			want: "apiServer: {}\n" +
 				"apiVersion: kubeadm.k8s.io/v1beta2\n" +
+				"bottlerocketBootstrap: {}\n" +
+				"bottlerocketControl: {}\n" +
 				"controllerManager: {}\n" +
 				"dns: {}\n" +
 				"etcd: {}\n" +
 				"kind: ClusterConfiguration\n" +
 				"networking: {}\n" +
+				"pause: {}\n" +
+				"proxy: {}\n" +
+				"registryMirror: {}\n" +
 				"scheduler: {}\n",
 			wantErr: false,
 		},
@@ -180,11 +185,16 @@ func TestMarshalClusterConfigurationForVersion(t *testing.T) {
 			},
 			want: "apiServer: {}\n" +
 				"apiVersion: kubeadm.k8s.io/v1beta3\n" +
+				"bottlerocketBootstrap: {}\n" +
+				"bottlerocketControl: {}\n" +
 				"controllerManager: {}\n" +
 				"dns: {}\n" +
 				"etcd: {}\n" +
 				"kind: ClusterConfiguration\n" +
 				"networking: {}\n" +
+				"pause: {}\n" +
+				"proxy: {}\n" +
+				"registryMirror: {}\n" +
 				"scheduler: {}\n",
 			wantErr: false,
 		},
@@ -400,11 +410,16 @@ func TestMarshalJoinConfigurationForVersion(t *testing.T) {
 				version: semver.MustParse("1.15.0"),
 			},
 			want: "apiVersion: kubeadm.k8s.io/v1beta2\n" + "" +
+				"bottlerocketBootstrap: {}\n" +
+				"bottlerocketControl: {}\n" +
 				"discovery: {}\n" +
 				"kind: JoinConfiguration\n" +
 				"nodeRegistration:\n" +
 				"  ignorePreflightErrors:\n" +
-				"  - some-preflight-check\n",
+				"  - some-preflight-check\n" +
+				"pause: {}\n" +
+				"proxy: {}\n" +
+				"registryMirror: {}\n",
 			wantErr: false,
 		},
 		{
@@ -418,12 +433,17 @@ func TestMarshalJoinConfigurationForVersion(t *testing.T) {
 				version: semver.MustParse("1.22.0"),
 			},
 			want: "apiVersion: kubeadm.k8s.io/v1beta3\n" + "" +
+				"bottlerocketBootstrap: {}\n" +
+				"bottlerocketControl: {}\n" +
 				"discovery: {}\n" +
 				"kind: JoinConfiguration\n" +
 				"nodeRegistration:\n" +
 				"  ignorePreflightErrors:\n" +
 				"  - some-preflight-check\n" +
-				"  taints: null\n",
+				"  taints: null\n" +
+				"pause: {}\n" +
+				"proxy: {}\n" +
+				"registryMirror: {}\n",
 			wantErr: false,
 		},
 		{
@@ -500,11 +520,16 @@ func TestUnmarshalClusterConfiguration(t *testing.T) {
 			args: args{
 				yaml: "apiServer: {}\n" +
 					"apiVersion: kubeadm.k8s.io/v1beta2\n" + "" +
+					"bottlerocketBootstrap: {}\n" +
+					"bottlerocketControl: {}\n" +
 					"controllerManager: {}\n" +
 					"dns: {}\n" +
 					"etcd: {}\n" +
 					"kind: ClusterConfiguration\n" +
 					"networking: {}\n" +
+					"pause: {}\n" +
+					"proxy: {}\n" +
+					"registryMirror: {}\n" +
 					"scheduler: {}\n",
 			},
 			want:    &bootstrapv1.ClusterConfiguration{},
@@ -515,11 +540,16 @@ func TestUnmarshalClusterConfiguration(t *testing.T) {
 			args: args{
 				yaml: "apiServer: {}\n" +
 					"apiVersion: kubeadm.k8s.io/v1beta3\n" + "" +
+					"bottlerocketBootstrap: {}\n" +
+					"bottlerocketControl: {}\n" +
 					"controllerManager: {}\n" +
 					"dns: {}\n" +
 					"etcd: {}\n" +
 					"kind: ClusterConfiguration\n" +
 					"networking: {}\n" +
+					"pause: {}\n" +
+					"proxy: {}\n" +
+					"registryMirror: {}\n" +
 					"scheduler: {}\n",
 			},
 			want:    &bootstrapv1.ClusterConfiguration{},
diff --git a/cmd/clusterctl/client/cluster/mover_test.go b/cmd/clusterctl/client/cluster/mover_test.go
index 1ee0aec63..742b8fa77 100644
--- a/cmd/clusterctl/client/cluster/mover_test.go
+++ b/cmd/clusterctl/client/cluster/mover_test.go
@@ -693,7 +693,7 @@ var backupRestoreTests = []struct {
 			objs: test.NewFakeCluster("ns1", "foo").Objs(),
 		},
 		files: map[string]string{
-			"Cluster_ns1_foo.yaml":                      `{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","metadata":{"creationTimestamp":null,"name":"foo","namespace":"ns1","resourceVersion":"999","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"},"spec":{"controlPlaneEndpoint":{"host":"","port":0},"infrastructureRef":{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","name":"foo","namespace":"ns1"}},"status":{"controlPlaneReady":false,"infrastructureReady":false}}` + "\n",
+			"Cluster_ns1_foo.yaml":                      `{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","metadata":{"creationTimestamp":null,"name":"foo","namespace":"ns1","resourceVersion":"999","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"},"spec":{"controlPlaneEndpoint":{"host":"","port":0},"infrastructureRef":{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","name":"foo","namespace":"ns1"}},"status":{"controlPlaneReady":false,"infrastructureReady":false,"managedExternalEtcdInitialized":false,"managedExternalEtcdReady":false}}` + "\n",
 			"Secret_ns1_foo-kubeconfig.yaml":            `{"apiVersion":"v1","kind":"Secret","metadata":{"creationTimestamp":null,"name":"foo-kubeconfig","namespace":"ns1","ownerReferences":[{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","name":"foo","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"}],"resourceVersion":"999","uid":"/v1, Kind=Secret, ns1/foo-kubeconfig"}}` + "\n",
 			"Secret_ns1_foo-ca.yaml":                    `{"apiVersion":"v1","kind":"Secret","metadata":{"creationTimestamp":null,"name":"foo-ca","namespace":"ns1","resourceVersion":"999","uid":"/v1, Kind=Secret, ns1/foo-ca"}}` + "\n",
 			"GenericInfrastructureCluster_ns1_foo.yaml": `{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","metadata":{"creationTimestamp":null,"labels":{"cluster.x-k8s.io/cluster-name":"foo"},"name":"foo","namespace":"ns1","ownerReferences":[{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","name":"foo","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"}],"resourceVersion":"999","uid":"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureCluster, ns1/foo"}}` + "\n",
@@ -711,11 +711,11 @@ var backupRestoreTests = []struct {
 			}(),
 		},
 		files: map[string]string{
-			"Cluster_ns1_foo.yaml":                      `{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","metadata":{"creationTimestamp":null,"name":"foo","namespace":"ns1","resourceVersion":"999","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"},"spec":{"controlPlaneEndpoint":{"host":"","port":0},"infrastructureRef":{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","name":"foo","namespace":"ns1"}},"status":{"controlPlaneReady":false,"infrastructureReady":false}}` + "\n",
+			"Cluster_ns1_foo.yaml":                      `{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","metadata":{"creationTimestamp":null,"name":"foo","namespace":"ns1","resourceVersion":"999","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"},"spec":{"controlPlaneEndpoint":{"host":"","port":0},"infrastructureRef":{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","name":"foo","namespace":"ns1"}},"status":{"controlPlaneReady":false,"infrastructureReady":false,"managedExternalEtcdInitialized":false,"managedExternalEtcdReady":false}}` + "\n",
 			"Secret_ns1_foo-kubeconfig.yaml":            `{"apiVersion":"v1","kind":"Secret","metadata":{"creationTimestamp":null,"name":"foo-kubeconfig","namespace":"ns1","ownerReferences":[{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","name":"foo","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"}],"resourceVersion":"999","uid":"/v1, Kind=Secret, ns1/foo-kubeconfig"}}` + "\n",
 			"Secret_ns1_foo-ca.yaml":                    `{"apiVersion":"v1","kind":"Secret","metadata":{"creationTimestamp":null,"name":"foo-ca","namespace":"ns1","resourceVersion":"999","uid":"/v1, Kind=Secret, ns1/foo-ca"}}` + "\n",
 			"GenericInfrastructureCluster_ns1_foo.yaml": `{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","metadata":{"creationTimestamp":null,"labels":{"cluster.x-k8s.io/cluster-name":"foo"},"name":"foo","namespace":"ns1","ownerReferences":[{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","name":"foo","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns1/foo"}],"resourceVersion":"999","uid":"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureCluster, ns1/foo"}}` + "\n",
-			"Cluster_ns2_bar.yaml":                      `{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","metadata":{"creationTimestamp":null,"name":"bar","namespace":"ns2","resourceVersion":"999","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/bar"},"spec":{"controlPlaneEndpoint":{"host":"","port":0},"infrastructureRef":{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","name":"bar","namespace":"ns2"}},"status":{"controlPlaneReady":false,"infrastructureReady":false}}` + "\n",
+			"Cluster_ns2_bar.yaml":                      `{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","metadata":{"creationTimestamp":null,"name":"bar","namespace":"ns2","resourceVersion":"999","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/bar"},"spec":{"controlPlaneEndpoint":{"host":"","port":0},"infrastructureRef":{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","name":"bar","namespace":"ns2"}},"status":{"controlPlaneReady":false,"infrastructureReady":false,"managedExternalEtcdInitialized":false,"managedExternalEtcdReady":false}}` + "\n",
 			"Secret_ns2_bar-kubeconfig.yaml":            `{"apiVersion":"v1","kind":"Secret","metadata":{"creationTimestamp":null,"name":"bar-kubeconfig","namespace":"ns2","ownerReferences":[{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","name":"bar","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/bar"}],"resourceVersion":"999","uid":"/v1, Kind=Secret, ns2/bar-kubeconfig"}}` + "\n",
 			"Secret_ns2_bar-ca.yaml":                    `{"apiVersion":"v1","kind":"Secret","metadata":{"creationTimestamp":null,"name":"bar-ca","namespace":"ns2","resourceVersion":"999","uid":"/v1, Kind=Secret, ns2/bar-ca"}}` + "\n",
 			"GenericInfrastructureCluster_ns2_bar.yaml": `{"apiVersion":"infrastructure.cluster.x-k8s.io/v1beta1","kind":"GenericInfrastructureCluster","metadata":{"creationTimestamp":null,"labels":{"cluster.x-k8s.io/cluster-name":"bar"},"name":"bar","namespace":"ns2","ownerReferences":[{"apiVersion":"cluster.x-k8s.io/v1beta1","kind":"Cluster","name":"bar","uid":"cluster.x-k8s.io/v1beta1, Kind=Cluster, ns2/bar"}],"resourceVersion":"999","uid":"infrastructure.cluster.x-k8s.io/v1beta1, Kind=GenericInfrastructureCluster, ns2/bar"}}` + "\n",
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index aec75d032..cae3440df 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -210,6 +210,22 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketControl:
+                        description: |-
+                          BottlerocketControl holds the image source for control container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           CertificatesDir specifies where to store or look for all required certificates.
@@ -837,6 +853,22 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketControl:
+                        description: |-
+                          BottlerocketControl holds the image source for control container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           CACertPath is the path to the SSL certificate authority used to
@@ -1477,6 +1509,22 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketControl:
+                        description: |-
+                          BottlerocketControl holds the image source for control container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
@@ -2101,6 +2149,22 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketControl:
+                        description: |-
+                          BottlerocketControl holds the image source for control container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           caCertPath is the path to the SSL certificate authority used to
@@ -2960,6 +3024,22 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketControl:
+                        description: |-
+                          BottlerocketControl holds the image source for control container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       certificatesDir:
                         description: |-
                           certificatesDir specifies where to store or look for all required certificates.
@@ -4080,6 +4160,22 @@ spec:
                               In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                             type: string
                         type: object
+                      bottlerocketControl:
+                        description: |-
+                          BottlerocketControl holds the image source for control container
+                          This is only for bottlerocket
+                        properties:
+                          imageRepository:
+                            description: |-
+                              ImageRepository sets the container registry to pull images from.
+                              if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                            type: string
+                          imageTag:
+                            description: |-
+                              ImageTag allows to specify a tag for the image.
+                              In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                            type: string
+                        type: object
                       caCertPath:
                         description: |-
                           caCertPath is the path to the SSL certificate authority used to
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index dbb48ebdf..af3d6df22 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -147,6 +147,22 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketControl:
+                                description: |-
+                                  BottlerocketControl holds the image source for control container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
@@ -782,6 +798,22 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketControl:
+                                description: |-
+                                  BottlerocketControl holds the image source for control container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               caCertPath:
                                 description: |-
                                   caCertPath is the path to the SSL certificate authority used to
@@ -1540,6 +1572,22 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketControl:
+                                description: |-
+                                  BottlerocketControl holds the image source for control container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               certificatesDir:
                                 description: |-
                                   certificatesDir specifies where to store or look for all required certificates.
@@ -2689,6 +2737,22 @@ spec:
                                       In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
                                     type: string
                                 type: object
+                              bottlerocketControl:
+                                description: |-
+                                  BottlerocketControl holds the image source for control container
+                                  This is only for bottlerocket
+                                properties:
+                                  imageRepository:
+                                    description: |-
+                                      ImageRepository sets the container registry to pull images from.
+                                      if not set, the ImageRepository defined in ClusterConfiguration will be used instead.
+                                    type: string
+                                  imageTag:
+                                    description: |-
+                                      ImageTag allows to specify a tag for the image.
+                                      In case this value is set, kubeadm does not change automatically the version of the above components during upgrades.
+                                    type: string
+                                type: object
                               caCertPath:
                                 description: |-
                                   caCertPath is the path to the SSL certificate authority used to
diff --git a/controlplane/kubeadm/internal/workload_cluster_coredns_test.go b/controlplane/kubeadm/internal/workload_cluster_coredns_test.go
index fd68d0a15..96c3a711b 100644
--- a/controlplane/kubeadm/internal/workload_cluster_coredns_test.go
+++ b/controlplane/kubeadm/internal/workload_cluster_coredns_test.go
@@ -1423,6 +1423,8 @@ func TestUpdateCoreDNSImageInfoInKubeadmConfigMap(t *testing.T) {
 			wantClusterConfiguration: utilyaml.Raw(`
 				apiServer: {}
 				apiVersion: kubeadm.k8s.io/v1beta2
+				bottlerocketBootstrap: {}
+				bottlerocketControl: {}
 				controllerManager: {}
 				dns:
 				  imageRepository: example.com/k8s
@@ -1430,6 +1432,9 @@ func TestUpdateCoreDNSImageInfoInKubeadmConfigMap(t *testing.T) {
 				etcd: {}
 				kind: ClusterConfiguration
 				networking: {}
+				pause: {}
+				proxy: {}
+				registryMirror: {}
 				scheduler: {}
 				`),
 		},
diff --git a/controlplane/kubeadm/internal/workload_cluster_etcd_test.go b/controlplane/kubeadm/internal/workload_cluster_etcd_test.go
index 8327c5857..515af3e63 100644
--- a/controlplane/kubeadm/internal/workload_cluster_etcd_test.go
+++ b/controlplane/kubeadm/internal/workload_cluster_etcd_test.go
@@ -62,6 +62,8 @@ func TestUpdateEtcdExternalInKubeadmConfigMap(t *testing.T) {
 			wantClusterConfiguration: utilyaml.Raw(`
 				apiServer: {}
 				apiVersion: kubeadm.k8s.io/v1beta2
+				bottlerocketBootstrap: {}
+				bottlerocketControl: {}
 				controllerManager: {}
 				dns: {}
 				etcd:
@@ -73,6 +75,9 @@ func TestUpdateEtcdExternalInKubeadmConfigMap(t *testing.T) {
 				    keyFile: /tmp/key_file.key
 				kind: ClusterConfiguration
 				networking: {}
+				pause: {}
+				proxy: {}
+				registryMirror: {}
 				scheduler: {}
 				`),
 		},
@@ -156,6 +161,8 @@ func TestUpdateEtcdLocalInKubeadmConfigMap(t *testing.T) {
 			wantClusterConfiguration: utilyaml.Raw(`
 				apiServer: {}
 				apiVersion: kubeadm.k8s.io/v1beta2
+				bottlerocketBootstrap: {}
+				bottlerocketControl: {}
 				controllerManager: {}
 				dns: {}
 				etcd:
@@ -166,6 +173,9 @@ func TestUpdateEtcdLocalInKubeadmConfigMap(t *testing.T) {
 				    imageTag: v1.6.0
 				kind: ClusterConfiguration
 				networking: {}
+				pause: {}
+				proxy: {}
+				registryMirror: {}
 				scheduler: {}
 				`),
 		},
diff --git a/controlplane/kubeadm/internal/workload_cluster_test.go b/controlplane/kubeadm/internal/workload_cluster_test.go
index 7ff30cbd0..bea01b4b5 100644
--- a/controlplane/kubeadm/internal/workload_cluster_test.go
+++ b/controlplane/kubeadm/internal/workload_cluster_test.go
@@ -496,12 +496,17 @@ func TestUpdateUpdateClusterConfigurationInKubeadmConfigMap(t *testing.T) {
 					clusterConfigurationKey: utilyaml.Raw(`
 						apiServer: {}
 						apiVersion: kubeadm.k8s.io/v1beta2
+						bottlerocketBootstrap: {}
+						bottlerocketControl: {}
 						controllerManager: {}
 						dns: {}
 						etcd: {}
 						kind: ClusterConfiguration
 						kubernetesVersion: v1.17.2
 						networking: {}
+						pause: {}
+						proxy: {}
+						registryMirror: {}
 						scheduler: {}
 						`),
 				},
@@ -535,12 +540,17 @@ func TestUpdateUpdateClusterConfigurationInKubeadmConfigMap(t *testing.T) {
 					clusterConfigurationKey: utilyaml.Raw(`
 						apiServer: {}
 						apiVersion: kubeadm.k8s.io/v1beta3
+						bottlerocketBootstrap: {}
+						bottlerocketControl: {}
 						controllerManager: {}
 						dns: {}
 						etcd: {}
 						kind: ClusterConfiguration
 						kubernetesVersion: v1.28.0
 						networking: {}
+						pause: {}
+						proxy: {}
+						registryMirror: {}
 						scheduler: {}
 						`),
 				},
@@ -861,11 +871,16 @@ func TestUpdateApiServerInKubeadmConfigMap(t *testing.T) {
 				    mountPath: /foo/bar
 				    name: mount2
 				apiVersion: kubeadm.k8s.io/v1beta2
+				bottlerocketBootstrap: {}
+				bottlerocketControl: {}
 				controllerManager: {}
 				dns: {}
 				etcd: {}
 				kind: ClusterConfiguration
 				networking: {}
+				pause: {}
+				proxy: {}
+				registryMirror: {}
 				scheduler: {}
 				`),
 		},
@@ -930,6 +945,8 @@ func TestUpdateControllerManagerInKubeadmConfigMap(t *testing.T) {
 			wantClusterConfiguration: utilyaml.Raw(`
 				apiServer: {}
 				apiVersion: kubeadm.k8s.io/v1beta2
+				bottlerocketBootstrap: {}
+				bottlerocketControl: {}
 				controllerManager:
 				  extraArgs:
 				    bar: baz
@@ -942,6 +959,9 @@ func TestUpdateControllerManagerInKubeadmConfigMap(t *testing.T) {
 				etcd: {}
 				kind: ClusterConfiguration
 				networking: {}
+				pause: {}
+				proxy: {}
+				registryMirror: {}
 				scheduler: {}
 				`),
 		},
@@ -1006,11 +1026,16 @@ func TestUpdateSchedulerInKubeadmConfigMap(t *testing.T) {
 			wantClusterConfiguration: utilyaml.Raw(`
 				apiServer: {}
 				apiVersion: kubeadm.k8s.io/v1beta2
+				bottlerocketBootstrap: {}
+				bottlerocketControl: {}
 				controllerManager: {}
 				dns: {}
 				etcd: {}
 				kind: ClusterConfiguration
 				networking: {}
+				pause: {}
+				proxy: {}
+				registryMirror: {}
 				scheduler:
 				  extraArgs:
 				    bar: baz
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
index ece68bca6..ea95c7345 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/kubeadm_types.go
@@ -71,6 +71,11 @@ type ClusterConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
@@ -162,6 +167,13 @@ type BottlerocketBootstrap struct {
 	ImageMeta `json:",inline"`
 }
 
+// BottlerocketControl holds the settings of control container for bottlerocket nodes
+// This setting is ONLY for bottlerocket nodes.
+type BottlerocketControl struct {
+	// ImageMeta allows to customize the image used for the BottlerocketControl component
+	ImageMeta `json:",inline"`
+}
+
 // ProxyConfiguration holds the settings for proxying bottlerocket services
 type ProxyConfiguration struct {
 	// HTTPS proxy
@@ -399,6 +411,11 @@ type JoinConfiguration struct {
 	// +optional
 	BottlerocketBootstrap BottlerocketBootstrap `json:"bottlerocketBootstrap,omitempty"`
 
+	// BottlerocketControl holds the image source for control container
+	// This is only for bottlerocket
+	// +optional
+	BottlerocketControl BottlerocketControl `json:"bottlerocketControl,omitempty"`
+
 	// Proxy holds the https and no proxy information
 	// This is only for bottlerocket
 	// +optional
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
index f1a49d14c..929264bbe 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.conversion.go
@@ -100,6 +100,16 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddGeneratedConversionFunc((*BottlerocketControl)(nil), (*v1beta1.BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl(a.(*BottlerocketControl), b.(*v1beta1.BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
+	if err := s.AddGeneratedConversionFunc((*v1beta1.BottlerocketControl)(nil), (*BottlerocketControl)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(a.(*v1beta1.BottlerocketControl), b.(*BottlerocketControl), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddGeneratedConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -605,6 +615,30 @@ func Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in
 	return autoConvert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(in, out, s)
 }
 
+func autoConvert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_v1alpha4_ImageMeta_To_v1beta1_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl is an autogenerated conversion function.
+func Convert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl(in *BottlerocketControl, out *v1beta1.BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl(in, out, s)
+}
+
+func autoConvert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	if err := Convert_v1beta1_ImageMeta_To_v1alpha4_ImageMeta(&in.ImageMeta, &out.ImageMeta, s); err != nil {
+		return err
+	}
+	return nil
+}
+
+// Convert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl is an autogenerated conversion function.
+func Convert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(in *v1beta1.BottlerocketControl, out *BottlerocketControl, s conversion.Scope) error {
+	return autoConvert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(in, out, s)
+}
+
 func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(in *ClusterConfiguration, out *v1beta1.ClusterConfiguration, s conversion.Scope) error {
 	if err := Convert_v1alpha4_Pause_To_v1beta1_Pause(&in.Pause, &out.Pause, s); err != nil {
 		return err
@@ -612,6 +646,9 @@ func autoConvert_v1alpha4_ClusterConfiguration_To_v1beta1_ClusterConfiguration(i
 	if err := Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -657,6 +694,9 @@ func autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(i
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -1069,6 +1109,9 @@ func autoConvert_v1alpha4_JoinConfiguration_To_v1beta1_JoinConfiguration(in *Joi
 	if err := Convert_v1alpha4_BottlerocketBootstrap_To_v1beta1_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1alpha4_BottlerocketControl_To_v1beta1_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1alpha4_ProxyConfiguration_To_v1beta1_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
@@ -1098,6 +1141,9 @@ func autoConvert_v1beta1_JoinConfiguration_To_v1alpha4_JoinConfiguration(in *v1b
 	if err := Convert_v1beta1_BottlerocketBootstrap_To_v1alpha4_BottlerocketBootstrap(&in.BottlerocketBootstrap, &out.BottlerocketBootstrap, s); err != nil {
 		return err
 	}
+	if err := Convert_v1beta1_BottlerocketControl_To_v1alpha4_BottlerocketControl(&in.BottlerocketControl, &out.BottlerocketControl, s); err != nil {
+		return err
+	}
 	if err := Convert_v1beta1_ProxyConfiguration_To_v1alpha4_ProxyConfiguration(&in.Proxy, &out.Proxy, s); err != nil {
 		return err
 	}
diff --git a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
index d7b753a82..5aec0f4bf 100644
--- a/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
+++ b/internal/apis/bootstrap/kubeadm/v1alpha4/zz_generated.deepcopy.go
@@ -158,12 +158,29 @@ func (in *BottlerocketBootstrap) DeepCopy() *BottlerocketBootstrap {
 	return out
 }
 
+// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
+func (in *BottlerocketControl) DeepCopyInto(out *BottlerocketControl) {
+	*out = *in
+	out.ImageMeta = in.ImageMeta
+}
+
+// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BottlerocketControl.
+func (in *BottlerocketControl) DeepCopy() *BottlerocketControl {
+	if in == nil {
+		return nil
+	}
+	out := new(BottlerocketControl)
+	in.DeepCopyInto(out)
+	return out
+}
+
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *ClusterConfiguration) DeepCopyInto(out *ClusterConfiguration) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.Etcd.DeepCopyInto(&out.Etcd)
@@ -532,6 +549,7 @@ func (in *JoinConfiguration) DeepCopyInto(out *JoinConfiguration) {
 	out.TypeMeta = in.TypeMeta
 	out.Pause = in.Pause
 	out.BottlerocketBootstrap = in.BottlerocketBootstrap
+	out.BottlerocketControl = in.BottlerocketControl
 	in.Proxy.DeepCopyInto(&out.Proxy)
 	out.RegistryMirror = in.RegistryMirror
 	in.NodeRegistration.DeepCopyInto(&out.NodeRegistration)
-- 
2.45.2

