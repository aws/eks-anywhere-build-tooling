From e5ebf423b7b8b2ef7455f51faf64d7aaa38262bf Mon Sep 17 00:00:00 2001
From: Prow Bot <prow@amazonaws.com>
Date: Thu, 23 Mar 2023 14:45:03 -0400
Subject: [PATCH] Fix vCenter session leaks

---
 main.go                     |  2 ++
 pkg/session/session.go      | 65 ++++++++++++++++++++++---------------
 pkg/session/session_test.go |  2 +-
 3 files changed, 41 insertions(+), 28 deletions(-)

diff --git a/main.go b/main.go
index 38f36360..67469eae 100644
--- a/main.go
+++ b/main.go
@@ -41,6 +41,7 @@ import (
 	"sigs.k8s.io/cluster-api-provider-vsphere/pkg/constants"
 	"sigs.k8s.io/cluster-api-provider-vsphere/pkg/context"
 	"sigs.k8s.io/cluster-api-provider-vsphere/pkg/manager"
+	"sigs.k8s.io/cluster-api-provider-vsphere/pkg/session"
 	"sigs.k8s.io/cluster-api-provider-vsphere/pkg/version"
 )
 
@@ -222,6 +223,7 @@ func main() {
 	defer func(watch *fsnotify.Watcher) {
 		_ = watch.Close()
 	}(watch)
+	defer session.Clear()
 }
 
 func setupVAPIControllers(ctx *context.ControllerManagerContext, mgr ctrlmgr.Manager) error {
diff --git a/pkg/session/session.go b/pkg/session/session.go
index 76b1c54d..f25d2bb0 100644
--- a/pkg/session/session.go
+++ b/pkg/session/session.go
@@ -39,9 +39,14 @@ import (
 	"sigs.k8s.io/cluster-api-provider-vsphere/apis/v1beta1"
 )
 
-// global Session map against sessionKeys
-// in map[sessionKey]Session.
-var sessionCache sync.Map
+var (
+	// global Session map against sessionKeys in map[sessionKey]Session.
+	sessionCache sync.Map
+
+	// mutex to control access to the GetOrCreate function to avoid duplicate
+	// session creations on startup.
+	sessionMU sync.Mutex
+)
 
 // Session is a vSphere session with a configured Finder.
 type Session struct {
@@ -102,6 +107,8 @@ func (p *Params) WithFeatures(feature Feature) *Params {
 // already exist.
 func GetOrCreate(ctx context.Context, params *Params) (*Session, error) {
 	logger := ctrl.LoggerFrom(ctx).WithName("session")
+	sessionMU.Lock()
+	defer sessionMU.Unlock()
 
 	sessionKey := params.server + params.userinfo.Username() + params.datacenter
 	if cachedSession, ok := sessionCache.Load(sessionKey); ok {
@@ -213,29 +220,9 @@ func clearCache(logger logr.Logger, sessionKey string) {
 	if cachedSession, ok := sessionCache.Load(sessionKey); ok {
 		s := cachedSession.(*Session)
 
-		// check for the presence of tagmanager session
-		// since calling Logout on an expired session blocks
-		session, err := s.TagManager.Session(context.Background())
-		if err != nil {
-			logger.Error(err, "unable to get tag manager session")
-		}
-		if session != nil {
-			logger.V(6).Info("found active tag manager session, logging out")
-			err := s.TagManager.Logout(context.Background())
-			if err != nil {
-				logger.Error(err, "unable to logout tag manager session")
-			}
-		}
-
-		vimSessionActive, err := s.SessionManager.SessionIsActive(context.Background())
-		if err != nil {
-			logger.Error(err, "unable to get vim client session")
-		} else if vimSessionActive {
-			logger.V(6).Info("found active vim session, logging out")
-			err := s.SessionManager.Logout(context.Background())
-			if err != nil {
-				logger.Error(err, "unable to logout vim session")
-			}
+		logger.Info("performing session log out and clearing session", "key", sessionKey)
+		if err := s.Logout(context.Background()); err != nil {
+			logger.Error(err, "unable to logout session")
 		}
 	}
 	sessionCache.Delete(sessionKey)
@@ -253,7 +240,7 @@ func newManager(ctx context.Context, logger logr.Logger, sessionKey string, clie
 			return nil
 		}
 
-		logger.V(6).Info("rest client session expired, clearing cache")
+		logger.Info("rest client session expired, clearing cache")
 		clearCache(logger, sessionKey)
 		return errors.New("rest client session expired")
 	})
@@ -263,6 +250,30 @@ func newManager(ctx context.Context, logger logr.Logger, sessionKey string, clie
 	return tags.NewManager(rc), nil
 }
 
+func (s *Session) GetVersion() (infrav1.VCenterVersion, error) {
+	svcVersion := s.ServiceContent.About.Version
+	version, err := semver.New(svcVersion)
+	if err != nil {
+		return "", err
+	}
+
+	switch version.Major {
+	case 6, 7, 8:
+		return infrav1.NewVCenterVersion(svcVersion), nil
+	default:
+		return "", unidentifiedVCenterVersion{version: svcVersion}
+	}
+}
+
+// Clear is meant to destroy all the cached sessions.
+func Clear() {
+	sessionCache.Range(func(key, s any) bool {
+		cachedSession := s.(*Session)
+		_ = cachedSession.Logout(context.Background())
+		return true
+	})
+}
+
 // FindByBIOSUUID finds an object by its BIOS UUID.
 //
 // To avoid comments about this function's name, please see the Golang
diff --git a/pkg/session/session_test.go b/pkg/session/session_test.go
index a938aed3..ffdbbdc2 100644
--- a/pkg/session/session_test.go
+++ b/pkg/session/session_test.go
@@ -160,7 +160,7 @@ func TestGetSessionWithKeepAlive(t *testing.T) {
 	// Try to remove vim session
 	g.Expect(s.Logout(context.Background())).To(Succeed())
 
-	// after logging out old session must be deleted and
+	// after logging out old session must be deleted,
 	// we must get a new different session
 	// total session count must remain 1
 	s, err = GetOrCreate(context.Background(), params)
-- 
2.37.1 (Apple Git-137.1)

