From 6cb14781c4ff793aef0dcc58f511ab5e46f99641 Mon Sep 17 00:00:00 2001
From: https://github.com/helm/helm/pull/10408 <lixin20101023@gmail.com>
Date: Mon, 29 Nov 2021 16:53:43 +0800
Subject: [PATCH 1/2] Push to insecure OCI registry

Signed-off-by: acool@amazon.com
---
 cmd/helm/push.go       |  4 ++++
 pkg/action/pull.go     |  7 +++++++
 pkg/action/push.go     | 12 ++++++++++--
 pkg/registry/client.go | 31 +++++++++++++++++++++++++++++++
 4 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/cmd/helm/push.go b/cmd/helm/push.go
index ed5d1699ac7..e2add508833 100644
--- a/cmd/helm/push.go
+++ b/cmd/helm/push.go
@@ -54,5 +54,9 @@ func newPushCmd(cfg *action.Configuration, out io.Writer) *cobra.Command {
 		},
 	}

+	f := cmd.Flags()
+	f.BoolVar(&client.InsecureSkipTLSverify, "insecure-skip-tls-verify", false, "skip tls certificate checks for the chart upload")
+	f.BoolVar(&client.PlainHTTP, "plain-http", false, "use plain http and not https to connect oci registry")
+
 	return cmd
 }
diff --git a/pkg/action/pull.go b/pkg/action/pull.go
index b4018869ef7..d638527a483 100644
--- a/pkg/action/pull.go
+++ b/pkg/action/pull.go
@@ -46,6 +46,7 @@ type Pull struct {
 	VerifyLater bool
 	UntarDir    string
 	DestDir     string
+	PlainHTTP   bool
 	cfg         *Configuration
 }

@@ -76,6 +77,12 @@ func NewPullWithOpts(opts ...PullOpt) *Pull {
 func (p *Pull) Run(chartRef string) (string, error) {
 	var out strings.Builder

+	if p.InsecureSkipTLSverify || p.PlainHTTP {
+		if err := p.cfg.RegistryClient.WithResolver(p.InsecureSkipTLSverify, p.PlainHTTP); err != nil {
+			return out.String(), err
+		}
+	}
+
 	c := downloader.ChartDownloader{
 		Out:     &out,
 		Keyring: p.Keyring,
diff --git a/pkg/action/push.go b/pkg/action/push.go
index 99d1beadc64..692b34041e7 100644
--- a/pkg/action/push.go
+++ b/pkg/action/push.go
@@ -29,8 +29,10 @@ import (
 //
 // It provides the implementation of 'helm push'.
 type Push struct {
-	Settings *cli.EnvSettings
-	cfg      *Configuration
+	Settings              *cli.EnvSettings
+	cfg                   *Configuration
+	InsecureSkipTLSverify bool
+	PlainHTTP             bool
 }

 // PushOpt is a type of function that sets options for a push action.
@@ -56,6 +58,12 @@ func NewPushWithOpts(opts ...PushOpt) *Push {
 func (p *Push) Run(chartRef string, remote string) (string, error) {
 	var out strings.Builder

+	if p.InsecureSkipTLSverify || p.PlainHTTP {
+		if err := p.cfg.RegistryClient.WithResolver(p.InsecureSkipTLSverify, p.PlainHTTP); err != nil {
+			return out.String(), err
+		}
+	}
+
 	c := uploader.ChartUploader{
 		Out:     &out,
 		Pushers: pusher.All(p.Settings),
diff --git a/pkg/registry/client.go b/pkg/registry/client.go
index 213a9dc49d5..fcde39de136 100644
--- a/pkg/registry/client.go
+++ b/pkg/registry/client.go
@@ -18,6 +18,7 @@ package registry // import "helm.sh/helm/v3/pkg/registry"

 import (
 	"context"
+	"crypto/tls"
 	"encoding/json"
 	"fmt"
 	"io"
@@ -145,6 +146,36 @@ func ClientOptCredentialsFile(credentialsFile string) ClientOption {
 	}
 }

+func (c *Client) newResolver(insecure, plainHTTP bool) (remotes.Resolver, error) {
+	headers := http.Header{}
+	headers.Set("User-Agent", version.GetUserAgent())
+	opts := []auth.ResolverOption{auth.WithResolverHeaders(headers)}
+
+	if insecure {
+		httpClient := http.DefaultClient
+		httpClient.Transport = &http.Transport{
+			TLSClientConfig: &tls.Config{
+				InsecureSkipVerify: true,
+			},
+		}
+		opts = append(opts, auth.WithResolverClient(httpClient))
+	}
+	if plainHTTP {
+		opts = append(opts, auth.WithResolverPlainHTTP())
+	}
+
+	return c.authorizer.ResolverWithOpts(opts...)
+}
+
+func (c *Client) WithResolver(insecure, plainHTTP bool) error {
+	resolver, err := c.newResolver(insecure, plainHTTP)
+	if err != nil {
+		return err
+	}
+	c.resolver = resolver
+	return nil
+}
+
 type (
 	// LoginOption allows specifying various settings on login
 	LoginOption func(*loginOperation)

From 2f861d4c1736526ab0400c0e7e5f3704347292dd Mon Sep 17 00:00:00 2001
From: pytimer <lixin20101023@gmail.com>
Date: Fri, 25 Feb 2022 17:34:53 +0800
Subject: [PATCH 2/2] Install or upgrade supports OCI insecure registry

Signed-off-by: pytimer <lixin20101023@gmail.com>
---
 cmd/helm/flags.go     | 1 +
 pkg/action/install.go | 7 +++++++
 2 files changed, 8 insertions(+)

diff --git a/cmd/helm/flags.go b/cmd/helm/flags.go
index 6a59101b7b9..31dd27d2f65 100644
--- a/cmd/helm/flags.go
+++ b/cmd/helm/flags.go
@@ -58,6 +58,7 @@ func addChartPathOptionsFlags(f *pflag.FlagSet, c *action.ChartPathOptions) {
 	f.BoolVar(&c.InsecureSkipTLSverify, "insecure-skip-tls-verify", false, "skip tls certificate checks for the chart download")
 	f.StringVar(&c.CaFile, "ca-file", "", "verify certificates of HTTPS-enabled servers using this CA bundle")
 	f.BoolVar(&c.PassCredentialsAll, "pass-credentials", false, "pass credentials to all domains")
+	f.BoolVar(&c.PlainHTTP, "plain-http", false, "use plain http to connect oci registry")
 }

 // bindOutputFlag will add the output flag to the given command and bind the
diff --git a/pkg/action/install.go b/pkg/action/install.go
index 32be904b4a1..adf237db645 100644
--- a/pkg/action/install.go
+++ b/pkg/action/install.go
@@ -117,6 +117,7 @@ type ChartPathOptions struct {
 	Username              string // --username
 	Verify                bool   // --verify
 	Version               string // --version
+	PlainHTTP             bool   // --plain-http

 	// registryClient provides a registry client but is not added with
 	// options from a flag
@@ -694,6 +695,12 @@ func (c *ChartPathOptions) LocateChart(name string, settings *cli.EnvSettings) (
 		return name, errors.Errorf("path %q not found", name)
 	}

+	if c.InsecureSkipTLSverify {
+		if err := c.registryClient.WithResolver(c.InsecureSkipTLSverify, c.PlainHTTP); err != nil {
+			return "", err
+		}
+	}
+
 	dl := downloader.ChartDownloader{
 		Out:     os.Stdout,
 		Keyring: c.Keyring,
